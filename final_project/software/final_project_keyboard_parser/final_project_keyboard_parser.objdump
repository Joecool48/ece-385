
final_project_keyboard_parser.elf:     file format elf32-littlenios2
final_project_keyboard_parser.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012440 memsz 0x00012440 flags r-x
    LOAD off    0x00013460 vaddr 0x00012460 paddr 0x00013f4c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a38 vaddr 0x00015a38 paddr 0x00015a38 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117a8  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a88  000119d8  000119d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00012460  00013f4c  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00015a38  00015a38  00015a38  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00015b9c  00015b9c  00014f4c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014f4c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f18  00000000  00000000  00014f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023752  00000000  00000000  00015e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000090c8  00000000  00000000  000395da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8b6  00000000  00000000  000426a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002384  00000000  00000000  0004df58  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a31  00000000  00000000  000502dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00053d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006b57c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d0  00000000  00000000  0006b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000701d6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000701d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000701e5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000701e6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000701e7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000701eb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000701ef  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000e  00000000  00000000  000701f3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000e  00000000  00000000  00070201  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000e  00000000  00000000  0007020f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0007021d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000027  00000000  00000000  0007022a  2**0
                  CONTENTS, READONLY
 29 .jdi          00009542  00000000  00000000  00070251  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000b3ead  00000000  00000000  00079793  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
000119d8 l    d  .rodata	00000000 .rodata
00012460 l    d  .rwdata	00000000 .rwdata
00015a38 l    d  .bss	00000000 .bss
00015b9c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_project_keyboard_parser_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00015a38 l     O .bss	00000002 ctl_reg.3589
00015a3a l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000121a6 l     O .rodata	00000010 zeroes.4404
00004748 l     F .text	000000bc __sbprintf
000121b6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004958 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000064b0 l     F .text	00000008 __fp_unlock
000064c4 l     F .text	0000019c __sinit.part.1
00006660 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012460 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000128a4 l     O .rwdata	00000020 lc_ctype_charset
00012884 l     O .rwdata	00000020 lc_message_charset
000128c4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000121e8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009b34 l     F .text	000000fc __sprint_r.part.0
0001230c l     O .rodata	00000010 zeroes.4349
0000b170 l     F .text	000000bc __sbprintf
0001231c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f1b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f2cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f2f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f3ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f4d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f5c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f79c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013f3c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fa40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fb7c l     F .text	00000034 alt_dev_reg
00012eac l     O .rwdata	00001060 jtag_game_nios
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000fe58 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010064 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010940 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010da0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010f00 l     F .text	0000003c alt_get_errno
00010f3c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015a70 g     O .bss	00000004 alt_instruction_exception_handler
00009178 g     F .text	00000074 _mprec_log10
00009264 g     F .text	0000008c __any_on
0000b724 g     F .text	00000054 _isatty_r
000121f4 g     O .rodata	00000028 __mprec_tinytens
0000f6d8 g     F .text	0000007c alt_main
000022e4 g     F .text	000000c0 _puts_r
00015a9c g     O .bss	00000100 alt_irq
0000b778 g     F .text	00000060 _lseek_r
00013f4c g       *ABS*	00000000 __flash_rwdata_start
0000db90 g     F .text	00000088 .hidden __eqdf2
00015b9c g       *ABS*	00000000 __alt_heap_start
000022a8 g     F .text	0000003c printf
0000b990 g     F .text	0000009c _wcrtomb_r
000099f4 g     F .text	0000005c __sseek
00006810 g     F .text	00000010 __sinit
0000b838 g     F .text	00000140 __swbuf_r
000072e4 g     F .text	0000007c _setlocale_r
00006668 g     F .text	00000078 __sfmoreglue
0000f778 g     F .text	00000024 __malloc_unlock
00002178 g     F .text	00000080 UsbGetRetryCnt
00007fb4 g     F .text	0000015c memmove
0000026c g     F .text	00000064 IO_init
000067f8 g     F .text	00000018 _cleanup
00008238 g     F .text	000000a8 _Balloc
0000dc18 g     F .text	000000dc .hidden __gtdf2
00011328 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b6c8 g     F .text	0000005c _fstat_r
00015a54 g     O .bss	00000004 errno
00009970 g     F .text	00000008 __seofread
00015a5c g     O .bss	00000004 alt_argv
0001bf0c g       *ABS*	00000000 _gp
0000fa10 g     F .text	00000030 usleep
00012d2c g     O .rwdata	00000180 alt_fd_list
0001134c g     F .text	00000090 alt_find_dev
00007e6c g     F .text	00000148 memcpy
000064b8 g     F .text	0000000c _cleanup_r
0000efd0 g     F .text	000000dc .hidden __floatsidf
00010e84 g     F .text	0000007c alt_io_redirect
0000dcf4 g     F .text	000000f4 .hidden __ltdf2
000119d8 g       *ABS*	00000000 __DTOR_END__
000023a4 g     F .text	00000014 puts
000115a8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009854 g     F .text	00000074 __fpclassifyd
000090d4 g     F .text	000000a4 __ratio
0000b154 g     F .text	0000001c __vfiprintf_internal
0001025c g     F .text	0000021c altera_avalon_jtag_uart_read
00002278 g     F .text	00000030 _printf_r
0000c830 g     F .text	00000064 .hidden __udivsi3
0000f428 g     F .text	000000ac isatty
00012244 g     O .rodata	000000c8 __mprec_tens
00007360 g     F .text	0000000c __locale_charset
00015a50 g     O .bss	00000004 __malloc_top_pad
00001804 g     F .text	00000268 UsbGetConfigDesc2
00013f14 g     O .rwdata	00000004 __mb_cur_max
00007390 g     F .text	0000000c _localeconv_r
0000866c g     F .text	0000003c __i2b
00006c94 g     F .text	000004c8 __sfvwrite_r
000098c8 g     F .text	00000054 _sbrk_r
0000b7d8 g     F .text	00000060 _read_r
00013f34 g     O .rwdata	00000004 alt_max_fd
0000b3bc g     F .text	000000f0 _fclose_r
00006480 g     F .text	00000030 fflush
00015a4c g     O .bss	00000004 __malloc_max_sbrked_mem
0000c914 g     F .text	000008ac .hidden __adddf3
00008e7c g     F .text	0000010c __b2d
0000c174 g     F .text	000005c4 .hidden __umoddi3
0000f5fc g     F .text	000000dc lseek
00013f0c g     O .rwdata	00000004 _global_impure_ptr
000092f0 g     F .text	00000564 _realloc_r
00015b9c g       *ABS*	00000000 __bss_end
00010cb0 g     F .text	000000f0 alt_iic_isr_register
00011220 g     F .text	00000108 alt_tick
0000bb78 g     F .text	000005fc .hidden __udivdi3
0000b624 g     F .text	00000024 _fputwc_r
0001221c g     O .rodata	00000028 __mprec_bigtens
00008450 g     F .text	00000104 __s2b
0000f0ac g     F .text	000000a8 .hidden __floatunsidf
00008bbc g     F .text	00000060 __mcmp
00001254 g     F .text	00000100 UsbSetAddress
00006830 g     F .text	00000018 __fp_lock_all
00010c64 g     F .text	0000004c alt_ic_irq_enabled
00011184 g     F .text	0000009c alt_alarm_stop
00015a64 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012d04 g     O .rwdata	00000028 alt_dev_null
00010920 g     F .text	00000020 alt_dcache_flush_all
00008554 g     F .text	00000068 __hi0bits
0000033c g     F .text	00000064 IO_read
0000ef50 g     F .text	00000080 .hidden __fixdfsi
00013f4c g       *ABS*	00000000 __ram_rwdata_end
00013f2c g     O .rwdata	00000008 alt_dev_list
0000fa7c g     F .text	00000100 write
00012460 g       *ABS*	00000000 __ram_rodata_end
0000f334 g     F .text	000000b8 fstat
0000dcf4 g     F .text	000000f4 .hidden __ledf2
000021f8 g     F .text	00000080 UsbPrintMem
00008934 g     F .text	00000140 __pow5mult
00009c48 g     F .text	0000150c ___vfiprintf_internal_r
00015a44 g     O .bss	00000004 __nlocale_changed
0000c894 g     F .text	00000058 .hidden __umodsi3
00015b9c g       *ABS*	00000000 end
0000fd98 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000119d8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000f154 g     F .text	00000064 .hidden __clzsi2
00010478 g     F .text	00000224 altera_avalon_jtag_uart_write
00006820 g     F .text	00000004 __sfp_lock_acquire
00007d88 g     F .text	000000e4 memchr
00002450 g     F .text	000022dc ___vfprintf_internal_r
00001b6c g     F .text	00000100 UsbClassRequest
00006984 g     F .text	00000310 _free_r
0000736c g     F .text	00000010 __locale_mb_cur_max
00011824 g     F .text	00000180 __call_exitprocs
00015a40 g     O .bss	00000004 __mlocale_changed
00013f18 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00015a68 g     O .bss	00000004 _alt_tick_rate
00008a74 g     F .text	00000148 __lshift
00015a6c g     O .bss	00000004 _alt_nticks
0000f7d8 g     F .text	00000104 read
0000fbe8 g     F .text	0000004c alt_sys_init
0001170c g     F .text	00000118 __register_exitproc
000086a8 g     F .text	0000028c __multiply
00010104 g     F .text	00000068 altera_avalon_jtag_uart_close
0000c8ec g     F .text	00000028 .hidden __mulsi3
00012460 g       *ABS*	00000000 __ram_rwdata_start
000119d8 g       *ABS*	00000000 __ram_rodata_start
00015a74 g     O .bss	00000028 __malloc_current_mallinfo
00008f88 g     F .text	0000014c __d2b
00001354 g     F .text	00000148 UsbGetDeviceDesc1
0000fc34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000114e4 g     F .text	000000c4 alt_get_fd
000107c8 g     F .text	00000158 alt_busy_sleep
0000b28c g     F .text	00000054 _close_r
00011690 g     F .text	0000007c memcmp
0000fcf4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015b9c g       *ABS*	00000000 __alt_stack_base
0000fd44 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004804 g     F .text	00000154 __swsetup_r
0000d1c0 g     F .text	000009d0 .hidden __divdf3
000066e0 g     F .text	00000118 __sfp
000091ec g     F .text	00000078 __copybits
000128fc g     O .rwdata	00000408 __malloc_av_
0000682c g     F .text	00000004 __sinit_lock_release
0000dde8 g     F .text	0000086c .hidden __muldf3
0000991c g     F .text	00000054 __sread
000020f4 g     F .text	00000084 UsbWaitTDListDone
000113dc g     F .text	00000108 alt_find_file
0001097c g     F .text	000000a4 alt_dev_llist_insert
0000f754 g     F .text	00000024 __malloc_lock
0000f960 g     F .text	000000b0 sbrk
00006424 g     F .text	0000005c _fflush_r
0000b2e0 g     F .text	000000dc _calloc_r
00015a38 g       *ABS*	00000000 __bss_start
00008110 g     F .text	00000128 memset
000003a0 g     F .text	00000d64 main
00015a60 g     O .bss	00000004 alt_envp
00015a48 g     O .bss	00000004 __malloc_max_total_mem
0000fc94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00001a6c g     F .text	00000100 UsbSetConfig
0000b978 g     F .text	00000018 __swbuf
00009a50 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000b4ac g     F .text	00000014 fclose
00004b80 g     F .text	00001688 _dtoa_r
0000757c g     F .text	0000080c _malloc_r
0000baec g     F .text	00000030 __ascii_wctomb
00013f38 g     O .rwdata	00000004 alt_errno
0000715c g     F .text	000000c4 _fwalk
0000c738 g     F .text	00000084 .hidden __divsi3
00006860 g     F .text	00000124 _malloc_trim_r
00001c6c g     F .text	00000148 UsbGetHidDesc
000119d8 g       *ABS*	00000000 __CTOR_END__
00009a58 g     F .text	000000dc strcmp
000119d8 g       *ABS*	00000000 __flash_rodata_start
000119d8 g       *ABS*	00000000 __DTOR_LIST__
0000db90 g     F .text	00000088 .hidden __nedf2
0000115c g     F .text	00000044 UsbRead
0000fbb0 g     F .text	00000038 alt_irq_init
0000f8dc g     F .text	00000084 alt_release_fd
0001232c g     O .rodata	00000100 .hidden __clz_tab
00015a3c g     O .bss	00000004 _PathLocale
00011644 g     F .text	00000014 atexit
0000b22c g     F .text	00000060 _write_r
0000739c g     F .text	00000018 setlocale
00013f10 g     O .rwdata	00000004 _impure_ptr
00015a58 g     O .bss	00000004 alt_argc
00006208 g     F .text	0000021c __sflush_r
00010a80 g     F .text	00000060 _do_dtors
00007388 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008e18 g     F .text	00000064 __ulp
00006848 g     F .text	00000018 __fp_unlock_all
00013f24 g     O .rwdata	00000008 alt_fs_list
00001db4 g     F .text	00000340 UsbGetReportDesc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000073b4 g     F .text	0000000c localeconv
00010b00 g     F .text	00000050 alt_ic_isr_register
00013f4c g       *ABS*	00000000 _edata
00015b9c g       *ABS*	00000000 _end
00001104 g     F .text	00000058 UsbWrite
0000b4c0 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0001016c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010bd8 g     F .text	0000008c alt_ic_irq_disable
00009978 g     F .text	0000007c __swrite
00013f1c g     O .rwdata	00000004 __malloc_trim_threshold
0000737c g     F .text	0000000c __locale_msgcharset
00011658 g     F .text	00000038 exit
00007220 g     F .text	000000c4 _fwalk_reent
00008c1c g     F .text	000001fc __mdiff
0000c7bc g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006824 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000002d0 g     F .text	0000006c IO_write
000119a4 g     F .text	00000034 _exit
0001069c g     F .text	0000012c alt_alarm_start
000073c0 g     F .text	000001bc __smakebuf_r
000023b8 g     F .text	00000098 strlen
00011028 g     F .text	0000015c open
0000dc18 g     F .text	000000dc .hidden __gedf2
00013f20 g     O .rwdata	00000004 __wctomb
00009c30 g     F .text	00000018 __sprint_r
00010ae0 g     F .text	00000020 alt_icache_flush_all
00013f40 g     O .rwdata	00000004 alt_priority_mask
00010b50 g     F .text	00000088 alt_ic_irq_enable
0000472c g     F .text	0000001c __vfprintf_internal
0000bb1c g     F .text	0000005c _wctomb_r
0000e654 g     F .text	000008fc .hidden __subdf3
000085bc g     F .text	000000b0 __lo0bits
00001674 g     F .text	00000190 UsbGetConfigDesc1
00013f44 g     O .rwdata	00000008 alt_alarm_list
00010a20 g     F .text	00000060 _do_ctors
000011a0 g     F .text	000000b4 UsbSoftReset
0000ba2c g     F .text	000000c0 wcrtomb
0000f1f4 g     F .text	000000d8 close
0000149c g     F .text	000001d8 UsbGetDeviceDesc2
0000f53c g     F .text	00000084 alt_load
0000b648 g     F .text	00000080 fputwc
00006828 g     F .text	00000004 __sinit_lock_acquire
00008308 g     F .text	00000148 __multadd
000082e0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1096a704 	addi	r2,r2,23196
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1096a704 	addi	r2,r2,23196
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d917 	ldw	r2,-25756(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d917 	ldw	r2,-25756(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6afc314 	ori	gp,gp,48908
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10968e14 	ori	r2,r2,23096

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d6e714 	ori	r3,r3,23452

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000f53c0 	call	f53c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000f6d80 	call	f6d8 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <alt_after_alt_main>

0000026c <IO_init>:
#define otg_hpi_cs			(volatile char*) OTG_HPI_CS_BASE //OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*) OTG_HPI_W_BASE


void IO_init(void)
{
     26c:	deffff04 	addi	sp,sp,-4
     270:	df000015 	stw	fp,0(sp)
     274:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
     278:	00820034 	movhi	r2,2048
     27c:	10844004 	addi	r2,r2,4352
     280:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
     284:	00820034 	movhi	r2,2048
     288:	10844404 	addi	r2,r2,4368
     28c:	00c00044 	movi	r3,1
     290:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
     294:	00820034 	movhi	r2,2048
     298:	10844804 	addi	r2,r2,4384
     29c:	00c00044 	movi	r3,1
     2a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
     2a4:	00820034 	movhi	r2,2048
     2a8:	10844c04 	addi	r2,r2,4400
     2ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
     2b0:	00820034 	movhi	r2,2048
     2b4:	10843fc4 	addi	r2,r2,4351
     2b8:	10000015 	stw	zero,0(r2)
}
     2bc:	0001883a 	nop
     2c0:	e037883a 	mov	sp,fp
     2c4:	df000017 	ldw	fp,0(sp)
     2c8:	dec00104 	addi	sp,sp,4
     2cc:	f800283a 	ret

000002d0 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
     2d0:	defffd04 	addi	sp,sp,-12
     2d4:	df000215 	stw	fp,8(sp)
     2d8:	df000204 	addi	fp,sp,8
     2dc:	2007883a 	mov	r3,r4
     2e0:	2805883a 	mov	r2,r5
     2e4:	e0fffe05 	stb	r3,-8(fp)
     2e8:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
     2ec:	00820034 	movhi	r2,2048
     2f0:	10844c04 	addi	r2,r2,4400
     2f4:	e0fffe03 	ldbu	r3,-8(fp)
     2f8:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
     2fc:	00820034 	movhi	r2,2048
     300:	10844804 	addi	r2,r2,4384
     304:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
     308:	00820034 	movhi	r2,2048
     30c:	10843fc4 	addi	r2,r2,4351
     310:	e0ffff0b 	ldhu	r3,-4(fp)
     314:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
     318:	00820034 	movhi	r2,2048
     31c:	10844804 	addi	r2,r2,4384
     320:	00c00044 	movi	r3,1
     324:	10c00005 	stb	r3,0(r2)
}
     328:	0001883a 	nop
     32c:	e037883a 	mov	sp,fp
     330:	df000017 	ldw	fp,0(sp)
     334:	dec00104 	addi	sp,sp,4
     338:	f800283a 	ret

0000033c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
     33c:	defffd04 	addi	sp,sp,-12
     340:	df000215 	stw	fp,8(sp)
     344:	df000204 	addi	fp,sp,8
     348:	2005883a 	mov	r2,r4
     34c:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
     350:	00820034 	movhi	r2,2048
     354:	10844c04 	addi	r2,r2,4400
     358:	e0ffff03 	ldbu	r3,-4(fp)
     35c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
     360:	00820034 	movhi	r2,2048
     364:	10844404 	addi	r2,r2,4368
     368:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
     36c:	00820034 	movhi	r2,2048
     370:	10843fc4 	addi	r2,r2,4351
     374:	10800017 	ldw	r2,0(r2)
     378:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
     37c:	00820034 	movhi	r2,2048
     380:	10844404 	addi	r2,r2,4368
     384:	00c00044 	movi	r3,1
     388:	10c00005 	stb	r3,0(r2)
	return temp;
     38c:	e0bffe0b 	ldhu	r2,-8(fp)
}
     390:	e037883a 	mov	sp,fp
     394:	df000017 	ldw	fp,0(sp)
     398:	dec00104 	addi	sp,sp,4
     39c:	f800283a 	ret

000003a0 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     3a0:	defff904 	addi	sp,sp,-28
     3a4:	dfc00615 	stw	ra,24(sp)
     3a8:	df000515 	stw	fp,20(sp)
     3ac:	df000504 	addi	fp,sp,20
	IO_init();
     3b0:	000026c0 	call	26c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
     3b4:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
     3b8:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
     3bc:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
     3c0:	01000074 	movhi	r4,1
     3c4:	21067604 	addi	r4,r4,6616
     3c8:	00023a40 	call	23a4 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
     3cc:	00011a00 	call	11a0 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
     3d0:	000b883a 	mov	r5,zero
     3d4:	01005104 	movi	r4,324
     3d8:	00011040 	call	1104 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
     3dc:	017fffd4 	movui	r5,65535
     3e0:	01302414 	movui	r4,49296
     3e4:	00011040 	call	1104 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     3e8:	01409604 	movi	r5,600
     3ec:	01006d04 	movi	r4,436
     3f0:	00011040 	call	1104 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     3f4:	00811004 	movi	r2,1088
     3f8:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     3fc:	e0bffb0b 	ldhu	r2,-20(fp)
     400:	100b883a 	mov	r5,r2
     404:	01005084 	movi	r4,322
     408:	00011040 	call	1104 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     40c:	00808404 	movi	r2,528
     410:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
     414:	e0bffe0b 	ldhu	r2,-8(fp)
     418:	100b883a 	mov	r5,r2
     41c:	01302314 	movui	r4,49292
     420:	00011040 	call	1104 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
     424:	000b883a 	mov	r5,zero
     428:	01007104 	movi	r4,452
     42c:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     430:	000b883a 	mov	r5,zero
     434:	01007184 	movi	r4,454
     438:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     43c:	000b883a 	mov	r5,zero
     440:	01007204 	movi	r4,456
     444:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     448:	000b883a 	mov	r5,zero
     44c:	01007284 	movi	r4,458
     450:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     454:	000b883a 	mov	r5,zero
     458:	01007304 	movi	r4,460
     45c:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     460:	000b883a 	mov	r5,zero
     464:	01007384 	movi	r4,462
     468:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     46c:	000b883a 	mov	r5,zero
     470:	01007404 	movi	r4,464
     474:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     478:	000b883a 	mov	r5,zero
     47c:	01007484 	movi	r4,466
     480:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     484:	000b883a 	mov	r5,zero
     488:	01007504 	movi	r4,468
     48c:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     490:	000b883a 	mov	r5,zero
     494:	01007584 	movi	r4,470
     498:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     49c:	000b883a 	mov	r5,zero
     4a0:	01007604 	movi	r4,472
     4a4:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     4a8:	000b883a 	mov	r5,zero
     4ac:	01007684 	movi	r4,474
     4b0:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     4b4:	000b883a 	mov	r5,zero
     4b8:	01007704 	movi	r4,476
     4bc:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     4c0:	000b883a 	mov	r5,zero
     4c4:	01007784 	movi	r4,478
     4c8:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     4cc:	01401c84 	movi	r5,114
     4d0:	01007084 	movi	r4,450
     4d4:	00011040 	call	1104 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     4d8:	01738054 	movui	r5,52737
     4dc:	01000044 	movi	r4,1
     4e0:	00002d00 	call	2d0 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     4e4:	00000306 	br	4f4 <main+0x154>
	{
		printf("Did something\n");
     4e8:	01000074 	movhi	r4,1
     4ec:	21067c04 	addi	r4,r4,6640
     4f0:	00023a40 	call	23a4 <puts>
	UsbWrite(COMM_R12,0x0000);  //r1
	UsbWrite(COMM_R13,0x0000);  //r1
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     4f4:	010000c4 	movi	r4,3
     4f8:	000033c0 	call	33c <IO_read>
     4fc:	10bfffcc 	andi	r2,r2,65535
     500:	103ff926 	beq	r2,zero,4e8 <main+0x148>
	{
		printf("Did something\n");

	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     504:	00000806 	br	528 <main+0x188>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     508:	01000044 	movi	r4,1
     50c:	000033c0 	call	33c <IO_read>
     510:	10bfffcc 	andi	r2,r2,65535
     514:	100b883a 	mov	r5,r2
     518:	01000074 	movhi	r4,1
     51c:	21068004 	addi	r4,r4,6656
     520:	00022a80 	call	22a8 <printf>
		goto USB_HOT_PLUG;
     524:	003fa906 	br	3cc <main+0x2c>
	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
		printf("Did something\n");

	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     528:	01000044 	movi	r4,1
     52c:	000033c0 	call	33c <IO_read>
     530:	10bfffcc 	andi	r2,r2,65535
     534:	1083fb58 	cmpnei	r2,r2,4077
     538:	103ff31e 	bne	r2,zero,508 <main+0x168>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
     53c:	01000074 	movhi	r4,1
     540:	21068904 	addi	r4,r4,6692
     544:	00022a80 	call	22a8 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     548:	01401d04 	movi	r5,116
     54c:	01007084 	movi	r4,450
     550:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
     554:	01400f04 	movi	r5,60
     558:	01007104 	movi	r4,452
     55c:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
     560:	000b883a 	mov	r5,zero
     564:	01007184 	movi	r4,454
     568:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
     56c:	000b883a 	mov	r5,zero
     570:	01007204 	movi	r4,456
     574:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
     578:	000b883a 	mov	r5,zero
     57c:	01007284 	movi	r4,458
     580:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
     584:	000b883a 	mov	r5,zero
     588:	01007304 	movi	r4,460
     58c:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
     590:	000b883a 	mov	r5,zero
     594:	01007384 	movi	r4,462
     598:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
     59c:	000b883a 	mov	r5,zero
     5a0:	01007404 	movi	r4,464
     5a4:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
     5a8:	000b883a 	mov	r5,zero
     5ac:	01007484 	movi	r4,466
     5b0:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
     5b4:	000b883a 	mov	r5,zero
     5b8:	01007504 	movi	r4,468
     5bc:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
     5c0:	000b883a 	mov	r5,zero
     5c4:	01007584 	movi	r4,470
     5c8:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
     5cc:	000b883a 	mov	r5,zero
     5d0:	01007604 	movi	r4,472
     5d4:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
     5d8:	000b883a 	mov	r5,zero
     5dc:	01007684 	movi	r4,474
     5e0:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
     5e4:	000b883a 	mov	r5,zero
     5e8:	01007704 	movi	r4,476
     5ec:	00011040 	call	1104 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
     5f0:	000b883a 	mov	r5,zero
     5f4:	01007784 	movi	r4,478
     5f8:	00011040 	call	1104 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
     5fc:	01738054 	movui	r5,52737
     600:	01000044 	movi	r4,1
     604:	00002d00 	call	2d0 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
     608:	0001883a 	nop
     60c:	01000044 	movi	r4,1
     610:	000033c0 	call	33c <IO_read>
     614:	10bfffcc 	andi	r2,r2,65535
     618:	1083fb58 	cmpnei	r2,r2,4077
     61c:	10000826 	beq	r2,zero,640 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
     620:	01000044 	movi	r4,1
     624:	000033c0 	call	33c <IO_read>
     628:	10bfffcc 	andi	r2,r2,65535
     62c:	100b883a 	mov	r5,r2
     630:	01000074 	movhi	r4,1
     634:	21068004 	addi	r4,r4,6656
     638:	00022a80 	call	22a8 <printf>
		goto USB_HOT_PLUG;
     63c:	003f6306 	br	3cc <main+0x2c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
     640:	00b02284 	movi	r2,-16246
     644:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
     648:	008c0004 	movi	r2,12288
     64c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
     650:	00880004 	movi	r2,8192
     654:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
     658:	d0a6cb0b 	ldhu	r2,-25812(gp)
     65c:	10bfffcc 	andi	r2,r2,65535
     660:	1009883a 	mov	r4,r2
     664:	000115c0 	call	115c <UsbRead>
     668:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
     66c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     670:	e0fffb0b 	ldhu	r3,-20(fp)
     674:	1884703a 	and	r2,r3,r2
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	1000351e 	bne	r2,zero,754 <main+0x3b4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     680:	e03ffbc5 	stb	zero,-17(fp)
     684:	00000f06 	br	6c4 <main+0x324>
		{
			usleep(5*1000);
     688:	0104e204 	movi	r4,5000
     68c:	000fa100 	call	fa10 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
     690:	d0a6cb0b 	ldhu	r2,-25812(gp)
     694:	10bfffcc 	andi	r2,r2,65535
     698:	1009883a 	mov	r4,r2
     69c:	000115c0 	call	115c <UsbRead>
     6a0:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
     6a4:	d0a6cb8b 	ldhu	r2,-25810(gp)
     6a8:	e0fffb0b 	ldhu	r3,-20(fp)
     6ac:	1884703a 	and	r2,r3,r2
     6b0:	10bfffcc 	andi	r2,r2,65535
     6b4:	1000071e 	bne	r2,zero,6d4 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
     6b8:	e0bffbc3 	ldbu	r2,-17(fp)
     6bc:	10800044 	addi	r2,r2,1
     6c0:	e0bffbc5 	stb	r2,-17(fp)
     6c4:	e0bffbc3 	ldbu	r2,-17(fp)
     6c8:	10800170 	cmpltui	r2,r2,5
     6cc:	103fee1e 	bne	r2,zero,688 <main+0x2e8>
     6d0:	00000106 	br	6d8 <main+0x338>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
     6d4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
     6d8:	d0a6cb8b 	ldhu	r2,-25810(gp)
     6dc:	e0fffb0b 	ldhu	r3,-20(fp)
     6e0:	1884703a 	and	r2,r3,r2
     6e4:	10bfffcc 	andi	r2,r2,65535
     6e8:	1000261e 	bne	r2,zero,784 <main+0x3e4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
     6ec:	01000074 	movhi	r4,1
     6f0:	21068d04 	addi	r4,r4,6708
     6f4:	00023a40 	call	23a4 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
     6f8:	01000074 	movhi	r4,1
     6fc:	21069704 	addi	r4,r4,6748
     700:	00023a40 	call	23a4 <puts>
			while (!(usb_ctl_val & no_device))
     704:	00000d06 	br	73c <main+0x39c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
     708:	d0a6cb0b 	ldhu	r2,-25812(gp)
     70c:	10bfffcc 	andi	r2,r2,65535
     710:	1009883a 	mov	r4,r2
     714:	000115c0 	call	115c <UsbRead>
     718:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
     71c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     720:	e0fffb0b 	ldhu	r3,-20(fp)
     724:	1884703a 	and	r2,r3,r2
     728:	10bfffcc 	andi	r2,r2,65535
     72c:	10000126 	beq	r2,zero,734 <main+0x394>
					goto USB_HOT_PLUG;
     730:	003f2606 	br	3cc <main+0x2c>

				usleep(2000);
     734:	0101f404 	movi	r4,2000
     738:	000fa100 	call	fa10 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
     73c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     740:	e0fffb0b 	ldhu	r3,-20(fp)
     744:	1884703a 	and	r2,r3,r2
     748:	10bfffcc 	andi	r2,r2,65535
     74c:	103fee26 	beq	r2,zero,708 <main+0x368>
     750:	00000c06 	br	784 <main+0x3e4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
     754:	e0fffb0b 	ldhu	r3,-20(fp)
     758:	e0bffc0b 	ldhu	r2,-16(fp)
     75c:	1884703a 	and	r2,r3,r2
     760:	10bfffcc 	andi	r2,r2,65535
     764:	10000426 	beq	r2,zero,778 <main+0x3d8>
		{
			printf("[INFO]: full speed device\n");
     768:	01000074 	movhi	r4,1
     76c:	2106a304 	addi	r4,r4,6796
     770:	00023a40 	call	23a4 <puts>
     774:	00000306 	br	784 <main+0x3e4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
     778:	01000074 	movhi	r4,1
     77c:	2106aa04 	addi	r4,r4,6824
     780:	00023a40 	call	23a4 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
     784:	00012540 	call	1254 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     788:	00000306 	br	798 <main+0x3f8>
	{
		UsbSetAddress();
     78c:	00012540 	call	1254 <UsbSetAddress>
		usleep(10*1000);
     790:	0109c404 	movi	r4,10000
     794:	000fa100 	call	fa10 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     798:	010000c4 	movi	r4,3
     79c:	000033c0 	call	33c <IO_read>
     7a0:	10bfffcc 	andi	r2,r2,65535
     7a4:	1080040c 	andi	r2,r2,16
     7a8:	103ff826 	beq	r2,zero,78c <main+0x3ec>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     7ac:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
     7b0:	01414184 	movi	r5,1286
     7b4:	01000084 	movi	r4,2
     7b8:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
     7bc:	0009883a 	mov	r4,zero
     7c0:	000033c0 	call	33c <IO_read>
     7c4:	10bfffcc 	andi	r2,r2,65535
     7c8:	100b883a 	mov	r5,r2
     7cc:	01000074 	movhi	r4,1
     7d0:	2106b104 	addi	r4,r4,6852
     7d4:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508); // n
     7d8:	01414204 	movi	r5,1288
     7dc:	01000084 	movi	r4,2
     7e0:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     7e4:	0009883a 	mov	r4,zero
     7e8:	000033c0 	call	33c <IO_read>
     7ec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     7f0:	e0bffb0b 	ldhu	r2,-20(fp)
     7f4:	100b883a 	mov	r5,r2
     7f8:	01000074 	movhi	r4,1
     7fc:	2106bc04 	addi	r4,r4,6896
     800:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
     804:	e0bffb0b 	ldhu	r2,-20(fp)
     808:	108000e0 	cmpeqi	r2,r2,3
     80c:	1000031e 	bne	r2,zero,81c <main+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     810:	00021780 	call	2178 <UsbGetRetryCnt>
     814:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
     818:	003eec06 	br	3cc <main+0x2c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
     81c:	01000074 	movhi	r4,1
     820:	2106c804 	addi	r4,r4,6944
     824:	00023a40 	call	23a4 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
     828:	00013540 	call	1354 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     82c:	00000306 	br	83c <main+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
     830:	00013540 	call	1354 <UsbGetDeviceDesc1>
		usleep(10*1000);
     834:	0109c404 	movi	r4,10000
     838:	000fa100 	call	fa10 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     83c:	010000c4 	movi	r4,3
     840:	000033c0 	call	33c <IO_read>
     844:	10bfffcc 	andi	r2,r2,65535
     848:	1080040c 	andi	r2,r2,16
     84c:	103ff826 	beq	r2,zero,830 <main+0x490>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     850:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     854:	01414184 	movi	r5,1286
     858:	01000084 	movi	r4,2
     85c:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     860:	0009883a 	mov	r4,zero
     864:	000033c0 	call	33c <IO_read>
     868:	10bfffcc 	andi	r2,r2,65535
     86c:	100b883a 	mov	r5,r2
     870:	01000074 	movhi	r4,1
     874:	2106d704 	addi	r4,r4,7004
     878:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     87c:	01414204 	movi	r5,1288
     880:	01000084 	movi	r4,2
     884:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     888:	0009883a 	mov	r4,zero
     88c:	000033c0 	call	33c <IO_read>
     890:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     894:	e0bffb0b 	ldhu	r2,-20(fp)
     898:	100b883a 	mov	r5,r2
     89c:	01000074 	movhi	r4,1
     8a0:	2106e204 	addi	r4,r4,7048
     8a4:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     8a8:	00000206 	br	8b4 <main+0x514>
	{
		usb_ctl_val = UsbGetRetryCnt();
     8ac:	00021780 	call	2178 <UsbGetRetryCnt>
     8b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     8b4:	e0bffb0b 	ldhu	r2,-20(fp)
     8b8:	108000d8 	cmpnei	r2,r2,3
     8bc:	103ffb1e 	bne	r2,zero,8ac <main+0x50c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
     8c0:	01000074 	movhi	r4,1
     8c4:	2106ee04 	addi	r4,r4,7096
     8c8:	00023a40 	call	23a4 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
     8cc:	000149c0 	call	149c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8d0:	00000306 	br	8e0 <main+0x540>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
     8d4:	000149c0 	call	149c <UsbGetDeviceDesc2>
		usleep(10*1000);
     8d8:	0109c404 	movi	r4,10000
     8dc:	000fa100 	call	fa10 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8e0:	010000c4 	movi	r4,3
     8e4:	000033c0 	call	33c <IO_read>
     8e8:	10bfffcc 	andi	r2,r2,65535
     8ec:	1080040c 	andi	r2,r2,16
     8f0:	103ff826 	beq	r2,zero,8d4 <main+0x534>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     8f4:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     8f8:	01414184 	movi	r5,1286
     8fc:	01000084 	movi	r4,2
     900:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
     904:	0009883a 	mov	r4,zero
     908:	000033c0 	call	33c <IO_read>
     90c:	10bfffcc 	andi	r2,r2,65535
     910:	100b883a 	mov	r5,r2
     914:	01000074 	movhi	r4,1
     918:	2106d704 	addi	r4,r4,7004
     91c:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     920:	01414204 	movi	r5,1288
     924:	01000084 	movi	r4,2
     928:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     92c:	0009883a 	mov	r4,zero
     930:	000033c0 	call	33c <IO_read>
     934:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     938:	e0bffb0b 	ldhu	r2,-20(fp)
     93c:	100b883a 	mov	r5,r2
     940:	01000074 	movhi	r4,1
     944:	2106e204 	addi	r4,r4,7048
     948:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     94c:	00000206 	br	958 <main+0x5b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     950:	00021780 	call	2178 <UsbGetRetryCnt>
     954:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     958:	e0bffb0b 	ldhu	r2,-20(fp)
     95c:	108000d8 	cmpnei	r2,r2,3
     960:	103ffb1e 	bne	r2,zero,950 <main+0x5b0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
     964:	01000074 	movhi	r4,1
     968:	21070204 	addi	r4,r4,7176
     96c:	00023a40 	call	23a4 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
     970:	00016740 	call	1674 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     974:	00000306 	br	984 <main+0x5e4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
     978:	00016740 	call	1674 <UsbGetConfigDesc1>
		usleep(10*1000);
     97c:	0109c404 	movi	r4,10000
     980:	000fa100 	call	fa10 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     984:	010000c4 	movi	r4,3
     988:	000033c0 	call	33c <IO_read>
     98c:	10bfffcc 	andi	r2,r2,65535
     990:	1080040c 	andi	r2,r2,16
     994:	103ff826 	beq	r2,zero,978 <main+0x5d8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     998:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     99c:	01414184 	movi	r5,1286
     9a0:	01000084 	movi	r4,2
     9a4:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
     9a8:	0009883a 	mov	r4,zero
     9ac:	000033c0 	call	33c <IO_read>
     9b0:	10bfffcc 	andi	r2,r2,65535
     9b4:	100b883a 	mov	r5,r2
     9b8:	01000074 	movhi	r4,1
     9bc:	21071404 	addi	r4,r4,7248
     9c0:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     9c4:	01414204 	movi	r5,1288
     9c8:	01000084 	movi	r4,2
     9cc:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     9d0:	0009883a 	mov	r4,zero
     9d4:	000033c0 	call	33c <IO_read>
     9d8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
     9dc:	e0bffb0b 	ldhu	r2,-20(fp)
     9e0:	100b883a 	mov	r5,r2
     9e4:	01000074 	movhi	r4,1
     9e8:	21071f04 	addi	r4,r4,7292
     9ec:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     9f0:	00000206 	br	9fc <main+0x65c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     9f4:	00021780 	call	2178 <UsbGetRetryCnt>
     9f8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     9fc:	e0bffb0b 	ldhu	r2,-20(fp)
     a00:	108000d8 	cmpnei	r2,r2,3
     a04:	103ffb1e 	bne	r2,zero,9f4 <main+0x654>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
     a08:	01000074 	movhi	r4,1
     a0c:	21072b04 	addi	r4,r4,7340
     a10:	00023a40 	call	23a4 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
     a14:	00018040 	call	1804 <UsbGetConfigDesc2>

	usleep(100*1000);
     a18:	010000b4 	movhi	r4,2
     a1c:	2121a804 	addi	r4,r4,-31072
     a20:	000fa100 	call	fa10 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a24:	00000306 	br	a34 <main+0x694>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
     a28:	00018040 	call	1804 <UsbGetConfigDesc2>
		usleep(10*1000);
     a2c:	0109c404 	movi	r4,10000
     a30:	000fa100 	call	fa10 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a34:	010000c4 	movi	r4,3
     a38:	000033c0 	call	33c <IO_read>
     a3c:	10bfffcc 	andi	r2,r2,65535
     a40:	1080040c 	andi	r2,r2,16
     a44:	103ff826 	beq	r2,zero,a28 <main+0x688>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     a48:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     a4c:	01414184 	movi	r5,1286
     a50:	01000084 	movi	r4,2
     a54:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
     a58:	0009883a 	mov	r4,zero
     a5c:	000033c0 	call	33c <IO_read>
     a60:	10bfffcc 	andi	r2,r2,65535
     a64:	100b883a 	mov	r5,r2
     a68:	01000074 	movhi	r4,1
     a6c:	21073e04 	addi	r4,r4,7416
     a70:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     a74:	01414204 	movi	r5,1288
     a78:	01000084 	movi	r4,2
     a7c:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     a80:	0009883a 	mov	r4,zero
     a84:	000033c0 	call	33c <IO_read>
     a88:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
     a8c:	e0bffb0b 	ldhu	r2,-20(fp)
     a90:	100b883a 	mov	r5,r2
     a94:	01000074 	movhi	r4,1
     a98:	21074904 	addi	r4,r4,7460
     a9c:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     aa0:	00000206 	br	aac <main+0x70c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     aa4:	00021780 	call	2178 <UsbGetRetryCnt>
     aa8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     aac:	e0bffb0b 	ldhu	r2,-20(fp)
     ab0:	108000d8 	cmpnei	r2,r2,3
     ab4:	103ffb1e 	bne	r2,zero,aa4 <main+0x704>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
     ab8:	01000074 	movhi	r4,1
     abc:	21075504 	addi	r4,r4,7508
     ac0:	00023a40 	call	23a4 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
     ac4:	01415b04 	movi	r5,1388
     ac8:	01000084 	movi	r4,2
     acc:	00002d00 	call	2d0 <IO_write>
	code = IO_read(HPI_DATA);
     ad0:	0009883a 	mov	r4,zero
     ad4:	000033c0 	call	33c <IO_read>
     ad8:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
     adc:	e0bffe8b 	ldhu	r2,-6(fp)
     ae0:	108000cc 	andi	r2,r2,3
     ae4:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
     ae8:	e0bffe8b 	ldhu	r2,-6(fp)
     aec:	100b883a 	mov	r5,r2
     af0:	01000074 	movhi	r4,1
     af4:	21076804 	addi	r4,r4,7584
     af8:	00022a80 	call	22a8 <printf>

	if (code == 0x01)
     afc:	e0bffe8b 	ldhu	r2,-6(fp)
     b00:	10800058 	cmpnei	r2,r2,1
     b04:	1000041e 	bne	r2,zero,b18 <main+0x778>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
     b08:	01000074 	movhi	r4,1
     b0c:	21076b04 	addi	r4,r4,7596
     b10:	00023a40 	call	23a4 <puts>
     b14:	00000306 	br	b24 <main+0x784>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
     b18:	01000074 	movhi	r4,1
     b1c:	21077a04 	addi	r4,r4,7656
     b20:	00023a40 	call	23a4 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
     b24:	01415d84 	movi	r5,1398
     b28:	01000084 	movi	r4,2
     b2c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x073F);
     b30:	0141cfc4 	movi	r5,1855
     b34:	0009883a 	mov	r4,zero
     b38:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x8105);
     b3c:	01604154 	movui	r5,33029
     b40:	0009883a 	mov	r4,zero
     b44:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0003);
     b48:	014000c4 	movi	r5,3
     b4c:	0009883a 	mov	r4,zero
     b50:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);
     b54:	01400204 	movi	r5,8
     b58:	0009883a 	mov	r4,zero
     b5c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
     b60:	016b0294 	movui	r5,44042
     b64:	0009883a 	mov	r4,zero
     b68:	00002d00 	call	2d0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
     b6c:	01415d84 	movi	r5,1398
     b70:	01006c04 	movi	r4,432
     b74:	00011040 	call	1104 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
     b78:	01415f04 	movi	r5,1404
     b7c:	01000084 	movi	r4,2
     b80:	00002d00 	call	2d0 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
     b84:	0009883a 	mov	r4,zero
     b88:	000033c0 	call	33c <IO_read>
     b8c:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
     b90:	e0bfff03 	ldbu	r2,-4(fp)
     b94:	100b883a 	mov	r5,r2
     b98:	01000074 	movhi	r4,1
     b9c:	21078304 	addi	r4,r4,7692
     ba0:	00022a80 	call	22a8 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
     ba4:	0001a6c0 	call	1a6c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ba8:	00000306 	br	bb8 <main+0x818>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
     bac:	0001a6c0 	call	1a6c <UsbSetConfig>
		usleep(10*1000);
     bb0:	0109c404 	movi	r4,10000
     bb4:	000fa100 	call	fa10 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     bb8:	010000c4 	movi	r4,3
     bbc:	000033c0 	call	33c <IO_read>
     bc0:	10bfffcc 	andi	r2,r2,65535
     bc4:	1080040c 	andi	r2,r2,16
     bc8:	103ff826 	beq	r2,zero,bac <main+0x80c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     bcc:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     bd0:	01414184 	movi	r5,1286
     bd4:	01000084 	movi	r4,2
     bd8:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
     bdc:	0009883a 	mov	r4,zero
     be0:	000033c0 	call	33c <IO_read>
     be4:	10bfffcc 	andi	r2,r2,65535
     be8:	100b883a 	mov	r5,r2
     bec:	01000074 	movhi	r4,1
     bf0:	21078d04 	addi	r4,r4,7732
     bf4:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     bf8:	01414204 	movi	r5,1288
     bfc:	01000084 	movi	r4,2
     c00:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     c04:	0009883a 	mov	r4,zero
     c08:	000033c0 	call	33c <IO_read>
     c0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
     c10:	e0bffb0b 	ldhu	r2,-20(fp)
     c14:	100b883a 	mov	r5,r2
     c18:	01000074 	movhi	r4,1
     c1c:	21079804 	addi	r4,r4,7776
     c20:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     c24:	00000206 	br	c30 <main+0x890>
	{
		usb_ctl_val = UsbGetRetryCnt();
     c28:	00021780 	call	2178 <UsbGetRetryCnt>
     c2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     c30:	e0bffb0b 	ldhu	r2,-20(fp)
     c34:	108000d8 	cmpnei	r2,r2,3
     c38:	103ffb1e 	bne	r2,zero,c28 <main+0x888>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
     c3c:	01000074 	movhi	r4,1
     c40:	2107a404 	addi	r4,r4,7824
     c44:	00023a40 	call	23a4 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
     c48:	0001b6c0 	call	1b6c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c4c:	00000306 	br	c5c <main+0x8bc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
     c50:	0001b6c0 	call	1b6c <UsbClassRequest>
		usleep(10*1000);
     c54:	0109c404 	movi	r4,10000
     c58:	000fa100 	call	fa10 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c5c:	010000c4 	movi	r4,3
     c60:	000033c0 	call	33c <IO_read>
     c64:	10bfffcc 	andi	r2,r2,65535
     c68:	1080040c 	andi	r2,r2,16
     c6c:	103ff826 	beq	r2,zero,c50 <main+0x8b0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     c70:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     c74:	01414184 	movi	r5,1286
     c78:	01000084 	movi	r4,2
     c7c:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     c80:	0009883a 	mov	r4,zero
     c84:	000033c0 	call	33c <IO_read>
     c88:	10bfffcc 	andi	r2,r2,65535
     c8c:	100b883a 	mov	r5,r2
     c90:	01000074 	movhi	r4,1
     c94:	2107b604 	addi	r4,r4,7896
     c98:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     c9c:	01414204 	movi	r5,1288
     ca0:	01000084 	movi	r4,2
     ca4:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     ca8:	0009883a 	mov	r4,zero
     cac:	000033c0 	call	33c <IO_read>
     cb0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     cb4:	e0bffb0b 	ldhu	r2,-20(fp)
     cb8:	100b883a 	mov	r5,r2
     cbc:	01000074 	movhi	r4,1
     cc0:	2107c104 	addi	r4,r4,7940
     cc4:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     cc8:	00000206 	br	cd4 <main+0x934>
	{
		usb_ctl_val = UsbGetRetryCnt();
     ccc:	00021780 	call	2178 <UsbGetRetryCnt>
     cd0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     cd4:	e0bffb0b 	ldhu	r2,-20(fp)
     cd8:	108000d8 	cmpnei	r2,r2,3
     cdc:	103ffb1e 	bne	r2,zero,ccc <main+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
     ce0:	01000074 	movhi	r4,1
     ce4:	2107cd04 	addi	r4,r4,7988
     ce8:	00023a40 	call	23a4 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
     cec:	0001c6c0 	call	1c6c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     cf0:	00000306 	br	d00 <main+0x960>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
     cf4:	0001c6c0 	call	1c6c <UsbGetHidDesc>
		usleep(10*1000);
     cf8:	0109c404 	movi	r4,10000
     cfc:	000fa100 	call	fa10 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d00:	010000c4 	movi	r4,3
     d04:	000033c0 	call	33c <IO_read>
     d08:	10bfffcc 	andi	r2,r2,65535
     d0c:	1080040c 	andi	r2,r2,16
     d10:	103ff826 	beq	r2,zero,cf4 <main+0x954>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     d14:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     d18:	01414184 	movi	r5,1286
     d1c:	01000084 	movi	r4,2
     d20:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
     d24:	0009883a 	mov	r4,zero
     d28:	000033c0 	call	33c <IO_read>
     d2c:	10bfffcc 	andi	r2,r2,65535
     d30:	100b883a 	mov	r5,r2
     d34:	01000074 	movhi	r4,1
     d38:	2107b604 	addi	r4,r4,7896
     d3c:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     d40:	01414204 	movi	r5,1288
     d44:	01000084 	movi	r4,2
     d48:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     d4c:	0009883a 	mov	r4,zero
     d50:	000033c0 	call	33c <IO_read>
     d54:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
     d58:	e0bffb0b 	ldhu	r2,-20(fp)
     d5c:	100b883a 	mov	r5,r2
     d60:	01000074 	movhi	r4,1
     d64:	2107c104 	addi	r4,r4,7940
     d68:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     d6c:	00000206 	br	d78 <main+0x9d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
     d70:	00021780 	call	2178 <UsbGetRetryCnt>
     d74:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     d78:	e0bffb0b 	ldhu	r2,-20(fp)
     d7c:	108000d8 	cmpnei	r2,r2,3
     d80:	103ffb1e 	bne	r2,zero,d70 <main+0x9d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
     d84:	01000074 	movhi	r4,1
     d88:	2107df04 	addi	r4,r4,8060
     d8c:	00023a40 	call	23a4 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
     d90:	0001db40 	call	1db4 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d94:	00000306 	br	da4 <main+0xa04>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
     d98:	0001db40 	call	1db4 <UsbGetReportDesc>
		usleep(10*1000);
     d9c:	0109c404 	movi	r4,10000
     da0:	000fa100 	call	fa10 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     da4:	010000c4 	movi	r4,3
     da8:	000033c0 	call	33c <IO_read>
     dac:	10bfffcc 	andi	r2,r2,65535
     db0:	1080040c 	andi	r2,r2,16
     db4:	103ff826 	beq	r2,zero,d98 <main+0x9f8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
     db8:	00020f40 	call	20f4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
     dbc:	01414184 	movi	r5,1286
     dc0:	01000084 	movi	r4,2
     dc4:	00002d00 	call	2d0 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
     dc8:	0009883a 	mov	r4,zero
     dcc:	000033c0 	call	33c <IO_read>
     dd0:	10bfffcc 	andi	r2,r2,65535
     dd4:	100b883a 	mov	r5,r2
     dd8:	01000074 	movhi	r4,1
     ddc:	2107f304 	addi	r4,r4,8140
     de0:	00022a80 	call	22a8 <printf>

	IO_write(HPI_ADDR,0x0508);
     de4:	01414204 	movi	r5,1288
     de8:	01000084 	movi	r4,2
     dec:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
     df0:	0009883a 	mov	r4,zero
     df4:	000033c0 	call	33c <IO_read>
     df8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
     dfc:	e0bffb0b 	ldhu	r2,-20(fp)
     e00:	100b883a 	mov	r5,r2
     e04:	01000074 	movhi	r4,1
     e08:	2107ff04 	addi	r4,r4,8188
     e0c:	00022a80 	call	22a8 <printf>
	while (usb_ctl_val != 0x03)
     e10:	00000206 	br	e1c <main+0xa7c>
	{
		usb_ctl_val = UsbGetRetryCnt();
     e14:	00021780 	call	2178 <UsbGetRetryCnt>
     e18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
     e1c:	e0bffb0b 	ldhu	r2,-20(fp)
     e20:	108000d8 	cmpnei	r2,r2,3
     e24:	103ffb1e 	bne	r2,zero,e14 <main+0xa74>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
     e28:	01000074 	movhi	r4,1
     e2c:	21080b04 	addi	r4,r4,8236
     e30:	00023a40 	call	23a4 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
     e34:	0109c404 	movi	r4,10000
     e38:	000fa100 	call	fa10 <usleep>
	while(1)
	{
		toggle++;
     e3c:	e0bffb83 	ldbu	r2,-18(fp)
     e40:	10800044 	addi	r2,r2,1
     e44:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
     e48:	01414004 	movi	r5,1280
     e4c:	01000084 	movi	r4,2
     e50:	00002d00 	call	2d0 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
     e54:	01414704 	movi	r5,1308
     e58:	0009883a 	mov	r4,zero
     e5c:	00002d00 	call	2d0 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
     e60:	e0bfff03 	ldbu	r2,-4(fp)
     e64:	108003cc 	andi	r2,r2,15
     e68:	100b883a 	mov	r5,r2
     e6c:	0009883a 	mov	r4,zero
     e70:	00002d00 	call	2d0 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     e74:	0140a444 	movi	r5,657
     e78:	0009883a 	mov	r4,zero
     e7c:	00002d00 	call	2d0 <IO_write>
		if(toggle%2)
     e80:	e0bffb83 	ldbu	r2,-18(fp)
     e84:	1080004c 	andi	r2,r2,1
     e88:	10803fcc 	andi	r2,r2,255
     e8c:	10000426 	beq	r2,zero,ea0 <main+0xb00>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
     e90:	01400044 	movi	r5,1
     e94:	0009883a 	mov	r4,zero
     e98:	00002d00 	call	2d0 <IO_write>
     e9c:	00000306 	br	eac <main+0xb0c>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
     ea0:	01401044 	movi	r5,65
     ea4:	0009883a 	mov	r4,zero
     ea8:	00002d00 	call	2d0 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
     eac:	014004c4 	movi	r5,19
     eb0:	0009883a 	mov	r4,zero
     eb4:	00002d00 	call	2d0 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
     eb8:	000b883a 	mov	r5,zero
     ebc:	0009883a 	mov	r4,zero
     ec0:	00002d00 	call	2d0 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     ec4:	01414004 	movi	r5,1280
     ec8:	01006c04 	movi	r4,432
     ecc:	00011040 	call	1104 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ed0:	00002406 	br	f64 <main+0xbc4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
     ed4:	01414004 	movi	r5,1280
     ed8:	01000084 	movi	r4,2
     edc:	00002d00 	call	2d0 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
     ee0:	01414704 	movi	r5,1308
     ee4:	0009883a 	mov	r4,zero
     ee8:	00002d00 	call	2d0 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
     eec:	e0bfff03 	ldbu	r2,-4(fp)
     ef0:	108003cc 	andi	r2,r2,15
     ef4:	100b883a 	mov	r5,r2
     ef8:	0009883a 	mov	r4,zero
     efc:	00002d00 	call	2d0 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
     f00:	0140a444 	movi	r5,657
     f04:	0009883a 	mov	r4,zero
     f08:	00002d00 	call	2d0 <IO_write>
			if(toggle%2)
     f0c:	e0bffb83 	ldbu	r2,-18(fp)
     f10:	1080004c 	andi	r2,r2,1
     f14:	10803fcc 	andi	r2,r2,255
     f18:	10000426 	beq	r2,zero,f2c <main+0xb8c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
     f1c:	01400044 	movi	r5,1
     f20:	0009883a 	mov	r4,zero
     f24:	00002d00 	call	2d0 <IO_write>
     f28:	00000306 	br	f38 <main+0xb98>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
     f2c:	01401044 	movi	r5,65
     f30:	0009883a 	mov	r4,zero
     f34:	00002d00 	call	2d0 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
     f38:	014004c4 	movi	r5,19
     f3c:	0009883a 	mov	r4,zero
     f40:	00002d00 	call	2d0 <IO_write>
			IO_write(HPI_DATA,0x0000);//
     f44:	000b883a 	mov	r5,zero
     f48:	0009883a 	mov	r4,zero
     f4c:	00002d00 	call	2d0 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     f50:	01414004 	movi	r5,1280
     f54:	01006c04 	movi	r4,432
     f58:	00011040 	call	1104 <UsbWrite>
			usleep(10*1000);
     f5c:	0109c404 	movi	r4,10000
     f60:	000fa100 	call	fa10 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     f64:	010000c4 	movi	r4,3
     f68:	000033c0 	call	33c <IO_read>
     f6c:	10bfffcc 	andi	r2,r2,65535
     f70:	1080040c 	andi	r2,r2,16
     f74:	103fd726 	beq	r2,zero,ed4 <main+0xb34>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
     f78:	00020f40 	call	20f4 <UsbWaitTDListDone>
     f7c:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
     f80:	01414784 	movi	r5,1310
     f84:	01000084 	movi	r4,2
     f88:	00002d00 	call	2d0 <IO_write>
		keycode = IO_read(HPI_DATA);
     f8c:	0009883a 	mov	r4,zero
     f90:	000033c0 	call	33c <IO_read>
     f94:	10bfffcc 	andi	r2,r2,65535
     f98:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
     f9c:	e17ffd17 	ldw	r5,-12(fp)
     fa0:	01000074 	movhi	r4,1
     fa4:	21081f04 	addi	r4,r4,8316
     fa8:	00022a80 	call	22a8 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
     fac:	e0bffd17 	ldw	r2,-12(fp)
     fb0:	10c03fcc 	andi	r3,r2,255
     fb4:	00820034 	movhi	r2,2048
     fb8:	10843804 	addi	r2,r2,4320
     fbc:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
     fc0:	01003204 	movi	r4,200
     fc4:	000fa100 	call	fa10 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
     fc8:	d0a6cb0b 	ldhu	r2,-25812(gp)
     fcc:	10bfffcc 	andi	r2,r2,65535
     fd0:	1009883a 	mov	r4,r2
     fd4:	000115c0 	call	115c <UsbRead>
     fd8:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
     fdc:	d0a6cb8b 	ldhu	r2,-25810(gp)
     fe0:	e0fffb0b 	ldhu	r3,-20(fp)
     fe4:	1884703a 	and	r2,r3,r2
     fe8:	10bfffcc 	andi	r2,r2,65535
     fec:	10003f1e 	bne	r2,zero,10ec <main+0xd4c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
     ff0:	e03ffbc5 	stb	zero,-17(fp)
     ff4:	00000f06 	br	1034 <main+0xc94>
			{
				usleep(5*1000);
     ff8:	0104e204 	movi	r4,5000
     ffc:	000fa100 	call	fa10 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
    1000:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1004:	10bfffcc 	andi	r2,r2,65535
    1008:	1009883a 	mov	r4,r2
    100c:	000115c0 	call	115c <UsbRead>
    1010:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
    1014:	d0a6cb8b 	ldhu	r2,-25810(gp)
    1018:	e0fffb0b 	ldhu	r3,-20(fp)
    101c:	1884703a 	and	r2,r3,r2
    1020:	10bfffcc 	andi	r2,r2,65535
    1024:	1000071e 	bne	r2,zero,1044 <main+0xca4>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
    1028:	e0bffbc3 	ldbu	r2,-17(fp)
    102c:	10800044 	addi	r2,r2,1
    1030:	e0bffbc5 	stb	r2,-17(fp)
    1034:	e0bffbc3 	ldbu	r2,-17(fp)
    1038:	108001f0 	cmpltui	r2,r2,7
    103c:	103fee1e 	bne	r2,zero,ff8 <main+0xc58>
    1040:	00000106 	br	1048 <main+0xca8>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
    1044:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
    1048:	d0a6cb8b 	ldhu	r2,-25810(gp)
    104c:	e0fffb0b 	ldhu	r3,-20(fp)
    1050:	1884703a 	and	r2,r3,r2
    1054:	10bfffcc 	andi	r2,r2,65535
    1058:	1000241e 	bne	r2,zero,10ec <main+0xd4c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
    105c:	01000074 	movhi	r4,1
    1060:	21082804 	addi	r4,r4,8352
    1064:	00023a40 	call	23a4 <puts>
				printf("[INFO]: please insert again!!! \n");
    1068:	01000074 	movhi	r4,1
    106c:	21083304 	addi	r4,r4,8396
    1070:	00023a40 	call	23a4 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
    1074:	00001d06 	br	10ec <main+0xd4c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
    1078:	d0a6cb0b 	ldhu	r2,-25812(gp)
    107c:	10bfffcc 	andi	r2,r2,65535
    1080:	1009883a 	mov	r4,r2
    1084:	000115c0 	call	115c <UsbRead>
    1088:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    108c:	0104e204 	movi	r4,5000
    1090:	000fa100 	call	fa10 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    1094:	d0a6cb0b 	ldhu	r2,-25812(gp)
    1098:	10bfffcc 	andi	r2,r2,65535
    109c:	1009883a 	mov	r4,r2
    10a0:	000115c0 	call	115c <UsbRead>
    10a4:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    10a8:	0104e204 	movi	r4,5000
    10ac:	000fa100 	call	fa10 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
    10b0:	d0a6cb0b 	ldhu	r2,-25812(gp)
    10b4:	10bfffcc 	andi	r2,r2,65535
    10b8:	1009883a 	mov	r4,r2
    10bc:	000115c0 	call	115c <UsbRead>
    10c0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
    10c4:	0104e204 	movi	r4,5000
    10c8:	000fa100 	call	fa10 <usleep>

			if(usb_ctl_val & no_device)
    10cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
    10d0:	e0fffb0b 	ldhu	r3,-20(fp)
    10d4:	1884703a 	and	r2,r3,r2
    10d8:	10bfffcc 	andi	r2,r2,65535
    10dc:	10000126 	beq	r2,zero,10e4 <main+0xd44>
				goto USB_HOT_PLUG;
    10e0:	003cba06 	br	3cc <main+0x2c>

			usleep(200);
    10e4:	01003204 	movi	r4,200
    10e8:	000fa100 	call	fa10 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
    10ec:	d0a6cb8b 	ldhu	r2,-25810(gp)
    10f0:	e0fffb0b 	ldhu	r3,-20(fp)
    10f4:	1884703a 	and	r2,r3,r2
    10f8:	10bfffcc 	andi	r2,r2,65535
    10fc:	103fde26 	beq	r2,zero,1078 <main+0xcd8>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
    1100:	003f4e06 	br	e3c <main+0xa9c>

00001104 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    1104:	defffc04 	addi	sp,sp,-16
    1108:	dfc00315 	stw	ra,12(sp)
    110c:	df000215 	stw	fp,8(sp)
    1110:	df000204 	addi	fp,sp,8
    1114:	2007883a 	mov	r3,r4
    1118:	2805883a 	mov	r2,r5
    111c:	e0fffe0d 	sth	r3,-8(fp)
    1120:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
//	IO_write(0b10, Address);
//	IO_write(0b11, Data);
	IO_write(HPI_ADDR, Address);
    1124:	e0bffe0b 	ldhu	r2,-8(fp)
    1128:	100b883a 	mov	r5,r2
    112c:	01000084 	movi	r4,2
    1130:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA, Data);
    1134:	e0bfff0b 	ldhu	r2,-4(fp)
    1138:	100b883a 	mov	r5,r2
    113c:	0009883a 	mov	r4,zero
    1140:	00002d00 	call	2d0 <IO_write>
}
    1144:	0001883a 	nop
    1148:	e037883a 	mov	sp,fp
    114c:	dfc00117 	ldw	ra,4(sp)
    1150:	df000017 	ldw	fp,0(sp)
    1154:	dec00204 	addi	sp,sp,8
    1158:	f800283a 	ret

0000115c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    115c:	defffd04 	addi	sp,sp,-12
    1160:	dfc00215 	stw	ra,8(sp)
    1164:	df000115 	stw	fp,4(sp)
    1168:	df000104 	addi	fp,sp,4
    116c:	2005883a 	mov	r2,r4
    1170:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
    1174:	e0bfff0b 	ldhu	r2,-4(fp)
    1178:	100b883a 	mov	r5,r2
    117c:	01000084 	movi	r4,2
    1180:	00002d00 	call	2d0 <IO_write>
	return IO_read(HPI_DATA);
    1184:	0009883a 	mov	r4,zero
    1188:	000033c0 	call	33c <IO_read>
}
    118c:	e037883a 	mov	sp,fp
    1190:	dfc00117 	ldw	ra,4(sp)
    1194:	df000017 	ldw	fp,0(sp)
    1198:	dec00204 	addi	sp,sp,8
    119c:	f800283a 	ret

000011a0 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
    11a0:	defffe04 	addi	sp,sp,-8
    11a4:	dfc00115 	stw	ra,4(sp)
    11a8:	df000015 	stw	fp,0(sp)
    11ac:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    11b0:	017e9414 	movui	r5,64080
    11b4:	01000044 	movi	r4,1
    11b8:	00002d00 	call	2d0 <IO_write>
	usleep(100000);
    11bc:	010000b4 	movhi	r4,2
    11c0:	2121a804 	addi	r4,r4,-31072
    11c4:	000fa100 	call	fa10 <usleep>
	printf("[USB INIT]:reset finished!\n");
    11c8:	01000074 	movhi	r4,1
    11cc:	21083b04 	addi	r4,r4,8428
    11d0:	00023a40 	call	23a4 <puts>

	usleep(500000);
    11d4:	01000234 	movhi	r4,8
    11d8:	21284804 	addi	r4,r4,-24288
    11dc:	000fa100 	call	fa10 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
    11e0:	01000074 	movhi	r4,1
    11e4:	21084204 	addi	r4,r4,8456
    11e8:	00023a40 	call	23a4 <puts>
	IO_read(HPI_MAILBOX);
    11ec:	01000044 	movi	r4,1
    11f0:	000033c0 	call	33c <IO_read>
	IO_read(HPI_STATUS);
    11f4:	010000c4 	movi	r4,3
    11f8:	000033c0 	call	33c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
    11fc:	01005104 	movi	r4,324
    1200:	000115c0 	call	115c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
    1204:	000b883a 	mov	r5,zero
    1208:	01005104 	movi	r4,324
    120c:	00011040 	call	1104 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
    1210:	01005204 	movi	r4,328
    1214:	000115c0 	call	115c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
    1218:	000b883a 	mov	r5,zero
    121c:	01005204 	movi	r4,328
    1220:	00011040 	call	1104 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
    1224:	017fffd4 	movui	r5,65535
    1228:	01302414 	movui	r4,49296
    122c:	00011040 	call	1104 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
    1230:	017fffd4 	movui	r5,65535
    1234:	01302c14 	movui	r4,49328
    1238:	00011040 	call	1104 <UsbWrite>

}
    123c:	0001883a 	nop
    1240:	e037883a 	mov	sp,fp
    1244:	dfc00117 	ldw	ra,4(sp)
    1248:	df000017 	ldw	fp,0(sp)
    124c:	dec00204 	addi	sp,sp,8
    1250:	f800283a 	ret

00001254 <UsbSetAddress>:


void UsbSetAddress()
{
    1254:	defffe04 	addi	sp,sp,-8
    1258:	dfc00115 	stw	ra,4(sp)
    125c:	df000015 	stw	fp,0(sp)
    1260:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1264:	01414004 	movi	r5,1280
    1268:	01000084 	movi	r4,2
    126c:	00002d00 	call	2d0 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
    1270:	01414304 	movi	r5,1292
    1274:	0009883a 	mov	r4,zero
    1278:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    127c:	01400204 	movi	r5,8
    1280:	0009883a 	mov	r4,zero
    1284:	00002d00 	call	2d0 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
    1288:	01403404 	movi	r5,208
    128c:	0009883a 	mov	r4,zero
    1290:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1294:	01400044 	movi	r5,1
    1298:	0009883a 	mov	r4,zero
    129c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    12a0:	014004c4 	movi	r5,19
    12a4:	0009883a 	mov	r4,zero
    12a8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    12ac:	01414504 	movi	r5,1300
    12b0:	0009883a 	mov	r4,zero
    12b4:	00002d00 	call	2d0 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
    12b8:	01414004 	movi	r5,1280
    12bc:	0009883a 	mov	r4,zero
    12c0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0002);
    12c4:	01400084 	movi	r5,2
    12c8:	0009883a 	mov	r4,zero
    12cc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    12d0:	000b883a 	mov	r5,zero
    12d4:	0009883a 	mov	r4,zero
    12d8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    12dc:	000b883a 	mov	r5,zero
    12e0:	0009883a 	mov	r4,zero
    12e4:	00002d00 	call	2d0 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
    12e8:	000b883a 	mov	r5,zero
    12ec:	0009883a 	mov	r4,zero
    12f0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//
    12f4:	000b883a 	mov	r5,zero
    12f8:	0009883a 	mov	r4,zero
    12fc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0090);//
    1300:	01402404 	movi	r5,144
    1304:	0009883a 	mov	r4,zero
    1308:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);
    130c:	01401044 	movi	r5,65
    1310:	0009883a 	mov	r4,zero
    1314:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1318:	014004c4 	movi	r5,19
    131c:	0009883a 	mov	r4,zero
    1320:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1324:	000b883a 	mov	r5,zero
    1328:	0009883a 	mov	r4,zero
    132c:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1330:	01414004 	movi	r5,1280
    1334:	01006c04 	movi	r4,432
    1338:	00011040 	call	1104 <UsbWrite>
}
    133c:	0001883a 	nop
    1340:	e037883a 	mov	sp,fp
    1344:	dfc00117 	ldw	ra,4(sp)
    1348:	df000017 	ldw	fp,0(sp)
    134c:	dec00204 	addi	sp,sp,8
    1350:	f800283a 	ret

00001354 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
    1354:	defffe04 	addi	sp,sp,-8
    1358:	dfc00115 	stw	ra,4(sp)
    135c:	df000015 	stw	fp,0(sp)
    1360:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1364:	01414004 	movi	r5,1280
    1368:	01000084 	movi	r4,2
    136c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1370:	01414304 	movi	r5,1292
    1374:	0009883a 	mov	r4,zero
    1378:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    137c:	01400204 	movi	r5,8
    1380:	0009883a 	mov	r4,zero
    1384:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1388:	0140b404 	movi	r5,720
    138c:	0009883a 	mov	r4,zero
    1390:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1394:	01400044 	movi	r5,1
    1398:	0009883a 	mov	r4,zero
    139c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    13a0:	014004c4 	movi	r5,19
    13a4:	0009883a 	mov	r4,zero
    13a8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    13ac:	01414504 	movi	r5,1300
    13b0:	0009883a 	mov	r4,zero
    13b4:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    13b8:	0141a004 	movi	r5,1664
    13bc:	0009883a 	mov	r4,zero
    13c0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
    13c4:	01404004 	movi	r5,256
    13c8:	0009883a 	mov	r4,zero
    13cc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    13d0:	000b883a 	mov	r5,zero
    13d4:	0009883a 	mov	r4,zero
    13d8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);
    13dc:	01400204 	movi	r5,8
    13e0:	0009883a 	mov	r4,zero
    13e4:	00002d00 	call	2d0 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
    13e8:	01414b04 	movi	r5,1324
    13ec:	0009883a 	mov	r4,zero
    13f0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//
    13f4:	01400204 	movi	r5,8
    13f8:	0009883a 	mov	r4,zero
    13fc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//
    1400:	0140a404 	movi	r5,656
    1404:	0009883a 	mov	r4,zero
    1408:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);
    140c:	01401044 	movi	r5,65
    1410:	0009883a 	mov	r4,zero
    1414:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1418:	014004c4 	movi	r5,19
    141c:	0009883a 	mov	r4,zero
    1420:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0520);
    1424:	01414804 	movi	r5,1312
    1428:	0009883a 	mov	r4,zero
    142c:	00002d00 	call	2d0 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
    1430:	000b883a 	mov	r5,zero
    1434:	0009883a 	mov	r4,zero
    1438:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    143c:	000b883a 	mov	r5,zero
    1440:	0009883a 	mov	r4,zero
    1444:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
    1448:	01408404 	movi	r5,528
    144c:	0009883a 	mov	r4,zero
    1450:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);
    1454:	01401044 	movi	r5,65
    1458:	0009883a 	mov	r4,zero
    145c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1460:	014004c4 	movi	r5,19
    1464:	0009883a 	mov	r4,zero
    1468:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    146c:	000b883a 	mov	r5,zero
    1470:	0009883a 	mov	r4,zero
    1474:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1478:	01414004 	movi	r5,1280
    147c:	01006c04 	movi	r4,432
    1480:	00011040 	call	1104 <UsbWrite>
}
    1484:	0001883a 	nop
    1488:	e037883a 	mov	sp,fp
    148c:	dfc00117 	ldw	ra,4(sp)
    1490:	df000017 	ldw	fp,0(sp)
    1494:	dec00204 	addi	sp,sp,8
    1498:	f800283a 	ret

0000149c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
    149c:	defffe04 	addi	sp,sp,-8
    14a0:	dfc00115 	stw	ra,4(sp)
    14a4:	df000015 	stw	fp,0(sp)
    14a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    14ac:	01414004 	movi	r5,1280
    14b0:	01000084 	movi	r4,2
    14b4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    14b8:	01414304 	movi	r5,1292
    14bc:	0009883a 	mov	r4,zero
    14c0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    14c4:	01400204 	movi	r5,8
    14c8:	0009883a 	mov	r4,zero
    14cc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    14d0:	0140b404 	movi	r5,720
    14d4:	0009883a 	mov	r4,zero
    14d8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    14dc:	01400044 	movi	r5,1
    14e0:	0009883a 	mov	r4,zero
    14e4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    14e8:	014004c4 	movi	r5,19
    14ec:	0009883a 	mov	r4,zero
    14f0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    14f4:	01414504 	movi	r5,1300
    14f8:	0009883a 	mov	r4,zero
    14fc:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1500:	0141a004 	movi	r5,1664
    1504:	0009883a 	mov	r4,zero
    1508:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
    150c:	01404004 	movi	r5,256
    1510:	0009883a 	mov	r4,zero
    1514:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1518:	000b883a 	mov	r5,zero
    151c:	0009883a 	mov	r4,zero
    1520:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
    1524:	01400484 	movi	r5,18
    1528:	0009883a 	mov	r4,zero
    152c:	00002d00 	call	2d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1530:	01415104 	movi	r5,1348
    1534:	0009883a 	mov	r4,zero
    1538:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    153c:	01400204 	movi	r5,8
    1540:	0009883a 	mov	r4,zero
    1544:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1548:	0140a404 	movi	r5,656
    154c:	0009883a 	mov	r4,zero
    1550:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1554:	01401044 	movi	r5,65
    1558:	0009883a 	mov	r4,zero
    155c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1560:	014004c4 	movi	r5,19
    1564:	0009883a 	mov	r4,zero
    1568:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    156c:	01414804 	movi	r5,1312
    1570:	0009883a 	mov	r4,zero
    1574:	00002d00 	call	2d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1578:	01415304 	movi	r5,1356
    157c:	0009883a 	mov	r4,zero
    1580:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1584:	01400204 	movi	r5,8
    1588:	0009883a 	mov	r4,zero
    158c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1590:	0140a404 	movi	r5,656
    1594:	0009883a 	mov	r4,zero
    1598:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
    159c:	01400044 	movi	r5,1
    15a0:	0009883a 	mov	r4,zero
    15a4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    15a8:	014004c4 	movi	r5,19
    15ac:	0009883a 	mov	r4,zero
    15b0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    15b4:	01414b04 	movi	r5,1324
    15b8:	0009883a 	mov	r4,zero
    15bc:	00002d00 	call	2d0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
    15c0:	01415504 	movi	r5,1364
    15c4:	0009883a 	mov	r4,zero
    15c8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
    15cc:	01400084 	movi	r5,2
    15d0:	0009883a 	mov	r4,zero
    15d4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    15d8:	0140a404 	movi	r5,656
    15dc:	0009883a 	mov	r4,zero
    15e0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    15e4:	01401044 	movi	r5,65
    15e8:	0009883a 	mov	r4,zero
    15ec:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    15f0:	014004c4 	movi	r5,19
    15f4:	0009883a 	mov	r4,zero
    15f8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    15fc:	01414e04 	movi	r5,1336
    1600:	0009883a 	mov	r4,zero
    1604:	00002d00 	call	2d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
    1608:	000b883a 	mov	r5,zero
    160c:	0009883a 	mov	r4,zero
    1610:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1614:	000b883a 	mov	r5,zero
    1618:	0009883a 	mov	r4,zero
    161c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
    1620:	01408404 	movi	r5,528
    1624:	0009883a 	mov	r4,zero
    1628:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
    162c:	01401044 	movi	r5,65
    1630:	0009883a 	mov	r4,zero
    1634:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1638:	014004c4 	movi	r5,19
    163c:	0009883a 	mov	r4,zero
    1640:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1644:	000b883a 	mov	r5,zero
    1648:	0009883a 	mov	r4,zero
    164c:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1650:	01414004 	movi	r5,1280
    1654:	01006c04 	movi	r4,432
    1658:	00011040 	call	1104 <UsbWrite>
}
    165c:	0001883a 	nop
    1660:	e037883a 	mov	sp,fp
    1664:	dfc00117 	ldw	ra,4(sp)
    1668:	df000017 	ldw	fp,0(sp)
    166c:	dec00204 	addi	sp,sp,8
    1670:	f800283a 	ret

00001674 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
    1674:	defffe04 	addi	sp,sp,-8
    1678:	dfc00115 	stw	ra,4(sp)
    167c:	df000015 	stw	fp,0(sp)
    1680:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1684:	01414004 	movi	r5,1280
    1688:	01000084 	movi	r4,2
    168c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1690:	01414304 	movi	r5,1292
    1694:	0009883a 	mov	r4,zero
    1698:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    169c:	01400204 	movi	r5,8
    16a0:	0009883a 	mov	r4,zero
    16a4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    16a8:	0140b404 	movi	r5,720
    16ac:	0009883a 	mov	r4,zero
    16b0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    16b4:	01400044 	movi	r5,1
    16b8:	0009883a 	mov	r4,zero
    16bc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    16c0:	014004c4 	movi	r5,19
    16c4:	0009883a 	mov	r4,zero
    16c8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    16cc:	01414504 	movi	r5,1300
    16d0:	0009883a 	mov	r4,zero
    16d4:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    16d8:	0141a004 	movi	r5,1664
    16dc:	0009883a 	mov	r4,zero
    16e0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    16e4:	01408004 	movi	r5,512
    16e8:	0009883a 	mov	r4,zero
    16ec:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    16f0:	000b883a 	mov	r5,zero
    16f4:	0009883a 	mov	r4,zero
    16f8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
    16fc:	01400244 	movi	r5,9
    1700:	0009883a 	mov	r4,zero
    1704:	00002d00 	call	2d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1708:	01415104 	movi	r5,1348
    170c:	0009883a 	mov	r4,zero
    1710:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1714:	01400204 	movi	r5,8
    1718:	0009883a 	mov	r4,zero
    171c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1720:	0140a404 	movi	r5,656
    1724:	0009883a 	mov	r4,zero
    1728:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    172c:	01401044 	movi	r5,65
    1730:	0009883a 	mov	r4,zero
    1734:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1738:	014004c4 	movi	r5,19
    173c:	0009883a 	mov	r4,zero
    1740:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1744:	01414804 	movi	r5,1312
    1748:	0009883a 	mov	r4,zero
    174c:	00002d00 	call	2d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
    1750:	01415304 	movi	r5,1356
    1754:	0009883a 	mov	r4,zero
    1758:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
    175c:	01400044 	movi	r5,1
    1760:	0009883a 	mov	r4,zero
    1764:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1768:	0140a404 	movi	r5,656
    176c:	0009883a 	mov	r4,zero
    1770:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1774:	01400044 	movi	r5,1
    1778:	0009883a 	mov	r4,zero
    177c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1780:	014004c4 	movi	r5,19
    1784:	0009883a 	mov	r4,zero
    1788:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    178c:	01414b04 	movi	r5,1324
    1790:	0009883a 	mov	r4,zero
    1794:	00002d00 	call	2d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1798:	000b883a 	mov	r5,zero
    179c:	0009883a 	mov	r4,zero
    17a0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    17a4:	000b883a 	mov	r5,zero
    17a8:	0009883a 	mov	r4,zero
    17ac:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    17b0:	01408404 	movi	r5,528
    17b4:	0009883a 	mov	r4,zero
    17b8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    17bc:	01401044 	movi	r5,65
    17c0:	0009883a 	mov	r4,zero
    17c4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    17c8:	014004c4 	movi	r5,19
    17cc:	0009883a 	mov	r4,zero
    17d0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    17d4:	000b883a 	mov	r5,zero
    17d8:	0009883a 	mov	r4,zero
    17dc:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    17e0:	01414004 	movi	r5,1280
    17e4:	01006c04 	movi	r4,432
    17e8:	00011040 	call	1104 <UsbWrite>
}
    17ec:	0001883a 	nop
    17f0:	e037883a 	mov	sp,fp
    17f4:	dfc00117 	ldw	ra,4(sp)
    17f8:	df000017 	ldw	fp,0(sp)
    17fc:	dec00204 	addi	sp,sp,8
    1800:	f800283a 	ret

00001804 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
    1804:	defffe04 	addi	sp,sp,-8
    1808:	dfc00115 	stw	ra,4(sp)
    180c:	df000015 	stw	fp,0(sp)
    1810:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1814:	01414004 	movi	r5,1280
    1818:	01000084 	movi	r4,2
    181c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1820:	01414304 	movi	r5,1292
    1824:	0009883a 	mov	r4,zero
    1828:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    182c:	01400204 	movi	r5,8
    1830:	0009883a 	mov	r4,zero
    1834:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1838:	0140b404 	movi	r5,720
    183c:	0009883a 	mov	r4,zero
    1840:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1844:	01400044 	movi	r5,1
    1848:	0009883a 	mov	r4,zero
    184c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1850:	014004c4 	movi	r5,19
    1854:	0009883a 	mov	r4,zero
    1858:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    185c:	01414504 	movi	r5,1300
    1860:	0009883a 	mov	r4,zero
    1864:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
    1868:	0141a004 	movi	r5,1664
    186c:	0009883a 	mov	r4,zero
    1870:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
    1874:	01408004 	movi	r5,512
    1878:	0009883a 	mov	r4,zero
    187c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1880:	000b883a 	mov	r5,zero
    1884:	0009883a 	mov	r4,zero
    1888:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
    188c:	01403fc4 	movi	r5,255
    1890:	0009883a 	mov	r4,zero
    1894:	00002d00 	call	2d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
    1898:	01415704 	movi	r5,1372
    189c:	0009883a 	mov	r4,zero
    18a0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    18a4:	01400204 	movi	r5,8
    18a8:	0009883a 	mov	r4,zero
    18ac:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    18b0:	0140a404 	movi	r5,656
    18b4:	0009883a 	mov	r4,zero
    18b8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    18bc:	01401044 	movi	r5,65
    18c0:	0009883a 	mov	r4,zero
    18c4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    18c8:	014004c4 	movi	r5,19
    18cc:	0009883a 	mov	r4,zero
    18d0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    18d4:	01414804 	movi	r5,1312
    18d8:	0009883a 	mov	r4,zero
    18dc:	00002d00 	call	2d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
    18e0:	01415904 	movi	r5,1380
    18e4:	0009883a 	mov	r4,zero
    18e8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    18ec:	01400204 	movi	r5,8
    18f0:	0009883a 	mov	r4,zero
    18f4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    18f8:	0140a404 	movi	r5,656
    18fc:	0009883a 	mov	r4,zero
    1900:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1904:	01400044 	movi	r5,1
    1908:	0009883a 	mov	r4,zero
    190c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1910:	014004c4 	movi	r5,19
    1914:	0009883a 	mov	r4,zero
    1918:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    191c:	01414b04 	movi	r5,1324
    1920:	0009883a 	mov	r4,zero
    1924:	00002d00 	call	2d0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
    1928:	01415b04 	movi	r5,1388
    192c:	0009883a 	mov	r4,zero
    1930:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1934:	01400204 	movi	r5,8
    1938:	0009883a 	mov	r4,zero
    193c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1940:	0140a404 	movi	r5,656
    1944:	0009883a 	mov	r4,zero
    1948:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    194c:	01401044 	movi	r5,65
    1950:	0009883a 	mov	r4,zero
    1954:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1958:	014004c4 	movi	r5,19
    195c:	0009883a 	mov	r4,zero
    1960:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1964:	01414e04 	movi	r5,1336
    1968:	0009883a 	mov	r4,zero
    196c:	00002d00 	call	2d0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
    1970:	01415d04 	movi	r5,1396
    1974:	0009883a 	mov	r4,zero
    1978:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    197c:	01400204 	movi	r5,8
    1980:	0009883a 	mov	r4,zero
    1984:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1988:	0140a404 	movi	r5,656
    198c:	0009883a 	mov	r4,zero
    1990:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1994:	01400044 	movi	r5,1
    1998:	0009883a 	mov	r4,zero
    199c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    19a0:	014004c4 	movi	r5,19
    19a4:	0009883a 	mov	r4,zero
    19a8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    19ac:	01415104 	movi	r5,1348
    19b0:	0009883a 	mov	r4,zero
    19b4:	00002d00 	call	2d0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
    19b8:	01415f04 	movi	r5,1404
    19bc:	0009883a 	mov	r4,zero
    19c0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
    19c4:	01400084 	movi	r5,2
    19c8:	0009883a 	mov	r4,zero
    19cc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    19d0:	0140a404 	movi	r5,656
    19d4:	0009883a 	mov	r4,zero
    19d8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    19dc:	01401044 	movi	r5,65
    19e0:	0009883a 	mov	r4,zero
    19e4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    19e8:	014004c4 	movi	r5,19
    19ec:	0009883a 	mov	r4,zero
    19f0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    19f4:	01415404 	movi	r5,1360
    19f8:	0009883a 	mov	r4,zero
    19fc:	00002d00 	call	2d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
    1a00:	000b883a 	mov	r5,zero
    1a04:	0009883a 	mov	r4,zero
    1a08:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
    1a0c:	000b883a 	mov	r5,zero
    1a10:	0009883a 	mov	r4,zero
    1a14:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
    1a18:	01408404 	movi	r5,528
    1a1c:	0009883a 	mov	r4,zero
    1a20:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
    1a24:	01401044 	movi	r5,65
    1a28:	0009883a 	mov	r4,zero
    1a2c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1a30:	014004c4 	movi	r5,19
    1a34:	0009883a 	mov	r4,zero
    1a38:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
    1a3c:	000b883a 	mov	r5,zero
    1a40:	0009883a 	mov	r4,zero
    1a44:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1a48:	01414004 	movi	r5,1280
    1a4c:	01006c04 	movi	r4,432
    1a50:	00011040 	call	1104 <UsbWrite>
}
    1a54:	0001883a 	nop
    1a58:	e037883a 	mov	sp,fp
    1a5c:	dfc00117 	ldw	ra,4(sp)
    1a60:	df000017 	ldw	fp,0(sp)
    1a64:	dec00204 	addi	sp,sp,8
    1a68:	f800283a 	ret

00001a6c <UsbSetConfig>:

void UsbSetConfig()
{
    1a6c:	defffe04 	addi	sp,sp,-8
    1a70:	dfc00115 	stw	ra,4(sp)
    1a74:	df000015 	stw	fp,0(sp)
    1a78:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1a7c:	01414004 	movi	r5,1280
    1a80:	01000084 	movi	r4,2
    1a84:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1a88:	01414304 	movi	r5,1292
    1a8c:	0009883a 	mov	r4,zero
    1a90:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1a94:	01400204 	movi	r5,8
    1a98:	0009883a 	mov	r4,zero
    1a9c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1aa0:	0140b404 	movi	r5,720
    1aa4:	0009883a 	mov	r4,zero
    1aa8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1aac:	01400044 	movi	r5,1
    1ab0:	0009883a 	mov	r4,zero
    1ab4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1ab8:	014004c4 	movi	r5,19
    1abc:	0009883a 	mov	r4,zero
    1ac0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1ac4:	01414504 	movi	r5,1300
    1ac8:	0009883a 	mov	r4,zero
    1acc:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
    1ad0:	01424004 	movi	r5,2304
    1ad4:	0009883a 	mov	r4,zero
    1ad8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
    1adc:	01400044 	movi	r5,1
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1ae8:	000b883a 	mov	r5,zero
    1aec:	0009883a 	mov	r4,zero
    1af0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1af4:	000b883a 	mov	r5,zero
    1af8:	0009883a 	mov	r4,zero
    1afc:	00002d00 	call	2d0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1b00:	000b883a 	mov	r5,zero
    1b04:	0009883a 	mov	r4,zero
    1b08:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
    1b0c:	000b883a 	mov	r5,zero
    1b10:	0009883a 	mov	r4,zero
    1b14:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1b18:	0140a404 	movi	r5,656
    1b1c:	0009883a 	mov	r4,zero
    1b20:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1b24:	01401044 	movi	r5,65
    1b28:	0009883a 	mov	r4,zero
    1b2c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1b30:	014004c4 	movi	r5,19
    1b34:	0009883a 	mov	r4,zero
    1b38:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1b3c:	000b883a 	mov	r5,zero
    1b40:	0009883a 	mov	r4,zero
    1b44:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1b48:	01414004 	movi	r5,1280
    1b4c:	01006c04 	movi	r4,432
    1b50:	00011040 	call	1104 <UsbWrite>

}
    1b54:	0001883a 	nop
    1b58:	e037883a 	mov	sp,fp
    1b5c:	dfc00117 	ldw	ra,4(sp)
    1b60:	df000017 	ldw	fp,0(sp)
    1b64:	dec00204 	addi	sp,sp,8
    1b68:	f800283a 	ret

00001b6c <UsbClassRequest>:

void UsbClassRequest()
{
    1b6c:	defffe04 	addi	sp,sp,-8
    1b70:	dfc00115 	stw	ra,4(sp)
    1b74:	df000015 	stw	fp,0(sp)
    1b78:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1b7c:	01414004 	movi	r5,1280
    1b80:	01000084 	movi	r4,2
    1b84:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1b88:	01414304 	movi	r5,1292
    1b8c:	0009883a 	mov	r4,zero
    1b90:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1b94:	01400204 	movi	r5,8
    1b98:	0009883a 	mov	r4,zero
    1b9c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1ba0:	0140b404 	movi	r5,720
    1ba4:	0009883a 	mov	r4,zero
    1ba8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1bac:	01400044 	movi	r5,1
    1bb0:	0009883a 	mov	r4,zero
    1bb4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1bb8:	014004c4 	movi	r5,19
    1bbc:	0009883a 	mov	r4,zero
    1bc0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1bc4:	01414504 	movi	r5,1300
    1bc8:	0009883a 	mov	r4,zero
    1bcc:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
    1bd0:	01428844 	movi	r5,2593
    1bd4:	0009883a 	mov	r4,zero
    1bd8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
    1bdc:	000b883a 	mov	r5,zero
    1be0:	0009883a 	mov	r4,zero
    1be4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1be8:	000b883a 	mov	r5,zero
    1bec:	0009883a 	mov	r4,zero
    1bf0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1bf4:	000b883a 	mov	r5,zero
    1bf8:	0009883a 	mov	r4,zero
    1bfc:	00002d00 	call	2d0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
    1c00:	000b883a 	mov	r5,zero
    1c04:	0009883a 	mov	r4,zero
    1c08:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
    1c0c:	000b883a 	mov	r5,zero
    1c10:	0009883a 	mov	r4,zero
    1c14:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
    1c18:	0140a404 	movi	r5,656
    1c1c:	0009883a 	mov	r4,zero
    1c20:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
    1c24:	01401044 	movi	r5,65
    1c28:	0009883a 	mov	r4,zero
    1c2c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1c30:	014004c4 	movi	r5,19
    1c34:	0009883a 	mov	r4,zero
    1c38:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);
    1c3c:	000b883a 	mov	r5,zero
    1c40:	0009883a 	mov	r4,zero
    1c44:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1c48:	01414004 	movi	r5,1280
    1c4c:	01006c04 	movi	r4,432
    1c50:	00011040 	call	1104 <UsbWrite>
}
    1c54:	0001883a 	nop
    1c58:	e037883a 	mov	sp,fp
    1c5c:	dfc00117 	ldw	ra,4(sp)
    1c60:	df000017 	ldw	fp,0(sp)
    1c64:	dec00204 	addi	sp,sp,8
    1c68:	f800283a 	ret

00001c6c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
    1c6c:	defffe04 	addi	sp,sp,-8
    1c70:	dfc00115 	stw	ra,4(sp)
    1c74:	df000015 	stw	fp,0(sp)
    1c78:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1c7c:	01414004 	movi	r5,1280
    1c80:	01000084 	movi	r4,2
    1c84:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1c88:	01414304 	movi	r5,1292
    1c8c:	0009883a 	mov	r4,zero
    1c90:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1c94:	01400204 	movi	r5,8
    1c98:	0009883a 	mov	r4,zero
    1c9c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
    1ca0:	0140b404 	movi	r5,720
    1ca4:	0009883a 	mov	r4,zero
    1ca8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1cac:	01400044 	movi	r5,1
    1cb0:	0009883a 	mov	r4,zero
    1cb4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1cb8:	014004c4 	movi	r5,19
    1cbc:	0009883a 	mov	r4,zero
    1cc0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1cc4:	01414504 	movi	r5,1300
    1cc8:	0009883a 	mov	r4,zero
    1ccc:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1cd0:	0141a044 	movi	r5,1665
    1cd4:	0009883a 	mov	r4,zero
    1cd8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
    1cdc:	01484004 	movi	r5,8448
    1ce0:	0009883a 	mov	r4,zero
    1ce4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1ce8:	000b883a 	mov	r5,zero
    1cec:	0009883a 	mov	r4,zero
    1cf0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1cf4:	01401ec4 	movi	r5,123
    1cf8:	0009883a 	mov	r4,zero
    1cfc:	00002d00 	call	2d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
    1d00:	01415104 	movi	r5,1348
    1d04:	0009883a 	mov	r4,zero
    1d08:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1d0c:	01400204 	movi	r5,8
    1d10:	0009883a 	mov	r4,zero
    1d14:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1d18:	0140a404 	movi	r5,656
    1d1c:	0009883a 	mov	r4,zero
    1d20:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1d24:	01401044 	movi	r5,65
    1d28:	0009883a 	mov	r4,zero
    1d2c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1d30:	014004c4 	movi	r5,19
    1d34:	0009883a 	mov	r4,zero
    1d38:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1d3c:	01414804 	movi	r5,1312
    1d40:	0009883a 	mov	r4,zero
    1d44:	00002d00 	call	2d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
    1d48:	000b883a 	mov	r5,zero
    1d4c:	0009883a 	mov	r4,zero
    1d50:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    1d54:	000b883a 	mov	r5,zero
    1d58:	0009883a 	mov	r4,zero
    1d5c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
    1d60:	01408404 	movi	r5,528
    1d64:	0009883a 	mov	r4,zero
    1d68:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1d6c:	01401044 	movi	r5,65
    1d70:	0009883a 	mov	r4,zero
    1d74:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1d78:	014004c4 	movi	r5,19
    1d7c:	0009883a 	mov	r4,zero
    1d80:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    1d84:	000b883a 	mov	r5,zero
    1d88:	0009883a 	mov	r4,zero
    1d8c:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d90:	01414004 	movi	r5,1280
    1d94:	01006c04 	movi	r4,432
    1d98:	00011040 	call	1104 <UsbWrite>

}
    1d9c:	0001883a 	nop
    1da0:	e037883a 	mov	sp,fp
    1da4:	dfc00117 	ldw	ra,4(sp)
    1da8:	df000017 	ldw	fp,0(sp)
    1dac:	dec00204 	addi	sp,sp,8
    1db0:	f800283a 	ret

00001db4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
    1db4:	defffe04 	addi	sp,sp,-8
    1db8:	dfc00115 	stw	ra,4(sp)
    1dbc:	df000015 	stw	fp,0(sp)
    1dc0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
    1dc4:	01414004 	movi	r5,1280
    1dc8:	01000084 	movi	r4,2
    1dcc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x050C);
    1dd0:	01414304 	movi	r5,1292
    1dd4:	0009883a 	mov	r4,zero
    1dd8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
    1ddc:	01400204 	movi	r5,8
    1de0:	0009883a 	mov	r4,zero
    1de4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
    1de8:	0140b404 	movi	r5,720
    1dec:	0009883a 	mov	r4,zero
    1df0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);
    1df4:	01400044 	movi	r5,1
    1df8:	0009883a 	mov	r4,zero
    1dfc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);
    1e00:	014004c4 	movi	r5,19
    1e04:	0009883a 	mov	r4,zero
    1e08:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0514);
    1e0c:	01414504 	movi	r5,1300
    1e10:	0009883a 	mov	r4,zero
    1e14:	00002d00 	call	2d0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
    1e18:	0141a044 	movi	r5,1665
    1e1c:	0009883a 	mov	r4,zero
    1e20:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
    1e24:	01488004 	movi	r5,8704
    1e28:	0009883a 	mov	r4,zero
    1e2c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
    1e30:	000b883a 	mov	r5,zero
    1e34:	0009883a 	mov	r4,zero
    1e38:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
    1e3c:	01401ec4 	movi	r5,123
    1e40:	0009883a 	mov	r4,zero
    1e44:	00002d00 	call	2d0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
    1e48:	01416004 	movi	r5,1408
    1e4c:	0009883a 	mov	r4,zero
    1e50:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1e54:	01400204 	movi	r5,8
    1e58:	0009883a 	mov	r4,zero
    1e5c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1e60:	0140a404 	movi	r5,656
    1e64:	0009883a 	mov	r4,zero
    1e68:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    1e6c:	01401044 	movi	r5,65
    1e70:	0009883a 	mov	r4,zero
    1e74:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1e78:	014004c4 	movi	r5,19
    1e7c:	0009883a 	mov	r4,zero
    1e80:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
    1e84:	01414804 	movi	r5,1312
    1e88:	0009883a 	mov	r4,zero
    1e8c:	00002d00 	call	2d0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
    1e90:	01416204 	movi	r5,1416
    1e94:	0009883a 	mov	r4,zero
    1e98:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1e9c:	01400204 	movi	r5,8
    1ea0:	0009883a 	mov	r4,zero
    1ea4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1ea8:	0140a404 	movi	r5,656
    1eac:	0009883a 	mov	r4,zero
    1eb0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1eb4:	01400044 	movi	r5,1
    1eb8:	0009883a 	mov	r4,zero
    1ebc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1ec0:	014004c4 	movi	r5,19
    1ec4:	0009883a 	mov	r4,zero
    1ec8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
    1ecc:	01414b04 	movi	r5,1324
    1ed0:	0009883a 	mov	r4,zero
    1ed4:	00002d00 	call	2d0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
    1ed8:	01416404 	movi	r5,1424
    1edc:	0009883a 	mov	r4,zero
    1ee0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    1ee4:	01400204 	movi	r5,8
    1ee8:	0009883a 	mov	r4,zero
    1eec:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
    1ef0:	0140a404 	movi	r5,656
    1ef4:	0009883a 	mov	r4,zero
    1ef8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
    1efc:	01401044 	movi	r5,65
    1f00:	0009883a 	mov	r4,zero
    1f04:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    1f08:	014004c4 	movi	r5,19
    1f0c:	0009883a 	mov	r4,zero
    1f10:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
    1f14:	01414e04 	movi	r5,1336
    1f18:	0009883a 	mov	r4,zero
    1f1c:	00002d00 	call	2d0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
    1f20:	01416604 	movi	r5,1432
    1f24:	0009883a 	mov	r4,zero
    1f28:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
    1f2c:	01400204 	movi	r5,8
    1f30:	0009883a 	mov	r4,zero
    1f34:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    1f38:	0140a404 	movi	r5,656
    1f3c:	0009883a 	mov	r4,zero
    1f40:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    1f44:	01400044 	movi	r5,1
    1f48:	0009883a 	mov	r4,zero
    1f4c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
    1f50:	014004c4 	movi	r5,19
    1f54:	0009883a 	mov	r4,zero
    1f58:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
    1f5c:	01415104 	movi	r5,1348
    1f60:	0009883a 	mov	r4,zero
    1f64:	00002d00 	call	2d0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
    1f68:	01416804 	movi	r5,1440
    1f6c:	0009883a 	mov	r4,zero
    1f70:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
    1f74:	01400204 	movi	r5,8
    1f78:	0009883a 	mov	r4,zero
    1f7c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
    1f80:	0140a404 	movi	r5,656
    1f84:	0009883a 	mov	r4,zero
    1f88:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
    1f8c:	01401044 	movi	r5,65
    1f90:	0009883a 	mov	r4,zero
    1f94:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    1f98:	014004c4 	movi	r5,19
    1f9c:	0009883a 	mov	r4,zero
    1fa0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
    1fa4:	01415404 	movi	r5,1360
    1fa8:	0009883a 	mov	r4,zero
    1fac:	00002d00 	call	2d0 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
    1fb0:	01416a04 	movi	r5,1448
    1fb4:	0009883a 	mov	r4,zero
    1fb8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
    1fbc:	01400204 	movi	r5,8
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
    1fc8:	0140a404 	movi	r5,656
    1fcc:	0009883a 	mov	r4,zero
    1fd0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
    1fd4:	01400044 	movi	r5,1
    1fd8:	0009883a 	mov	r4,zero
    1fdc:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
    1fe0:	014004c4 	movi	r5,19
    1fe4:	0009883a 	mov	r4,zero
    1fe8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
    1fec:	01415704 	movi	r5,1372
    1ff0:	0009883a 	mov	r4,zero
    1ff4:	00002d00 	call	2d0 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
    1ff8:	01416c04 	movi	r5,1456
    1ffc:	0009883a 	mov	r4,zero
    2000:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
    2004:	01400204 	movi	r5,8
    2008:	0009883a 	mov	r4,zero
    200c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
    2010:	0140a404 	movi	r5,656
    2014:	0009883a 	mov	r4,zero
    2018:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
    201c:	01401044 	movi	r5,65
    2020:	0009883a 	mov	r4,zero
    2024:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
    2028:	014004c4 	movi	r5,19
    202c:	0009883a 	mov	r4,zero
    2030:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
    2034:	01415a04 	movi	r5,1384
    2038:	0009883a 	mov	r4,zero
    203c:	00002d00 	call	2d0 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
    2040:	01416e04 	movi	r5,1464
    2044:	0009883a 	mov	r4,zero
    2048:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
    204c:	014000c4 	movi	r5,3
    2050:	0009883a 	mov	r4,zero
    2054:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
    2058:	0140a404 	movi	r5,656
    205c:	0009883a 	mov	r4,zero
    2060:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
    2064:	01400044 	movi	r5,1
    2068:	0009883a 	mov	r4,zero
    206c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
    2070:	014004c4 	movi	r5,19
    2074:	0009883a 	mov	r4,zero
    2078:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
    207c:	01415d04 	movi	r5,1396
    2080:	0009883a 	mov	r4,zero
    2084:	00002d00 	call	2d0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
    2088:	000b883a 	mov	r5,zero
    208c:	0009883a 	mov	r4,zero
    2090:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
    2094:	000b883a 	mov	r5,zero
    2098:	0009883a 	mov	r4,zero
    209c:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
    20a0:	01408404 	movi	r5,528
    20a4:	0009883a 	mov	r4,zero
    20a8:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
    20ac:	01401044 	movi	r5,65
    20b0:	0009883a 	mov	r4,zero
    20b4:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
    20b8:	014004c4 	movi	r5,19
    20bc:	0009883a 	mov	r4,zero
    20c0:	00002d00 	call	2d0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
    20c4:	000b883a 	mov	r5,zero
    20c8:	0009883a 	mov	r4,zero
    20cc:	00002d00 	call	2d0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    20d0:	01414004 	movi	r5,1280
    20d4:	01006c04 	movi	r4,432
    20d8:	00011040 	call	1104 <UsbWrite>

}
    20dc:	0001883a 	nop
    20e0:	e037883a 	mov	sp,fp
    20e4:	dfc00117 	ldw	ra,4(sp)
    20e8:	df000017 	ldw	fp,0(sp)
    20ec:	dec00204 	addi	sp,sp,8
    20f0:	f800283a 	ret

000020f4 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
    20f4:	defffd04 	addi	sp,sp,-12
    20f8:	dfc00215 	stw	ra,8(sp)
    20fc:	df000115 	stw	fp,4(sp)
    2100:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    2104:	01005104 	movi	r4,324
    2108:	000115c0 	call	115c <UsbRead>
    210c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2110:	000b883a 	mov	r5,zero
    2114:	01005104 	movi	r4,324
    2118:	00011040 	call	1104 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    211c:	00000d06 	br	2154 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
    2120:	e0bfff0b 	ldhu	r2,-4(fp)
    2124:	10000526 	beq	r2,zero,213c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2128:	e0bfff0b 	ldhu	r2,-4(fp)
    212c:	100b883a 	mov	r5,r2
    2130:	01000074 	movhi	r4,1
    2134:	21084b04 	addi	r4,r4,8492
    2138:	00022a80 	call	22a8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    213c:	01005104 	movi	r4,324
    2140:	000115c0 	call	115c <UsbRead>
    2144:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2148:	000b883a 	mov	r5,zero
    214c:	01005104 	movi	r4,324
    2150:	00011040 	call	1104 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
    2154:	e0bfff0b 	ldhu	r2,-4(fp)
    2158:	10840018 	cmpnei	r2,r2,4096
    215c:	103ff01e 	bne	r2,zero,2120 <UsbWaitTDListDone+0x2c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
    2160:	e0bfff0b 	ldhu	r2,-4(fp)
}
    2164:	e037883a 	mov	sp,fp
    2168:	dfc00117 	ldw	ra,4(sp)
    216c:	df000017 	ldw	fp,0(sp)
    2170:	dec00204 	addi	sp,sp,8
    2174:	f800283a 	ret

00002178 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
    2178:	defffd04 	addi	sp,sp,-12
    217c:	dfc00215 	stw	ra,8(sp)
    2180:	df000115 	stw	fp,4(sp)
    2184:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
    2188:	010000c4 	movi	r4,3
    218c:	000033c0 	call	33c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
    2190:	01005104 	movi	r4,324
    2194:	000115c0 	call	115c <UsbRead>
    2198:	10bfffcc 	andi	r2,r2,65535
    219c:	10840018 	cmpnei	r2,r2,4096
    21a0:	1000091e 	bne	r2,zero,21c8 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
    21a4:	000b883a 	mov	r5,zero
    21a8:	01005104 	movi	r4,324
    21ac:	00011040 	call	1104 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    21b0:	0001883a 	nop
    21b4:	010000c4 	movi	r4,3
    21b8:	000033c0 	call	33c <IO_read>
    21bc:	10bfffcc 	andi	r2,r2,65535
    21c0:	1080040c 	andi	r2,r2,16
    21c4:	103ffb26 	beq	r2,zero,21b4 <UsbGetRetryCnt+0x3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
    21c8:	01414204 	movi	r5,1288
    21cc:	01000084 	movi	r4,2
    21d0:	00002d00 	call	2d0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
    21d4:	0009883a 	mov	r4,zero
    21d8:	000033c0 	call	33c <IO_read>
    21dc:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
    21e0:	e0bfff0b 	ldhu	r2,-4(fp)
}
    21e4:	e037883a 	mov	sp,fp
    21e8:	dfc00117 	ldw	ra,4(sp)
    21ec:	df000017 	ldw	fp,0(sp)
    21f0:	dec00204 	addi	sp,sp,8
    21f4:	f800283a 	ret

000021f8 <UsbPrintMem>:


void UsbPrintMem()
{
    21f8:	defffc04 	addi	sp,sp,-16
    21fc:	dfc00315 	stw	ra,12(sp)
    2200:	df000215 	stw	fp,8(sp)
    2204:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
    2208:	01414004 	movi	r5,1280
    220c:	01000084 	movi	r4,2
    2210:	00002d00 	call	2d0 <IO_write>
	for (i = 0; i <= 200; i += 2)
    2214:	e03ffe15 	stw	zero,-8(fp)
    2218:	00000e06 	br	2254 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
    221c:	0009883a 	mov	r4,zero
    2220:	000033c0 	call	33c <IO_read>
    2224:	10bfffcc 	andi	r2,r2,65535
    2228:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
    222c:	e0bffe17 	ldw	r2,-8(fp)
    2230:	10814004 	addi	r2,r2,1280
    2234:	e1bfff17 	ldw	r6,-4(fp)
    2238:	100b883a 	mov	r5,r2
    223c:	01000074 	movhi	r4,1
    2240:	21085304 	addi	r4,r4,8524
    2244:	00022a80 	call	22a8 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
    2248:	e0bffe17 	ldw	r2,-8(fp)
    224c:	10800084 	addi	r2,r2,2
    2250:	e0bffe15 	stw	r2,-8(fp)
    2254:	e0bffe17 	ldw	r2,-8(fp)
    2258:	10803250 	cmplti	r2,r2,201
    225c:	103fef1e 	bne	r2,zero,221c <UsbPrintMem+0x24>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
    2260:	0001883a 	nop
    2264:	e037883a 	mov	sp,fp
    2268:	dfc00117 	ldw	ra,4(sp)
    226c:	df000017 	ldw	fp,0(sp)
    2270:	dec00204 	addi	sp,sp,8
    2274:	f800283a 	ret

00002278 <_printf_r>:
    2278:	defffd04 	addi	sp,sp,-12
    227c:	2805883a 	mov	r2,r5
    2280:	dfc00015 	stw	ra,0(sp)
    2284:	d9800115 	stw	r6,4(sp)
    2288:	d9c00215 	stw	r7,8(sp)
    228c:	21400217 	ldw	r5,8(r4)
    2290:	d9c00104 	addi	r7,sp,4
    2294:	100d883a 	mov	r6,r2
    2298:	00024500 	call	2450 <___vfprintf_internal_r>
    229c:	dfc00017 	ldw	ra,0(sp)
    22a0:	dec00304 	addi	sp,sp,12
    22a4:	f800283a 	ret

000022a8 <printf>:
    22a8:	defffc04 	addi	sp,sp,-16
    22ac:	dfc00015 	stw	ra,0(sp)
    22b0:	d9400115 	stw	r5,4(sp)
    22b4:	d9800215 	stw	r6,8(sp)
    22b8:	d9c00315 	stw	r7,12(sp)
    22bc:	00800074 	movhi	r2,1
    22c0:	108fc404 	addi	r2,r2,16144
    22c4:	10800017 	ldw	r2,0(r2)
    22c8:	200b883a 	mov	r5,r4
    22cc:	d9800104 	addi	r6,sp,4
    22d0:	11000217 	ldw	r4,8(r2)
    22d4:	000472c0 	call	472c <__vfprintf_internal>
    22d8:	dfc00017 	ldw	ra,0(sp)
    22dc:	dec00404 	addi	sp,sp,16
    22e0:	f800283a 	ret

000022e4 <_puts_r>:
    22e4:	defff604 	addi	sp,sp,-40
    22e8:	dc000715 	stw	r16,28(sp)
    22ec:	2021883a 	mov	r16,r4
    22f0:	2809883a 	mov	r4,r5
    22f4:	dc400815 	stw	r17,32(sp)
    22f8:	dfc00915 	stw	ra,36(sp)
    22fc:	2823883a 	mov	r17,r5
    2300:	00023b80 	call	23b8 <strlen>
    2304:	10c00044 	addi	r3,r2,1
    2308:	d8800115 	stw	r2,4(sp)
    230c:	00800074 	movhi	r2,1
    2310:	10885804 	addi	r2,r2,8544
    2314:	d8800215 	stw	r2,8(sp)
    2318:	00800044 	movi	r2,1
    231c:	d8800315 	stw	r2,12(sp)
    2320:	00800084 	movi	r2,2
    2324:	dc400015 	stw	r17,0(sp)
    2328:	d8c00615 	stw	r3,24(sp)
    232c:	dec00415 	stw	sp,16(sp)
    2330:	d8800515 	stw	r2,20(sp)
    2334:	80000226 	beq	r16,zero,2340 <_puts_r+0x5c>
    2338:	80800e17 	ldw	r2,56(r16)
    233c:	10001426 	beq	r2,zero,2390 <_puts_r+0xac>
    2340:	81400217 	ldw	r5,8(r16)
    2344:	2880030b 	ldhu	r2,12(r5)
    2348:	10c8000c 	andi	r3,r2,8192
    234c:	1800061e 	bne	r3,zero,2368 <_puts_r+0x84>
    2350:	29001917 	ldw	r4,100(r5)
    2354:	00f7ffc4 	movi	r3,-8193
    2358:	10880014 	ori	r2,r2,8192
    235c:	20c6703a 	and	r3,r4,r3
    2360:	2880030d 	sth	r2,12(r5)
    2364:	28c01915 	stw	r3,100(r5)
    2368:	d9800404 	addi	r6,sp,16
    236c:	8009883a 	mov	r4,r16
    2370:	0006c940 	call	6c94 <__sfvwrite_r>
    2374:	1000091e 	bne	r2,zero,239c <_puts_r+0xb8>
    2378:	00800284 	movi	r2,10
    237c:	dfc00917 	ldw	ra,36(sp)
    2380:	dc400817 	ldw	r17,32(sp)
    2384:	dc000717 	ldw	r16,28(sp)
    2388:	dec00a04 	addi	sp,sp,40
    238c:	f800283a 	ret
    2390:	8009883a 	mov	r4,r16
    2394:	00068100 	call	6810 <__sinit>
    2398:	003fe906 	br	2340 <_puts_r+0x5c>
    239c:	00bfffc4 	movi	r2,-1
    23a0:	003ff606 	br	237c <_puts_r+0x98>

000023a4 <puts>:
    23a4:	00800074 	movhi	r2,1
    23a8:	108fc404 	addi	r2,r2,16144
    23ac:	200b883a 	mov	r5,r4
    23b0:	11000017 	ldw	r4,0(r2)
    23b4:	00022e41 	jmpi	22e4 <_puts_r>

000023b8 <strlen>:
    23b8:	208000cc 	andi	r2,r4,3
    23bc:	10002026 	beq	r2,zero,2440 <strlen+0x88>
    23c0:	20800007 	ldb	r2,0(r4)
    23c4:	10002026 	beq	r2,zero,2448 <strlen+0x90>
    23c8:	2005883a 	mov	r2,r4
    23cc:	00000206 	br	23d8 <strlen+0x20>
    23d0:	10c00007 	ldb	r3,0(r2)
    23d4:	18001826 	beq	r3,zero,2438 <strlen+0x80>
    23d8:	10800044 	addi	r2,r2,1
    23dc:	10c000cc 	andi	r3,r2,3
    23e0:	183ffb1e 	bne	r3,zero,23d0 <strlen+0x18>
    23e4:	10c00017 	ldw	r3,0(r2)
    23e8:	01ffbff4 	movhi	r7,65279
    23ec:	39ffbfc4 	addi	r7,r7,-257
    23f0:	00ca303a 	nor	r5,zero,r3
    23f4:	01a02074 	movhi	r6,32897
    23f8:	19c7883a 	add	r3,r3,r7
    23fc:	31a02004 	addi	r6,r6,-32640
    2400:	1946703a 	and	r3,r3,r5
    2404:	1986703a 	and	r3,r3,r6
    2408:	1800091e 	bne	r3,zero,2430 <strlen+0x78>
    240c:	10800104 	addi	r2,r2,4
    2410:	10c00017 	ldw	r3,0(r2)
    2414:	19cb883a 	add	r5,r3,r7
    2418:	00c6303a 	nor	r3,zero,r3
    241c:	28c6703a 	and	r3,r5,r3
    2420:	1986703a 	and	r3,r3,r6
    2424:	183ff926 	beq	r3,zero,240c <strlen+0x54>
    2428:	00000106 	br	2430 <strlen+0x78>
    242c:	10800044 	addi	r2,r2,1
    2430:	10c00007 	ldb	r3,0(r2)
    2434:	183ffd1e 	bne	r3,zero,242c <strlen+0x74>
    2438:	1105c83a 	sub	r2,r2,r4
    243c:	f800283a 	ret
    2440:	2005883a 	mov	r2,r4
    2444:	003fe706 	br	23e4 <strlen+0x2c>
    2448:	0005883a 	mov	r2,zero
    244c:	f800283a 	ret

00002450 <___vfprintf_internal_r>:
    2450:	deffb804 	addi	sp,sp,-288
    2454:	dfc04715 	stw	ra,284(sp)
    2458:	ddc04515 	stw	r23,276(sp)
    245c:	dd404315 	stw	r21,268(sp)
    2460:	d9002d15 	stw	r4,180(sp)
    2464:	282f883a 	mov	r23,r5
    2468:	302b883a 	mov	r21,r6
    246c:	d9c02e15 	stw	r7,184(sp)
    2470:	df004615 	stw	fp,280(sp)
    2474:	dd804415 	stw	r22,272(sp)
    2478:	dd004215 	stw	r20,264(sp)
    247c:	dcc04115 	stw	r19,260(sp)
    2480:	dc804015 	stw	r18,256(sp)
    2484:	dc403f15 	stw	r17,252(sp)
    2488:	dc003e15 	stw	r16,248(sp)
    248c:	00073900 	call	7390 <_localeconv_r>
    2490:	10800017 	ldw	r2,0(r2)
    2494:	1009883a 	mov	r4,r2
    2498:	d8803415 	stw	r2,208(sp)
    249c:	00023b80 	call	23b8 <strlen>
    24a0:	d8803715 	stw	r2,220(sp)
    24a4:	d8802d17 	ldw	r2,180(sp)
    24a8:	10000226 	beq	r2,zero,24b4 <___vfprintf_internal_r+0x64>
    24ac:	10800e17 	ldw	r2,56(r2)
    24b0:	1000fb26 	beq	r2,zero,28a0 <___vfprintf_internal_r+0x450>
    24b4:	b880030b 	ldhu	r2,12(r23)
    24b8:	10c8000c 	andi	r3,r2,8192
    24bc:	1800061e 	bne	r3,zero,24d8 <___vfprintf_internal_r+0x88>
    24c0:	b9001917 	ldw	r4,100(r23)
    24c4:	00f7ffc4 	movi	r3,-8193
    24c8:	10880014 	ori	r2,r2,8192
    24cc:	20c6703a 	and	r3,r4,r3
    24d0:	b880030d 	sth	r2,12(r23)
    24d4:	b8c01915 	stw	r3,100(r23)
    24d8:	10c0020c 	andi	r3,r2,8
    24dc:	1800c326 	beq	r3,zero,27ec <___vfprintf_internal_r+0x39c>
    24e0:	b8c00417 	ldw	r3,16(r23)
    24e4:	1800c126 	beq	r3,zero,27ec <___vfprintf_internal_r+0x39c>
    24e8:	1080068c 	andi	r2,r2,26
    24ec:	00c00284 	movi	r3,10
    24f0:	10c0c626 	beq	r2,r3,280c <___vfprintf_internal_r+0x3bc>
    24f4:	d8c00404 	addi	r3,sp,16
    24f8:	05000074 	movhi	r20,1
    24fc:	d9001e04 	addi	r4,sp,120
    2500:	a5086984 	addi	r20,r20,8614
    2504:	d8c01e15 	stw	r3,120(sp)
    2508:	d8002015 	stw	zero,128(sp)
    250c:	d8001f15 	stw	zero,124(sp)
    2510:	d8003315 	stw	zero,204(sp)
    2514:	d8003615 	stw	zero,216(sp)
    2518:	d8003815 	stw	zero,224(sp)
    251c:	1811883a 	mov	r8,r3
    2520:	d8003915 	stw	zero,228(sp)
    2524:	d8003a15 	stw	zero,232(sp)
    2528:	d8002f15 	stw	zero,188(sp)
    252c:	d9002815 	stw	r4,160(sp)
    2530:	a8800007 	ldb	r2,0(r21)
    2534:	10028b26 	beq	r2,zero,2f64 <___vfprintf_internal_r+0xb14>
    2538:	00c00944 	movi	r3,37
    253c:	a823883a 	mov	r17,r21
    2540:	10c0021e 	bne	r2,r3,254c <___vfprintf_internal_r+0xfc>
    2544:	00001406 	br	2598 <___vfprintf_internal_r+0x148>
    2548:	10c00326 	beq	r2,r3,2558 <___vfprintf_internal_r+0x108>
    254c:	8c400044 	addi	r17,r17,1
    2550:	88800007 	ldb	r2,0(r17)
    2554:	103ffc1e 	bne	r2,zero,2548 <___vfprintf_internal_r+0xf8>
    2558:	8d61c83a 	sub	r16,r17,r21
    255c:	80000e26 	beq	r16,zero,2598 <___vfprintf_internal_r+0x148>
    2560:	d8c02017 	ldw	r3,128(sp)
    2564:	d8801f17 	ldw	r2,124(sp)
    2568:	45400015 	stw	r21,0(r8)
    256c:	1c07883a 	add	r3,r3,r16
    2570:	10800044 	addi	r2,r2,1
    2574:	d8c02015 	stw	r3,128(sp)
    2578:	44000115 	stw	r16,4(r8)
    257c:	d8801f15 	stw	r2,124(sp)
    2580:	00c001c4 	movi	r3,7
    2584:	1880a916 	blt	r3,r2,282c <___vfprintf_internal_r+0x3dc>
    2588:	42000204 	addi	r8,r8,8
    258c:	d9402f17 	ldw	r5,188(sp)
    2590:	2c0b883a 	add	r5,r5,r16
    2594:	d9402f15 	stw	r5,188(sp)
    2598:	88800007 	ldb	r2,0(r17)
    259c:	1000aa26 	beq	r2,zero,2848 <___vfprintf_internal_r+0x3f8>
    25a0:	8d400044 	addi	r21,r17,1
    25a4:	8c400047 	ldb	r17,1(r17)
    25a8:	0021883a 	mov	r16,zero
    25ac:	00bfffc4 	movi	r2,-1
    25b0:	0025883a 	mov	r18,zero
    25b4:	dc002905 	stb	r16,164(sp)
    25b8:	d8002785 	stb	zero,158(sp)
    25bc:	d8002b05 	stb	zero,172(sp)
    25c0:	d8802a15 	stw	r2,168(sp)
    25c4:	d8003115 	stw	zero,196(sp)
    25c8:	04c01604 	movi	r19,88
    25cc:	05800244 	movi	r22,9
    25d0:	9021883a 	mov	r16,r18
    25d4:	4039883a 	mov	fp,r8
    25d8:	ad400044 	addi	r21,r21,1
    25dc:	88bff804 	addi	r2,r17,-32
    25e0:	98833236 	bltu	r19,r2,32ac <___vfprintf_internal_r+0xe5c>
    25e4:	100490ba 	slli	r2,r2,2
    25e8:	00c00034 	movhi	r3,0
    25ec:	18c97f04 	addi	r3,r3,9724
    25f0:	10c5883a 	add	r2,r2,r3
    25f4:	10800017 	ldw	r2,0(r2)
    25f8:	1000683a 	jmp	r2
    25fc:	000031a4 	muli	zero,zero,198
    2600:	000032ac 	andhi	zero,zero,202
    2604:	000032ac 	andhi	zero,zero,202
    2608:	000031c4 	movi	zero,199
    260c:	000032ac 	andhi	zero,zero,202
    2610:	000032ac 	andhi	zero,zero,202
    2614:	000032ac 	andhi	zero,zero,202
    2618:	000032ac 	andhi	zero,zero,202
    261c:	000032ac 	andhi	zero,zero,202
    2620:	000032ac 	andhi	zero,zero,202
    2624:	000028ac 	andhi	zero,zero,162
    2628:	000030b4 	movhi	zero,194
    262c:	000032ac 	andhi	zero,zero,202
    2630:	00002770 	cmpltui	zero,zero,157
    2634:	000028d0 	cmplti	zero,zero,163
    2638:	000032ac 	andhi	zero,zero,202
    263c:	00002920 	cmpeqi	zero,zero,164
    2640:	0000292c 	andhi	zero,zero,164
    2644:	0000292c 	andhi	zero,zero,164
    2648:	0000292c 	andhi	zero,zero,164
    264c:	0000292c 	andhi	zero,zero,164
    2650:	0000292c 	andhi	zero,zero,164
    2654:	0000292c 	andhi	zero,zero,164
    2658:	0000292c 	andhi	zero,zero,164
    265c:	0000292c 	andhi	zero,zero,164
    2660:	0000292c 	andhi	zero,zero,164
    2664:	000032ac 	andhi	zero,zero,202
    2668:	000032ac 	andhi	zero,zero,202
    266c:	000032ac 	andhi	zero,zero,202
    2670:	000032ac 	andhi	zero,zero,202
    2674:	000032ac 	andhi	zero,zero,202
    2678:	000032ac 	andhi	zero,zero,202
    267c:	000032ac 	andhi	zero,zero,202
    2680:	000032ac 	andhi	zero,zero,202
    2684:	000032ac 	andhi	zero,zero,202
    2688:	000032ac 	andhi	zero,zero,202
    268c:	00002968 	cmpgeui	zero,zero,165
    2690:	00002a30 	cmpltui	zero,zero,168
    2694:	000032ac 	andhi	zero,zero,202
    2698:	00002a30 	cmpltui	zero,zero,168
    269c:	000032ac 	andhi	zero,zero,202
    26a0:	000032ac 	andhi	zero,zero,202
    26a4:	000032ac 	andhi	zero,zero,202
    26a8:	000032ac 	andhi	zero,zero,202
    26ac:	00002adc 	xori	zero,zero,171
    26b0:	000032ac 	andhi	zero,zero,202
    26b4:	000032ac 	andhi	zero,zero,202
    26b8:	00002ae8 	cmpgeui	zero,zero,171
    26bc:	000032ac 	andhi	zero,zero,202
    26c0:	000032ac 	andhi	zero,zero,202
    26c4:	000032ac 	andhi	zero,zero,202
    26c8:	000032ac 	andhi	zero,zero,202
    26cc:	000032ac 	andhi	zero,zero,202
    26d0:	00002f6c 	andhi	zero,zero,189
    26d4:	000032ac 	andhi	zero,zero,202
    26d8:	000032ac 	andhi	zero,zero,202
    26dc:	00002fd8 	cmpnei	zero,zero,191
    26e0:	000032ac 	andhi	zero,zero,202
    26e4:	000032ac 	andhi	zero,zero,202
    26e8:	000032ac 	andhi	zero,zero,202
    26ec:	000032ac 	andhi	zero,zero,202
    26f0:	000032ac 	andhi	zero,zero,202
    26f4:	000032ac 	andhi	zero,zero,202
    26f8:	000032ac 	andhi	zero,zero,202
    26fc:	000032ac 	andhi	zero,zero,202
    2700:	000032ac 	andhi	zero,zero,202
    2704:	000032ac 	andhi	zero,zero,202
    2708:	00003250 	cmplti	zero,zero,201
    270c:	000031d0 	cmplti	zero,zero,199
    2710:	00002a30 	cmpltui	zero,zero,168
    2714:	00002a30 	cmpltui	zero,zero,168
    2718:	00002a30 	cmpltui	zero,zero,168
    271c:	000031f0 	cmpltui	zero,zero,199
    2720:	000031d0 	cmplti	zero,zero,199
    2724:	000032ac 	andhi	zero,zero,202
    2728:	000032ac 	andhi	zero,zero,202
    272c:	000031fc 	xorhi	zero,zero,199
    2730:	000032ac 	andhi	zero,zero,202
    2734:	00003210 	cmplti	zero,zero,200
    2738:	00003094 	movui	zero,194
    273c:	0000277c 	xorhi	zero,zero,157
    2740:	000030cc 	andi	zero,zero,195
    2744:	000032ac 	andhi	zero,zero,202
    2748:	000030d8 	cmpnei	zero,zero,195
    274c:	000032ac 	andhi	zero,zero,202
    2750:	0000313c 	xorhi	zero,zero,196
    2754:	000032ac 	andhi	zero,zero,202
    2758:	000032ac 	andhi	zero,zero,202
    275c:	0000315c 	xori	zero,zero,197
    2760:	d8c03117 	ldw	r3,196(sp)
    2764:	d8802e15 	stw	r2,184(sp)
    2768:	00c7c83a 	sub	r3,zero,r3
    276c:	d8c03115 	stw	r3,196(sp)
    2770:	84000114 	ori	r16,r16,4
    2774:	ac400007 	ldb	r17,0(r21)
    2778:	003f9706 	br	25d8 <___vfprintf_internal_r+0x188>
    277c:	00800c04 	movi	r2,48
    2780:	d8802705 	stb	r2,156(sp)
    2784:	00801e04 	movi	r2,120
    2788:	d8802745 	stb	r2,157(sp)
    278c:	d9002a17 	ldw	r4,168(sp)
    2790:	d8802e17 	ldw	r2,184(sp)
    2794:	d8002785 	stb	zero,158(sp)
    2798:	e011883a 	mov	r8,fp
    279c:	10c00104 	addi	r3,r2,4
    27a0:	14c00017 	ldw	r19,0(r2)
    27a4:	002d883a 	mov	r22,zero
    27a8:	80800094 	ori	r2,r16,2
    27ac:	2002ca16 	blt	r4,zero,32d8 <___vfprintf_internal_r+0xe88>
    27b0:	00bfdfc4 	movi	r2,-129
    27b4:	80a4703a 	and	r18,r16,r2
    27b8:	d8c02e15 	stw	r3,184(sp)
    27bc:	94800094 	ori	r18,r18,2
    27c0:	9802b41e 	bne	r19,zero,3294 <___vfprintf_internal_r+0xe44>
    27c4:	01400074 	movhi	r5,1
    27c8:	29486204 	addi	r5,r5,8584
    27cc:	d9403915 	stw	r5,228(sp)
    27d0:	04401e04 	movi	r17,120
    27d4:	d8802a17 	ldw	r2,168(sp)
    27d8:	0039883a 	mov	fp,zero
    27dc:	1001fa26 	beq	r2,zero,2fc8 <___vfprintf_internal_r+0xb78>
    27e0:	0027883a 	mov	r19,zero
    27e4:	002d883a 	mov	r22,zero
    27e8:	00021906 	br	3050 <___vfprintf_internal_r+0xc00>
    27ec:	d9002d17 	ldw	r4,180(sp)
    27f0:	b80b883a 	mov	r5,r23
    27f4:	00048040 	call	4804 <__swsetup_r>
    27f8:	1005dc1e 	bne	r2,zero,3f6c <___vfprintf_internal_r+0x1b1c>
    27fc:	b880030b 	ldhu	r2,12(r23)
    2800:	00c00284 	movi	r3,10
    2804:	1080068c 	andi	r2,r2,26
    2808:	10ff3a1e 	bne	r2,r3,24f4 <___vfprintf_internal_r+0xa4>
    280c:	b880038f 	ldh	r2,14(r23)
    2810:	103f3816 	blt	r2,zero,24f4 <___vfprintf_internal_r+0xa4>
    2814:	d9c02e17 	ldw	r7,184(sp)
    2818:	d9002d17 	ldw	r4,180(sp)
    281c:	a80d883a 	mov	r6,r21
    2820:	b80b883a 	mov	r5,r23
    2824:	00047480 	call	4748 <__sbprintf>
    2828:	00001106 	br	2870 <___vfprintf_internal_r+0x420>
    282c:	d9002d17 	ldw	r4,180(sp)
    2830:	d9801e04 	addi	r6,sp,120
    2834:	b80b883a 	mov	r5,r23
    2838:	0009c300 	call	9c30 <__sprint_r>
    283c:	1000081e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    2840:	da000404 	addi	r8,sp,16
    2844:	003f5106 	br	258c <___vfprintf_internal_r+0x13c>
    2848:	d8802017 	ldw	r2,128(sp)
    284c:	10000426 	beq	r2,zero,2860 <___vfprintf_internal_r+0x410>
    2850:	d9002d17 	ldw	r4,180(sp)
    2854:	d9801e04 	addi	r6,sp,120
    2858:	b80b883a 	mov	r5,r23
    285c:	0009c300 	call	9c30 <__sprint_r>
    2860:	b880030b 	ldhu	r2,12(r23)
    2864:	1080100c 	andi	r2,r2,64
    2868:	1005c01e 	bne	r2,zero,3f6c <___vfprintf_internal_r+0x1b1c>
    286c:	d8802f17 	ldw	r2,188(sp)
    2870:	dfc04717 	ldw	ra,284(sp)
    2874:	df004617 	ldw	fp,280(sp)
    2878:	ddc04517 	ldw	r23,276(sp)
    287c:	dd804417 	ldw	r22,272(sp)
    2880:	dd404317 	ldw	r21,268(sp)
    2884:	dd004217 	ldw	r20,264(sp)
    2888:	dcc04117 	ldw	r19,260(sp)
    288c:	dc804017 	ldw	r18,256(sp)
    2890:	dc403f17 	ldw	r17,252(sp)
    2894:	dc003e17 	ldw	r16,248(sp)
    2898:	dec04804 	addi	sp,sp,288
    289c:	f800283a 	ret
    28a0:	d9002d17 	ldw	r4,180(sp)
    28a4:	00068100 	call	6810 <__sinit>
    28a8:	003f0206 	br	24b4 <___vfprintf_internal_r+0x64>
    28ac:	d9002e17 	ldw	r4,184(sp)
    28b0:	d9402e17 	ldw	r5,184(sp)
    28b4:	21000017 	ldw	r4,0(r4)
    28b8:	28800104 	addi	r2,r5,4
    28bc:	d9003115 	stw	r4,196(sp)
    28c0:	203fa716 	blt	r4,zero,2760 <___vfprintf_internal_r+0x310>
    28c4:	d8802e15 	stw	r2,184(sp)
    28c8:	ac400007 	ldb	r17,0(r21)
    28cc:	003f4206 	br	25d8 <___vfprintf_internal_r+0x188>
    28d0:	ac400007 	ldb	r17,0(r21)
    28d4:	01000a84 	movi	r4,42
    28d8:	a8c00044 	addi	r3,r21,1
    28dc:	89075826 	beq	r17,r4,4640 <___vfprintf_internal_r+0x21f0>
    28e0:	8cbff404 	addi	r18,r17,-48
    28e4:	b486ae36 	bltu	r22,r18,43a0 <___vfprintf_internal_r+0x1f50>
    28e8:	0009883a 	mov	r4,zero
    28ec:	1823883a 	mov	r17,r3
    28f0:	01400284 	movi	r5,10
    28f4:	000c8ec0 	call	c8ec <__mulsi3>
    28f8:	88c00007 	ldb	r3,0(r17)
    28fc:	1489883a 	add	r4,r2,r18
    2900:	8d400044 	addi	r21,r17,1
    2904:	1cbff404 	addi	r18,r3,-48
    2908:	a823883a 	mov	r17,r21
    290c:	b4bff82e 	bgeu	r22,r18,28f0 <___vfprintf_internal_r+0x4a0>
    2910:	1823883a 	mov	r17,r3
    2914:	2005f616 	blt	r4,zero,40f0 <___vfprintf_internal_r+0x1ca0>
    2918:	d9002a15 	stw	r4,168(sp)
    291c:	003f2f06 	br	25dc <___vfprintf_internal_r+0x18c>
    2920:	84002014 	ori	r16,r16,128
    2924:	ac400007 	ldb	r17,0(r21)
    2928:	003f2b06 	br	25d8 <___vfprintf_internal_r+0x188>
    292c:	8cbff404 	addi	r18,r17,-48
    2930:	d8003115 	stw	zero,196(sp)
    2934:	0009883a 	mov	r4,zero
    2938:	a823883a 	mov	r17,r21
    293c:	01400284 	movi	r5,10
    2940:	000c8ec0 	call	c8ec <__mulsi3>
    2944:	88c00007 	ldb	r3,0(r17)
    2948:	9089883a 	add	r4,r18,r2
    294c:	ad400044 	addi	r21,r21,1
    2950:	1cbff404 	addi	r18,r3,-48
    2954:	a823883a 	mov	r17,r21
    2958:	b4bff82e 	bgeu	r22,r18,293c <___vfprintf_internal_r+0x4ec>
    295c:	1823883a 	mov	r17,r3
    2960:	d9003115 	stw	r4,196(sp)
    2964:	003f1d06 	br	25dc <___vfprintf_internal_r+0x18c>
    2968:	8025883a 	mov	r18,r16
    296c:	dc002903 	ldbu	r16,164(sp)
    2970:	e011883a 	mov	r8,fp
    2974:	84003fcc 	andi	r16,r16,255
    2978:	8007531e 	bne	r16,zero,46c8 <___vfprintf_internal_r+0x2278>
    297c:	94800414 	ori	r18,r18,16
    2980:	9080080c 	andi	r2,r18,32
    2984:	1003a326 	beq	r2,zero,3814 <___vfprintf_internal_r+0x13c4>
    2988:	d9002e17 	ldw	r4,184(sp)
    298c:	20800117 	ldw	r2,4(r4)
    2990:	24c00017 	ldw	r19,0(r4)
    2994:	21000204 	addi	r4,r4,8
    2998:	d9002e15 	stw	r4,184(sp)
    299c:	102d883a 	mov	r22,r2
    29a0:	10047316 	blt	r2,zero,3b70 <___vfprintf_internal_r+0x1720>
    29a4:	d9002a17 	ldw	r4,168(sp)
    29a8:	df002783 	ldbu	fp,158(sp)
    29ac:	2003e416 	blt	r4,zero,3940 <___vfprintf_internal_r+0x14f0>
    29b0:	00ffdfc4 	movi	r3,-129
    29b4:	9d84b03a 	or	r2,r19,r22
    29b8:	90e4703a 	and	r18,r18,r3
    29bc:	10018026 	beq	r2,zero,2fc0 <___vfprintf_internal_r+0xb70>
    29c0:	b003ab26 	beq	r22,zero,3870 <___vfprintf_internal_r+0x1420>
    29c4:	dc402915 	stw	r17,164(sp)
    29c8:	dc001e04 	addi	r16,sp,120
    29cc:	b023883a 	mov	r17,r22
    29d0:	402d883a 	mov	r22,r8
    29d4:	9809883a 	mov	r4,r19
    29d8:	880b883a 	mov	r5,r17
    29dc:	01800284 	movi	r6,10
    29e0:	000f883a 	mov	r7,zero
    29e4:	000c1740 	call	c174 <__umoddi3>
    29e8:	10800c04 	addi	r2,r2,48
    29ec:	843fffc4 	addi	r16,r16,-1
    29f0:	9809883a 	mov	r4,r19
    29f4:	880b883a 	mov	r5,r17
    29f8:	80800005 	stb	r2,0(r16)
    29fc:	01800284 	movi	r6,10
    2a00:	000f883a 	mov	r7,zero
    2a04:	000bb780 	call	bb78 <__udivdi3>
    2a08:	1027883a 	mov	r19,r2
    2a0c:	10c4b03a 	or	r2,r2,r3
    2a10:	1823883a 	mov	r17,r3
    2a14:	103fef1e 	bne	r2,zero,29d4 <___vfprintf_internal_r+0x584>
    2a18:	d8c02817 	ldw	r3,160(sp)
    2a1c:	dc402917 	ldw	r17,164(sp)
    2a20:	b011883a 	mov	r8,r22
    2a24:	1c07c83a 	sub	r3,r3,r16
    2a28:	d8c02b15 	stw	r3,172(sp)
    2a2c:	00005f06 	br	2bac <___vfprintf_internal_r+0x75c>
    2a30:	8025883a 	mov	r18,r16
    2a34:	dc002903 	ldbu	r16,164(sp)
    2a38:	e011883a 	mov	r8,fp
    2a3c:	84003fcc 	andi	r16,r16,255
    2a40:	80071e1e 	bne	r16,zero,46bc <___vfprintf_internal_r+0x226c>
    2a44:	9080020c 	andi	r2,r18,8
    2a48:	1004af26 	beq	r2,zero,3d08 <___vfprintf_internal_r+0x18b8>
    2a4c:	d9002e17 	ldw	r4,184(sp)
    2a50:	d9402e17 	ldw	r5,184(sp)
    2a54:	d8802e17 	ldw	r2,184(sp)
    2a58:	21000017 	ldw	r4,0(r4)
    2a5c:	29400117 	ldw	r5,4(r5)
    2a60:	10800204 	addi	r2,r2,8
    2a64:	d9003615 	stw	r4,216(sp)
    2a68:	d9403815 	stw	r5,224(sp)
    2a6c:	d8802e15 	stw	r2,184(sp)
    2a70:	d9003617 	ldw	r4,216(sp)
    2a74:	d9403817 	ldw	r5,224(sp)
    2a78:	da003d15 	stw	r8,244(sp)
    2a7c:	04000044 	movi	r16,1
    2a80:	00098540 	call	9854 <__fpclassifyd>
    2a84:	da003d17 	ldw	r8,244(sp)
    2a88:	1404441e 	bne	r2,r16,3b9c <___vfprintf_internal_r+0x174c>
    2a8c:	d9003617 	ldw	r4,216(sp)
    2a90:	d9403817 	ldw	r5,224(sp)
    2a94:	000d883a 	mov	r6,zero
    2a98:	000f883a 	mov	r7,zero
    2a9c:	000dcf40 	call	dcf4 <__ledf2>
    2aa0:	da003d17 	ldw	r8,244(sp)
    2aa4:	1005e316 	blt	r2,zero,4234 <___vfprintf_internal_r+0x1de4>
    2aa8:	df002783 	ldbu	fp,158(sp)
    2aac:	008011c4 	movi	r2,71
    2ab0:	1445580e 	bge	r2,r17,4014 <___vfprintf_internal_r+0x1bc4>
    2ab4:	04000074 	movhi	r16,1
    2ab8:	84085a04 	addi	r16,r16,8552
    2abc:	00c000c4 	movi	r3,3
    2ac0:	00bfdfc4 	movi	r2,-129
    2ac4:	d8c02915 	stw	r3,164(sp)
    2ac8:	90a4703a 	and	r18,r18,r2
    2acc:	d8c02b15 	stw	r3,172(sp)
    2ad0:	d8002a15 	stw	zero,168(sp)
    2ad4:	d8003215 	stw	zero,200(sp)
    2ad8:	00003a06 	br	2bc4 <___vfprintf_internal_r+0x774>
    2adc:	84000214 	ori	r16,r16,8
    2ae0:	ac400007 	ldb	r17,0(r21)
    2ae4:	003ebc06 	br	25d8 <___vfprintf_internal_r+0x188>
    2ae8:	8025883a 	mov	r18,r16
    2aec:	dc002903 	ldbu	r16,164(sp)
    2af0:	e011883a 	mov	r8,fp
    2af4:	84003fcc 	andi	r16,r16,255
    2af8:	8007001e 	bne	r16,zero,46fc <___vfprintf_internal_r+0x22ac>
    2afc:	94800414 	ori	r18,r18,16
    2b00:	9080080c 	andi	r2,r18,32
    2b04:	1002fa26 	beq	r2,zero,36f0 <___vfprintf_internal_r+0x12a0>
    2b08:	d9002e17 	ldw	r4,184(sp)
    2b0c:	d9402a17 	ldw	r5,168(sp)
    2b10:	d8002785 	stb	zero,158(sp)
    2b14:	20800204 	addi	r2,r4,8
    2b18:	24c00017 	ldw	r19,0(r4)
    2b1c:	25800117 	ldw	r22,4(r4)
    2b20:	2804b116 	blt	r5,zero,3de8 <___vfprintf_internal_r+0x1998>
    2b24:	013fdfc4 	movi	r4,-129
    2b28:	9d86b03a 	or	r3,r19,r22
    2b2c:	d8802e15 	stw	r2,184(sp)
    2b30:	9124703a 	and	r18,r18,r4
    2b34:	1802fb1e 	bne	r3,zero,3724 <___vfprintf_internal_r+0x12d4>
    2b38:	d8c02a17 	ldw	r3,168(sp)
    2b3c:	0039883a 	mov	fp,zero
    2b40:	1805e526 	beq	r3,zero,42d8 <___vfprintf_internal_r+0x1e88>
    2b44:	0027883a 	mov	r19,zero
    2b48:	002d883a 	mov	r22,zero
    2b4c:	dc001e04 	addi	r16,sp,120
    2b50:	9806d0fa 	srli	r3,r19,3
    2b54:	b008977a 	slli	r4,r22,29
    2b58:	b02cd0fa 	srli	r22,r22,3
    2b5c:	9cc001cc 	andi	r19,r19,7
    2b60:	98800c04 	addi	r2,r19,48
    2b64:	843fffc4 	addi	r16,r16,-1
    2b68:	20e6b03a 	or	r19,r4,r3
    2b6c:	80800005 	stb	r2,0(r16)
    2b70:	9d86b03a 	or	r3,r19,r22
    2b74:	183ff61e 	bne	r3,zero,2b50 <___vfprintf_internal_r+0x700>
    2b78:	90c0004c 	andi	r3,r18,1
    2b7c:	18014126 	beq	r3,zero,3084 <___vfprintf_internal_r+0xc34>
    2b80:	10803fcc 	andi	r2,r2,255
    2b84:	1080201c 	xori	r2,r2,128
    2b88:	10bfe004 	addi	r2,r2,-128
    2b8c:	00c00c04 	movi	r3,48
    2b90:	10c13c26 	beq	r2,r3,3084 <___vfprintf_internal_r+0xc34>
    2b94:	80ffffc5 	stb	r3,-1(r16)
    2b98:	d8c02817 	ldw	r3,160(sp)
    2b9c:	80bfffc4 	addi	r2,r16,-1
    2ba0:	1021883a 	mov	r16,r2
    2ba4:	1887c83a 	sub	r3,r3,r2
    2ba8:	d8c02b15 	stw	r3,172(sp)
    2bac:	d8802b17 	ldw	r2,172(sp)
    2bb0:	d9002a17 	ldw	r4,168(sp)
    2bb4:	1100010e 	bge	r2,r4,2bbc <___vfprintf_internal_r+0x76c>
    2bb8:	2005883a 	mov	r2,r4
    2bbc:	d8802915 	stw	r2,164(sp)
    2bc0:	d8003215 	stw	zero,200(sp)
    2bc4:	e7003fcc 	andi	fp,fp,255
    2bc8:	e700201c 	xori	fp,fp,128
    2bcc:	e73fe004 	addi	fp,fp,-128
    2bd0:	e0000326 	beq	fp,zero,2be0 <___vfprintf_internal_r+0x790>
    2bd4:	d8c02917 	ldw	r3,164(sp)
    2bd8:	18c00044 	addi	r3,r3,1
    2bdc:	d8c02915 	stw	r3,164(sp)
    2be0:	90c0008c 	andi	r3,r18,2
    2be4:	d8c02c15 	stw	r3,176(sp)
    2be8:	18000326 	beq	r3,zero,2bf8 <___vfprintf_internal_r+0x7a8>
    2bec:	d8c02917 	ldw	r3,164(sp)
    2bf0:	18c00084 	addi	r3,r3,2
    2bf4:	d8c02915 	stw	r3,164(sp)
    2bf8:	90c0210c 	andi	r3,r18,132
    2bfc:	d8c03015 	stw	r3,192(sp)
    2c00:	1801c51e 	bne	r3,zero,3318 <___vfprintf_internal_r+0xec8>
    2c04:	d9003117 	ldw	r4,196(sp)
    2c08:	d8c02917 	ldw	r3,164(sp)
    2c0c:	20e7c83a 	sub	r19,r4,r3
    2c10:	04c1c10e 	bge	zero,r19,3318 <___vfprintf_internal_r+0xec8>
    2c14:	02400404 	movi	r9,16
    2c18:	d8c02017 	ldw	r3,128(sp)
    2c1c:	d8801f17 	ldw	r2,124(sp)
    2c20:	4cc52f0e 	bge	r9,r19,40e0 <___vfprintf_internal_r+0x1c90>
    2c24:	01400074 	movhi	r5,1
    2c28:	29486d84 	addi	r5,r5,8630
    2c2c:	dc403b15 	stw	r17,236(sp)
    2c30:	d9403515 	stw	r5,212(sp)
    2c34:	9823883a 	mov	r17,r19
    2c38:	482d883a 	mov	r22,r9
    2c3c:	9027883a 	mov	r19,r18
    2c40:	070001c4 	movi	fp,7
    2c44:	8025883a 	mov	r18,r16
    2c48:	dc002d17 	ldw	r16,180(sp)
    2c4c:	00000306 	br	2c5c <___vfprintf_internal_r+0x80c>
    2c50:	8c7ffc04 	addi	r17,r17,-16
    2c54:	42000204 	addi	r8,r8,8
    2c58:	b440130e 	bge	r22,r17,2ca8 <___vfprintf_internal_r+0x858>
    2c5c:	01000074 	movhi	r4,1
    2c60:	18c00404 	addi	r3,r3,16
    2c64:	10800044 	addi	r2,r2,1
    2c68:	21086d84 	addi	r4,r4,8630
    2c6c:	41000015 	stw	r4,0(r8)
    2c70:	45800115 	stw	r22,4(r8)
    2c74:	d8c02015 	stw	r3,128(sp)
    2c78:	d8801f15 	stw	r2,124(sp)
    2c7c:	e0bff40e 	bge	fp,r2,2c50 <___vfprintf_internal_r+0x800>
    2c80:	d9801e04 	addi	r6,sp,120
    2c84:	b80b883a 	mov	r5,r23
    2c88:	8009883a 	mov	r4,r16
    2c8c:	0009c300 	call	9c30 <__sprint_r>
    2c90:	103ef31e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    2c94:	8c7ffc04 	addi	r17,r17,-16
    2c98:	d8c02017 	ldw	r3,128(sp)
    2c9c:	d8801f17 	ldw	r2,124(sp)
    2ca0:	da000404 	addi	r8,sp,16
    2ca4:	b47fed16 	blt	r22,r17,2c5c <___vfprintf_internal_r+0x80c>
    2ca8:	9021883a 	mov	r16,r18
    2cac:	9825883a 	mov	r18,r19
    2cb0:	8827883a 	mov	r19,r17
    2cb4:	dc403b17 	ldw	r17,236(sp)
    2cb8:	d9403517 	ldw	r5,212(sp)
    2cbc:	98c7883a 	add	r3,r19,r3
    2cc0:	10800044 	addi	r2,r2,1
    2cc4:	41400015 	stw	r5,0(r8)
    2cc8:	44c00115 	stw	r19,4(r8)
    2ccc:	d8c02015 	stw	r3,128(sp)
    2cd0:	d8801f15 	stw	r2,124(sp)
    2cd4:	010001c4 	movi	r4,7
    2cd8:	2082c516 	blt	r4,r2,37f0 <___vfprintf_internal_r+0x13a0>
    2cdc:	df002787 	ldb	fp,158(sp)
    2ce0:	42000204 	addi	r8,r8,8
    2ce4:	e0000c26 	beq	fp,zero,2d18 <___vfprintf_internal_r+0x8c8>
    2ce8:	d8801f17 	ldw	r2,124(sp)
    2cec:	d9002784 	addi	r4,sp,158
    2cf0:	18c00044 	addi	r3,r3,1
    2cf4:	10800044 	addi	r2,r2,1
    2cf8:	41000015 	stw	r4,0(r8)
    2cfc:	01000044 	movi	r4,1
    2d00:	41000115 	stw	r4,4(r8)
    2d04:	d8c02015 	stw	r3,128(sp)
    2d08:	d8801f15 	stw	r2,124(sp)
    2d0c:	010001c4 	movi	r4,7
    2d10:	20825e16 	blt	r4,r2,368c <___vfprintf_internal_r+0x123c>
    2d14:	42000204 	addi	r8,r8,8
    2d18:	d8802c17 	ldw	r2,176(sp)
    2d1c:	10000c26 	beq	r2,zero,2d50 <___vfprintf_internal_r+0x900>
    2d20:	d8801f17 	ldw	r2,124(sp)
    2d24:	d9002704 	addi	r4,sp,156
    2d28:	18c00084 	addi	r3,r3,2
    2d2c:	10800044 	addi	r2,r2,1
    2d30:	41000015 	stw	r4,0(r8)
    2d34:	01000084 	movi	r4,2
    2d38:	41000115 	stw	r4,4(r8)
    2d3c:	d8c02015 	stw	r3,128(sp)
    2d40:	d8801f15 	stw	r2,124(sp)
    2d44:	010001c4 	movi	r4,7
    2d48:	20825816 	blt	r4,r2,36ac <___vfprintf_internal_r+0x125c>
    2d4c:	42000204 	addi	r8,r8,8
    2d50:	d9003017 	ldw	r4,192(sp)
    2d54:	00802004 	movi	r2,128
    2d58:	2081bb26 	beq	r4,r2,3448 <___vfprintf_internal_r+0xff8>
    2d5c:	d9402a17 	ldw	r5,168(sp)
    2d60:	d8802b17 	ldw	r2,172(sp)
    2d64:	28adc83a 	sub	r22,r5,r2
    2d68:	0580310e 	bge	zero,r22,2e30 <___vfprintf_internal_r+0x9e0>
    2d6c:	07000404 	movi	fp,16
    2d70:	d8801f17 	ldw	r2,124(sp)
    2d74:	e584360e 	bge	fp,r22,3e50 <___vfprintf_internal_r+0x1a00>
    2d78:	01400074 	movhi	r5,1
    2d7c:	29486984 	addi	r5,r5,8614
    2d80:	dc402a15 	stw	r17,168(sp)
    2d84:	d9402c15 	stw	r5,176(sp)
    2d88:	b023883a 	mov	r17,r22
    2d8c:	04c001c4 	movi	r19,7
    2d90:	a82d883a 	mov	r22,r21
    2d94:	902b883a 	mov	r21,r18
    2d98:	8025883a 	mov	r18,r16
    2d9c:	dc002d17 	ldw	r16,180(sp)
    2da0:	00000306 	br	2db0 <___vfprintf_internal_r+0x960>
    2da4:	8c7ffc04 	addi	r17,r17,-16
    2da8:	42000204 	addi	r8,r8,8
    2dac:	e440110e 	bge	fp,r17,2df4 <___vfprintf_internal_r+0x9a4>
    2db0:	18c00404 	addi	r3,r3,16
    2db4:	10800044 	addi	r2,r2,1
    2db8:	45000015 	stw	r20,0(r8)
    2dbc:	47000115 	stw	fp,4(r8)
    2dc0:	d8c02015 	stw	r3,128(sp)
    2dc4:	d8801f15 	stw	r2,124(sp)
    2dc8:	98bff60e 	bge	r19,r2,2da4 <___vfprintf_internal_r+0x954>
    2dcc:	d9801e04 	addi	r6,sp,120
    2dd0:	b80b883a 	mov	r5,r23
    2dd4:	8009883a 	mov	r4,r16
    2dd8:	0009c300 	call	9c30 <__sprint_r>
    2ddc:	103ea01e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    2de0:	8c7ffc04 	addi	r17,r17,-16
    2de4:	d8c02017 	ldw	r3,128(sp)
    2de8:	d8801f17 	ldw	r2,124(sp)
    2dec:	da000404 	addi	r8,sp,16
    2df0:	e47fef16 	blt	fp,r17,2db0 <___vfprintf_internal_r+0x960>
    2df4:	9021883a 	mov	r16,r18
    2df8:	a825883a 	mov	r18,r21
    2dfc:	b02b883a 	mov	r21,r22
    2e00:	882d883a 	mov	r22,r17
    2e04:	dc402a17 	ldw	r17,168(sp)
    2e08:	d9002c17 	ldw	r4,176(sp)
    2e0c:	1d87883a 	add	r3,r3,r22
    2e10:	10800044 	addi	r2,r2,1
    2e14:	41000015 	stw	r4,0(r8)
    2e18:	45800115 	stw	r22,4(r8)
    2e1c:	d8c02015 	stw	r3,128(sp)
    2e20:	d8801f15 	stw	r2,124(sp)
    2e24:	010001c4 	movi	r4,7
    2e28:	20821016 	blt	r4,r2,366c <___vfprintf_internal_r+0x121c>
    2e2c:	42000204 	addi	r8,r8,8
    2e30:	9080400c 	andi	r2,r18,256
    2e34:	10013a1e 	bne	r2,zero,3320 <___vfprintf_internal_r+0xed0>
    2e38:	d9402b17 	ldw	r5,172(sp)
    2e3c:	d8801f17 	ldw	r2,124(sp)
    2e40:	44000015 	stw	r16,0(r8)
    2e44:	1947883a 	add	r3,r3,r5
    2e48:	10800044 	addi	r2,r2,1
    2e4c:	41400115 	stw	r5,4(r8)
    2e50:	d8c02015 	stw	r3,128(sp)
    2e54:	d8801f15 	stw	r2,124(sp)
    2e58:	010001c4 	movi	r4,7
    2e5c:	2081f516 	blt	r4,r2,3634 <___vfprintf_internal_r+0x11e4>
    2e60:	42000204 	addi	r8,r8,8
    2e64:	9480010c 	andi	r18,r18,4
    2e68:	90003226 	beq	r18,zero,2f34 <___vfprintf_internal_r+0xae4>
    2e6c:	d9403117 	ldw	r5,196(sp)
    2e70:	d8802917 	ldw	r2,164(sp)
    2e74:	28a1c83a 	sub	r16,r5,r2
    2e78:	04002e0e 	bge	zero,r16,2f34 <___vfprintf_internal_r+0xae4>
    2e7c:	04400404 	movi	r17,16
    2e80:	d8801f17 	ldw	r2,124(sp)
    2e84:	8c04c40e 	bge	r17,r16,4198 <___vfprintf_internal_r+0x1d48>
    2e88:	01400074 	movhi	r5,1
    2e8c:	29486d84 	addi	r5,r5,8630
    2e90:	d9403515 	stw	r5,212(sp)
    2e94:	048001c4 	movi	r18,7
    2e98:	dcc02d17 	ldw	r19,180(sp)
    2e9c:	00000306 	br	2eac <___vfprintf_internal_r+0xa5c>
    2ea0:	843ffc04 	addi	r16,r16,-16
    2ea4:	42000204 	addi	r8,r8,8
    2ea8:	8c00130e 	bge	r17,r16,2ef8 <___vfprintf_internal_r+0xaa8>
    2eac:	01000074 	movhi	r4,1
    2eb0:	18c00404 	addi	r3,r3,16
    2eb4:	10800044 	addi	r2,r2,1
    2eb8:	21086d84 	addi	r4,r4,8630
    2ebc:	41000015 	stw	r4,0(r8)
    2ec0:	44400115 	stw	r17,4(r8)
    2ec4:	d8c02015 	stw	r3,128(sp)
    2ec8:	d8801f15 	stw	r2,124(sp)
    2ecc:	90bff40e 	bge	r18,r2,2ea0 <___vfprintf_internal_r+0xa50>
    2ed0:	d9801e04 	addi	r6,sp,120
    2ed4:	b80b883a 	mov	r5,r23
    2ed8:	9809883a 	mov	r4,r19
    2edc:	0009c300 	call	9c30 <__sprint_r>
    2ee0:	103e5f1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    2ee4:	843ffc04 	addi	r16,r16,-16
    2ee8:	d8c02017 	ldw	r3,128(sp)
    2eec:	d8801f17 	ldw	r2,124(sp)
    2ef0:	da000404 	addi	r8,sp,16
    2ef4:	8c3fed16 	blt	r17,r16,2eac <___vfprintf_internal_r+0xa5c>
    2ef8:	d9403517 	ldw	r5,212(sp)
    2efc:	1c07883a 	add	r3,r3,r16
    2f00:	10800044 	addi	r2,r2,1
    2f04:	41400015 	stw	r5,0(r8)
    2f08:	44000115 	stw	r16,4(r8)
    2f0c:	d8c02015 	stw	r3,128(sp)
    2f10:	d8801f15 	stw	r2,124(sp)
    2f14:	010001c4 	movi	r4,7
    2f18:	2080060e 	bge	r4,r2,2f34 <___vfprintf_internal_r+0xae4>
    2f1c:	d9002d17 	ldw	r4,180(sp)
    2f20:	d9801e04 	addi	r6,sp,120
    2f24:	b80b883a 	mov	r5,r23
    2f28:	0009c300 	call	9c30 <__sprint_r>
    2f2c:	103e4c1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    2f30:	d8c02017 	ldw	r3,128(sp)
    2f34:	d8803117 	ldw	r2,196(sp)
    2f38:	d9002917 	ldw	r4,164(sp)
    2f3c:	1100010e 	bge	r2,r4,2f44 <___vfprintf_internal_r+0xaf4>
    2f40:	2005883a 	mov	r2,r4
    2f44:	d9402f17 	ldw	r5,188(sp)
    2f48:	288b883a 	add	r5,r5,r2
    2f4c:	d9402f15 	stw	r5,188(sp)
    2f50:	1801c01e 	bne	r3,zero,3654 <___vfprintf_internal_r+0x1204>
    2f54:	a8800007 	ldb	r2,0(r21)
    2f58:	d8001f15 	stw	zero,124(sp)
    2f5c:	da000404 	addi	r8,sp,16
    2f60:	103d751e 	bne	r2,zero,2538 <___vfprintf_internal_r+0xe8>
    2f64:	a823883a 	mov	r17,r21
    2f68:	003d8b06 	br	2598 <___vfprintf_internal_r+0x148>
    2f6c:	8025883a 	mov	r18,r16
    2f70:	dc002903 	ldbu	r16,164(sp)
    2f74:	e011883a 	mov	r8,fp
    2f78:	84003fcc 	andi	r16,r16,255
    2f7c:	8005e51e 	bne	r16,zero,4714 <___vfprintf_internal_r+0x22c4>
    2f80:	94800414 	ori	r18,r18,16
    2f84:	9080080c 	andi	r2,r18,32
    2f88:	10022b26 	beq	r2,zero,3838 <___vfprintf_internal_r+0x13e8>
    2f8c:	d9002e17 	ldw	r4,184(sp)
    2f90:	d9402a17 	ldw	r5,168(sp)
    2f94:	d8002785 	stb	zero,158(sp)
    2f98:	20c00204 	addi	r3,r4,8
    2f9c:	24c00017 	ldw	r19,0(r4)
    2fa0:	25800117 	ldw	r22,4(r4)
    2fa4:	28042e16 	blt	r5,zero,4060 <___vfprintf_internal_r+0x1c10>
    2fa8:	013fdfc4 	movi	r4,-129
    2fac:	9d84b03a 	or	r2,r19,r22
    2fb0:	d8c02e15 	stw	r3,184(sp)
    2fb4:	9124703a 	and	r18,r18,r4
    2fb8:	0039883a 	mov	fp,zero
    2fbc:	103e801e 	bne	r2,zero,29c0 <___vfprintf_internal_r+0x570>
    2fc0:	d9002a17 	ldw	r4,168(sp)
    2fc4:	2002e01e 	bne	r4,zero,3b48 <___vfprintf_internal_r+0x16f8>
    2fc8:	d8002a15 	stw	zero,168(sp)
    2fcc:	d8002b15 	stw	zero,172(sp)
    2fd0:	dc001e04 	addi	r16,sp,120
    2fd4:	003ef506 	br	2bac <___vfprintf_internal_r+0x75c>
    2fd8:	8025883a 	mov	r18,r16
    2fdc:	dc002903 	ldbu	r16,164(sp)
    2fe0:	e011883a 	mov	r8,fp
    2fe4:	84003fcc 	andi	r16,r16,255
    2fe8:	8005ba1e 	bne	r16,zero,46d4 <___vfprintf_internal_r+0x2284>
    2fec:	01000074 	movhi	r4,1
    2ff0:	21085d04 	addi	r4,r4,8564
    2ff4:	d9003915 	stw	r4,228(sp)
    2ff8:	9080080c 	andi	r2,r18,32
    2ffc:	10006126 	beq	r2,zero,3184 <___vfprintf_internal_r+0xd34>
    3000:	d9402e17 	ldw	r5,184(sp)
    3004:	2cc00017 	ldw	r19,0(r5)
    3008:	2d800117 	ldw	r22,4(r5)
    300c:	29400204 	addi	r5,r5,8
    3010:	d9402e15 	stw	r5,184(sp)
    3014:	9080004c 	andi	r2,r18,1
    3018:	1001ac26 	beq	r2,zero,36cc <___vfprintf_internal_r+0x127c>
    301c:	9d84b03a 	or	r2,r19,r22
    3020:	10038526 	beq	r2,zero,3e38 <___vfprintf_internal_r+0x19e8>
    3024:	d8c02a17 	ldw	r3,168(sp)
    3028:	00800c04 	movi	r2,48
    302c:	d8802705 	stb	r2,156(sp)
    3030:	dc402745 	stb	r17,157(sp)
    3034:	d8002785 	stb	zero,158(sp)
    3038:	90800094 	ori	r2,r18,2
    303c:	18047916 	blt	r3,zero,4224 <___vfprintf_internal_r+0x1dd4>
    3040:	00bfdfc4 	movi	r2,-129
    3044:	90a4703a 	and	r18,r18,r2
    3048:	94800094 	ori	r18,r18,2
    304c:	0039883a 	mov	fp,zero
    3050:	d9003917 	ldw	r4,228(sp)
    3054:	dc001e04 	addi	r16,sp,120
    3058:	988003cc 	andi	r2,r19,15
    305c:	b006973a 	slli	r3,r22,28
    3060:	2085883a 	add	r2,r4,r2
    3064:	9826d13a 	srli	r19,r19,4
    3068:	10800003 	ldbu	r2,0(r2)
    306c:	b02cd13a 	srli	r22,r22,4
    3070:	843fffc4 	addi	r16,r16,-1
    3074:	1ce6b03a 	or	r19,r3,r19
    3078:	80800005 	stb	r2,0(r16)
    307c:	9d84b03a 	or	r2,r19,r22
    3080:	103ff51e 	bne	r2,zero,3058 <___vfprintf_internal_r+0xc08>
    3084:	d8c02817 	ldw	r3,160(sp)
    3088:	1c07c83a 	sub	r3,r3,r16
    308c:	d8c02b15 	stw	r3,172(sp)
    3090:	003ec606 	br	2bac <___vfprintf_internal_r+0x75c>
    3094:	8025883a 	mov	r18,r16
    3098:	dc002903 	ldbu	r16,164(sp)
    309c:	e011883a 	mov	r8,fp
    30a0:	84003fcc 	andi	r16,r16,255
    30a4:	803e9626 	beq	r16,zero,2b00 <___vfprintf_internal_r+0x6b0>
    30a8:	d8c02b03 	ldbu	r3,172(sp)
    30ac:	d8c02785 	stb	r3,158(sp)
    30b0:	003e9306 	br	2b00 <___vfprintf_internal_r+0x6b0>
    30b4:	00c00044 	movi	r3,1
    30b8:	d8c02905 	stb	r3,164(sp)
    30bc:	00c00ac4 	movi	r3,43
    30c0:	d8c02b05 	stb	r3,172(sp)
    30c4:	ac400007 	ldb	r17,0(r21)
    30c8:	003d4306 	br	25d8 <___vfprintf_internal_r+0x188>
    30cc:	84000814 	ori	r16,r16,32
    30d0:	ac400007 	ldb	r17,0(r21)
    30d4:	003d4006 	br	25d8 <___vfprintf_internal_r+0x188>
    30d8:	d8802e17 	ldw	r2,184(sp)
    30dc:	8025883a 	mov	r18,r16
    30e0:	d8002785 	stb	zero,158(sp)
    30e4:	14000017 	ldw	r16,0(r2)
    30e8:	e011883a 	mov	r8,fp
    30ec:	14c00104 	addi	r19,r2,4
    30f0:	80042d26 	beq	r16,zero,41a8 <___vfprintf_internal_r+0x1d58>
    30f4:	d8c02a17 	ldw	r3,168(sp)
    30f8:	1803e416 	blt	r3,zero,408c <___vfprintf_internal_r+0x1c3c>
    30fc:	180d883a 	mov	r6,r3
    3100:	000b883a 	mov	r5,zero
    3104:	8009883a 	mov	r4,r16
    3108:	df003d15 	stw	fp,244(sp)
    310c:	0007d880 	call	7d88 <memchr>
    3110:	da003d17 	ldw	r8,244(sp)
    3114:	10046826 	beq	r2,zero,42b8 <___vfprintf_internal_r+0x1e68>
    3118:	1405c83a 	sub	r2,r2,r16
    311c:	d8802b15 	stw	r2,172(sp)
    3120:	1003e016 	blt	r2,zero,40a4 <___vfprintf_internal_r+0x1c54>
    3124:	df002783 	ldbu	fp,158(sp)
    3128:	d8802915 	stw	r2,164(sp)
    312c:	dcc02e15 	stw	r19,184(sp)
    3130:	d8002a15 	stw	zero,168(sp)
    3134:	d8003215 	stw	zero,200(sp)
    3138:	003ea206 	br	2bc4 <___vfprintf_internal_r+0x774>
    313c:	8025883a 	mov	r18,r16
    3140:	dc002903 	ldbu	r16,164(sp)
    3144:	e011883a 	mov	r8,fp
    3148:	84003fcc 	andi	r16,r16,255
    314c:	803f8d26 	beq	r16,zero,2f84 <___vfprintf_internal_r+0xb34>
    3150:	d8c02b03 	ldbu	r3,172(sp)
    3154:	d8c02785 	stb	r3,158(sp)
    3158:	003f8a06 	br	2f84 <___vfprintf_internal_r+0xb34>
    315c:	8025883a 	mov	r18,r16
    3160:	dc002903 	ldbu	r16,164(sp)
    3164:	e011883a 	mov	r8,fp
    3168:	84003fcc 	andi	r16,r16,255
    316c:	8005661e 	bne	r16,zero,4708 <___vfprintf_internal_r+0x22b8>
    3170:	01000074 	movhi	r4,1
    3174:	21086204 	addi	r4,r4,8584
    3178:	d9003915 	stw	r4,228(sp)
    317c:	9080080c 	andi	r2,r18,32
    3180:	103f9f1e 	bne	r2,zero,3000 <___vfprintf_internal_r+0xbb0>
    3184:	9080040c 	andi	r2,r18,16
    3188:	1002eb26 	beq	r2,zero,3d38 <___vfprintf_internal_r+0x18e8>
    318c:	d8802e17 	ldw	r2,184(sp)
    3190:	002d883a 	mov	r22,zero
    3194:	14c00017 	ldw	r19,0(r2)
    3198:	10800104 	addi	r2,r2,4
    319c:	d8802e15 	stw	r2,184(sp)
    31a0:	003f9c06 	br	3014 <___vfprintf_internal_r+0xbc4>
    31a4:	d8802b07 	ldb	r2,172(sp)
    31a8:	1002e11e 	bne	r2,zero,3d30 <___vfprintf_internal_r+0x18e0>
    31ac:	00c00044 	movi	r3,1
    31b0:	d8c02905 	stb	r3,164(sp)
    31b4:	00c00804 	movi	r3,32
    31b8:	d8c02b05 	stb	r3,172(sp)
    31bc:	ac400007 	ldb	r17,0(r21)
    31c0:	003d0506 	br	25d8 <___vfprintf_internal_r+0x188>
    31c4:	84000054 	ori	r16,r16,1
    31c8:	ac400007 	ldb	r17,0(r21)
    31cc:	003d0206 	br	25d8 <___vfprintf_internal_r+0x188>
    31d0:	8025883a 	mov	r18,r16
    31d4:	dc002903 	ldbu	r16,164(sp)
    31d8:	e011883a 	mov	r8,fp
    31dc:	84003fcc 	andi	r16,r16,255
    31e0:	803de726 	beq	r16,zero,2980 <___vfprintf_internal_r+0x530>
    31e4:	d8c02b03 	ldbu	r3,172(sp)
    31e8:	d8c02785 	stb	r3,158(sp)
    31ec:	003de406 	br	2980 <___vfprintf_internal_r+0x530>
    31f0:	84001014 	ori	r16,r16,64
    31f4:	ac400007 	ldb	r17,0(r21)
    31f8:	003cf706 	br	25d8 <___vfprintf_internal_r+0x188>
    31fc:	ac400007 	ldb	r17,0(r21)
    3200:	00801b04 	movi	r2,108
    3204:	88838f26 	beq	r17,r2,4044 <___vfprintf_internal_r+0x1bf4>
    3208:	84000414 	ori	r16,r16,16
    320c:	003cf206 	br	25d8 <___vfprintf_internal_r+0x188>
    3210:	8025883a 	mov	r18,r16
    3214:	dc002903 	ldbu	r16,164(sp)
    3218:	e011883a 	mov	r8,fp
    321c:	84003fcc 	andi	r16,r16,255
    3220:	80053f1e 	bne	r16,zero,4720 <___vfprintf_internal_r+0x22d0>
    3224:	9080080c 	andi	r2,r18,32
    3228:	1002d226 	beq	r2,zero,3d74 <___vfprintf_internal_r+0x1924>
    322c:	d9002e17 	ldw	r4,184(sp)
    3230:	d9402f17 	ldw	r5,188(sp)
    3234:	20800017 	ldw	r2,0(r4)
    3238:	2807d7fa 	srai	r3,r5,31
    323c:	21000104 	addi	r4,r4,4
    3240:	d9002e15 	stw	r4,184(sp)
    3244:	11400015 	stw	r5,0(r2)
    3248:	10c00115 	stw	r3,4(r2)
    324c:	003cb806 	br	2530 <___vfprintf_internal_r+0xe0>
    3250:	d8c02e17 	ldw	r3,184(sp)
    3254:	d9002e17 	ldw	r4,184(sp)
    3258:	8025883a 	mov	r18,r16
    325c:	18800017 	ldw	r2,0(r3)
    3260:	21000104 	addi	r4,r4,4
    3264:	00c00044 	movi	r3,1
    3268:	e011883a 	mov	r8,fp
    326c:	d8c02915 	stw	r3,164(sp)
    3270:	d8002785 	stb	zero,158(sp)
    3274:	d8801405 	stb	r2,80(sp)
    3278:	d9002e15 	stw	r4,184(sp)
    327c:	d8c02b15 	stw	r3,172(sp)
    3280:	d8002a15 	stw	zero,168(sp)
    3284:	d8003215 	stw	zero,200(sp)
    3288:	dc001404 	addi	r16,sp,80
    328c:	0039883a 	mov	fp,zero
    3290:	003e5306 	br	2be0 <___vfprintf_internal_r+0x790>
    3294:	01000074 	movhi	r4,1
    3298:	21086204 	addi	r4,r4,8584
    329c:	0039883a 	mov	fp,zero
    32a0:	d9003915 	stw	r4,228(sp)
    32a4:	04401e04 	movi	r17,120
    32a8:	003f6906 	br	3050 <___vfprintf_internal_r+0xc00>
    32ac:	8025883a 	mov	r18,r16
    32b0:	dc002903 	ldbu	r16,164(sp)
    32b4:	e011883a 	mov	r8,fp
    32b8:	84003fcc 	andi	r16,r16,255
    32bc:	8005081e 	bne	r16,zero,46e0 <___vfprintf_internal_r+0x2290>
    32c0:	883d6126 	beq	r17,zero,2848 <___vfprintf_internal_r+0x3f8>
    32c4:	00c00044 	movi	r3,1
    32c8:	d8c02915 	stw	r3,164(sp)
    32cc:	dc401405 	stb	r17,80(sp)
    32d0:	d8002785 	stb	zero,158(sp)
    32d4:	003fe906 	br	327c <___vfprintf_internal_r+0xe2c>
    32d8:	01400074 	movhi	r5,1
    32dc:	29486204 	addi	r5,r5,8584
    32e0:	d9403915 	stw	r5,228(sp)
    32e4:	d8c02e15 	stw	r3,184(sp)
    32e8:	1025883a 	mov	r18,r2
    32ec:	04401e04 	movi	r17,120
    32f0:	9d84b03a 	or	r2,r19,r22
    32f4:	1000fc1e 	bne	r2,zero,36e8 <___vfprintf_internal_r+0x1298>
    32f8:	0039883a 	mov	fp,zero
    32fc:	00800084 	movi	r2,2
    3300:	10803fcc 	andi	r2,r2,255
    3304:	00c00044 	movi	r3,1
    3308:	10c20f26 	beq	r2,r3,3b48 <___vfprintf_internal_r+0x16f8>
    330c:	00c00084 	movi	r3,2
    3310:	10fd3326 	beq	r2,r3,27e0 <___vfprintf_internal_r+0x390>
    3314:	003e0b06 	br	2b44 <___vfprintf_internal_r+0x6f4>
    3318:	d8c02017 	ldw	r3,128(sp)
    331c:	003e7106 	br	2ce4 <___vfprintf_internal_r+0x894>
    3320:	00801944 	movi	r2,101
    3324:	14407e0e 	bge	r2,r17,3520 <___vfprintf_internal_r+0x10d0>
    3328:	d9003617 	ldw	r4,216(sp)
    332c:	d9403817 	ldw	r5,224(sp)
    3330:	000d883a 	mov	r6,zero
    3334:	000f883a 	mov	r7,zero
    3338:	d8c03c15 	stw	r3,240(sp)
    333c:	da003d15 	stw	r8,244(sp)
    3340:	000db900 	call	db90 <__eqdf2>
    3344:	d8c03c17 	ldw	r3,240(sp)
    3348:	da003d17 	ldw	r8,244(sp)
    334c:	1000f71e 	bne	r2,zero,372c <___vfprintf_internal_r+0x12dc>
    3350:	d8801f17 	ldw	r2,124(sp)
    3354:	01000074 	movhi	r4,1
    3358:	21086904 	addi	r4,r4,8612
    335c:	18c00044 	addi	r3,r3,1
    3360:	10800044 	addi	r2,r2,1
    3364:	41000015 	stw	r4,0(r8)
    3368:	01000044 	movi	r4,1
    336c:	41000115 	stw	r4,4(r8)
    3370:	d8c02015 	stw	r3,128(sp)
    3374:	d8801f15 	stw	r2,124(sp)
    3378:	010001c4 	movi	r4,7
    337c:	2082b816 	blt	r4,r2,3e60 <___vfprintf_internal_r+0x1a10>
    3380:	42000204 	addi	r8,r8,8
    3384:	d8802617 	ldw	r2,152(sp)
    3388:	d9403317 	ldw	r5,204(sp)
    338c:	11400216 	blt	r2,r5,3398 <___vfprintf_internal_r+0xf48>
    3390:	9080004c 	andi	r2,r18,1
    3394:	103eb326 	beq	r2,zero,2e64 <___vfprintf_internal_r+0xa14>
    3398:	d8803717 	ldw	r2,220(sp)
    339c:	d9003417 	ldw	r4,208(sp)
    33a0:	d9403717 	ldw	r5,220(sp)
    33a4:	1887883a 	add	r3,r3,r2
    33a8:	d8801f17 	ldw	r2,124(sp)
    33ac:	41000015 	stw	r4,0(r8)
    33b0:	41400115 	stw	r5,4(r8)
    33b4:	10800044 	addi	r2,r2,1
    33b8:	d8c02015 	stw	r3,128(sp)
    33bc:	d8801f15 	stw	r2,124(sp)
    33c0:	010001c4 	movi	r4,7
    33c4:	20832916 	blt	r4,r2,406c <___vfprintf_internal_r+0x1c1c>
    33c8:	42000204 	addi	r8,r8,8
    33cc:	d8803317 	ldw	r2,204(sp)
    33d0:	143fffc4 	addi	r16,r2,-1
    33d4:	043ea30e 	bge	zero,r16,2e64 <___vfprintf_internal_r+0xa14>
    33d8:	04400404 	movi	r17,16
    33dc:	d8801f17 	ldw	r2,124(sp)
    33e0:	8c00880e 	bge	r17,r16,3604 <___vfprintf_internal_r+0x11b4>
    33e4:	01400074 	movhi	r5,1
    33e8:	29486984 	addi	r5,r5,8614
    33ec:	d9402c15 	stw	r5,176(sp)
    33f0:	058001c4 	movi	r22,7
    33f4:	dcc02d17 	ldw	r19,180(sp)
    33f8:	00000306 	br	3408 <___vfprintf_internal_r+0xfb8>
    33fc:	42000204 	addi	r8,r8,8
    3400:	843ffc04 	addi	r16,r16,-16
    3404:	8c00820e 	bge	r17,r16,3610 <___vfprintf_internal_r+0x11c0>
    3408:	18c00404 	addi	r3,r3,16
    340c:	10800044 	addi	r2,r2,1
    3410:	45000015 	stw	r20,0(r8)
    3414:	44400115 	stw	r17,4(r8)
    3418:	d8c02015 	stw	r3,128(sp)
    341c:	d8801f15 	stw	r2,124(sp)
    3420:	b0bff60e 	bge	r22,r2,33fc <___vfprintf_internal_r+0xfac>
    3424:	d9801e04 	addi	r6,sp,120
    3428:	b80b883a 	mov	r5,r23
    342c:	9809883a 	mov	r4,r19
    3430:	0009c300 	call	9c30 <__sprint_r>
    3434:	103d0a1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3438:	d8c02017 	ldw	r3,128(sp)
    343c:	d8801f17 	ldw	r2,124(sp)
    3440:	da000404 	addi	r8,sp,16
    3444:	003fee06 	br	3400 <___vfprintf_internal_r+0xfb0>
    3448:	d9403117 	ldw	r5,196(sp)
    344c:	d8802917 	ldw	r2,164(sp)
    3450:	28adc83a 	sub	r22,r5,r2
    3454:	05be410e 	bge	zero,r22,2d5c <___vfprintf_internal_r+0x90c>
    3458:	07000404 	movi	fp,16
    345c:	d8801f17 	ldw	r2,124(sp)
    3460:	e5838f0e 	bge	fp,r22,42a0 <___vfprintf_internal_r+0x1e50>
    3464:	01400074 	movhi	r5,1
    3468:	29486984 	addi	r5,r5,8614
    346c:	dc403015 	stw	r17,192(sp)
    3470:	d9402c15 	stw	r5,176(sp)
    3474:	b023883a 	mov	r17,r22
    3478:	04c001c4 	movi	r19,7
    347c:	a82d883a 	mov	r22,r21
    3480:	902b883a 	mov	r21,r18
    3484:	8025883a 	mov	r18,r16
    3488:	dc002d17 	ldw	r16,180(sp)
    348c:	00000306 	br	349c <___vfprintf_internal_r+0x104c>
    3490:	8c7ffc04 	addi	r17,r17,-16
    3494:	42000204 	addi	r8,r8,8
    3498:	e440110e 	bge	fp,r17,34e0 <___vfprintf_internal_r+0x1090>
    349c:	18c00404 	addi	r3,r3,16
    34a0:	10800044 	addi	r2,r2,1
    34a4:	45000015 	stw	r20,0(r8)
    34a8:	47000115 	stw	fp,4(r8)
    34ac:	d8c02015 	stw	r3,128(sp)
    34b0:	d8801f15 	stw	r2,124(sp)
    34b4:	98bff60e 	bge	r19,r2,3490 <___vfprintf_internal_r+0x1040>
    34b8:	d9801e04 	addi	r6,sp,120
    34bc:	b80b883a 	mov	r5,r23
    34c0:	8009883a 	mov	r4,r16
    34c4:	0009c300 	call	9c30 <__sprint_r>
    34c8:	103ce51e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    34cc:	8c7ffc04 	addi	r17,r17,-16
    34d0:	d8c02017 	ldw	r3,128(sp)
    34d4:	d8801f17 	ldw	r2,124(sp)
    34d8:	da000404 	addi	r8,sp,16
    34dc:	e47fef16 	blt	fp,r17,349c <___vfprintf_internal_r+0x104c>
    34e0:	9021883a 	mov	r16,r18
    34e4:	a825883a 	mov	r18,r21
    34e8:	b02b883a 	mov	r21,r22
    34ec:	882d883a 	mov	r22,r17
    34f0:	dc403017 	ldw	r17,192(sp)
    34f4:	d9002c17 	ldw	r4,176(sp)
    34f8:	1d87883a 	add	r3,r3,r22
    34fc:	10800044 	addi	r2,r2,1
    3500:	41000015 	stw	r4,0(r8)
    3504:	45800115 	stw	r22,4(r8)
    3508:	d8c02015 	stw	r3,128(sp)
    350c:	d8801f15 	stw	r2,124(sp)
    3510:	010001c4 	movi	r4,7
    3514:	20818e16 	blt	r4,r2,3b50 <___vfprintf_internal_r+0x1700>
    3518:	42000204 	addi	r8,r8,8
    351c:	003e0f06 	br	2d5c <___vfprintf_internal_r+0x90c>
    3520:	d9403317 	ldw	r5,204(sp)
    3524:	00800044 	movi	r2,1
    3528:	18c00044 	addi	r3,r3,1
    352c:	1141530e 	bge	r2,r5,3a7c <___vfprintf_internal_r+0x162c>
    3530:	dc401f17 	ldw	r17,124(sp)
    3534:	00800044 	movi	r2,1
    3538:	40800115 	stw	r2,4(r8)
    353c:	8c400044 	addi	r17,r17,1
    3540:	44000015 	stw	r16,0(r8)
    3544:	d8c02015 	stw	r3,128(sp)
    3548:	dc401f15 	stw	r17,124(sp)
    354c:	008001c4 	movi	r2,7
    3550:	14416b16 	blt	r2,r17,3b00 <___vfprintf_internal_r+0x16b0>
    3554:	42000204 	addi	r8,r8,8
    3558:	d8803717 	ldw	r2,220(sp)
    355c:	d9003417 	ldw	r4,208(sp)
    3560:	8c400044 	addi	r17,r17,1
    3564:	10c7883a 	add	r3,r2,r3
    3568:	40800115 	stw	r2,4(r8)
    356c:	41000015 	stw	r4,0(r8)
    3570:	d8c02015 	stw	r3,128(sp)
    3574:	dc401f15 	stw	r17,124(sp)
    3578:	008001c4 	movi	r2,7
    357c:	14416916 	blt	r2,r17,3b24 <___vfprintf_internal_r+0x16d4>
    3580:	45800204 	addi	r22,r8,8
    3584:	d9003617 	ldw	r4,216(sp)
    3588:	d9403817 	ldw	r5,224(sp)
    358c:	000d883a 	mov	r6,zero
    3590:	000f883a 	mov	r7,zero
    3594:	d8c03c15 	stw	r3,240(sp)
    3598:	000db900 	call	db90 <__eqdf2>
    359c:	d8c03c17 	ldw	r3,240(sp)
    35a0:	1000bc26 	beq	r2,zero,3894 <___vfprintf_internal_r+0x1444>
    35a4:	d9403317 	ldw	r5,204(sp)
    35a8:	84000044 	addi	r16,r16,1
    35ac:	8c400044 	addi	r17,r17,1
    35b0:	28bfffc4 	addi	r2,r5,-1
    35b4:	1887883a 	add	r3,r3,r2
    35b8:	b0800115 	stw	r2,4(r22)
    35bc:	b4000015 	stw	r16,0(r22)
    35c0:	d8c02015 	stw	r3,128(sp)
    35c4:	dc401f15 	stw	r17,124(sp)
    35c8:	008001c4 	movi	r2,7
    35cc:	14414316 	blt	r2,r17,3adc <___vfprintf_internal_r+0x168c>
    35d0:	b5800204 	addi	r22,r22,8
    35d4:	d9003a17 	ldw	r4,232(sp)
    35d8:	df0022c4 	addi	fp,sp,139
    35dc:	8c400044 	addi	r17,r17,1
    35e0:	20c7883a 	add	r3,r4,r3
    35e4:	b7000015 	stw	fp,0(r22)
    35e8:	b1000115 	stw	r4,4(r22)
    35ec:	d8c02015 	stw	r3,128(sp)
    35f0:	dc401f15 	stw	r17,124(sp)
    35f4:	008001c4 	movi	r2,7
    35f8:	14400e16 	blt	r2,r17,3634 <___vfprintf_internal_r+0x11e4>
    35fc:	b2000204 	addi	r8,r22,8
    3600:	003e1806 	br	2e64 <___vfprintf_internal_r+0xa14>
    3604:	01000074 	movhi	r4,1
    3608:	21086984 	addi	r4,r4,8614
    360c:	d9002c15 	stw	r4,176(sp)
    3610:	d9002c17 	ldw	r4,176(sp)
    3614:	1c07883a 	add	r3,r3,r16
    3618:	44000115 	stw	r16,4(r8)
    361c:	41000015 	stw	r4,0(r8)
    3620:	10800044 	addi	r2,r2,1
    3624:	d8c02015 	stw	r3,128(sp)
    3628:	d8801f15 	stw	r2,124(sp)
    362c:	010001c4 	movi	r4,7
    3630:	20be0b0e 	bge	r4,r2,2e60 <___vfprintf_internal_r+0xa10>
    3634:	d9002d17 	ldw	r4,180(sp)
    3638:	d9801e04 	addi	r6,sp,120
    363c:	b80b883a 	mov	r5,r23
    3640:	0009c300 	call	9c30 <__sprint_r>
    3644:	103c861e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3648:	d8c02017 	ldw	r3,128(sp)
    364c:	da000404 	addi	r8,sp,16
    3650:	003e0406 	br	2e64 <___vfprintf_internal_r+0xa14>
    3654:	d9002d17 	ldw	r4,180(sp)
    3658:	d9801e04 	addi	r6,sp,120
    365c:	b80b883a 	mov	r5,r23
    3660:	0009c300 	call	9c30 <__sprint_r>
    3664:	103e3b26 	beq	r2,zero,2f54 <___vfprintf_internal_r+0xb04>
    3668:	003c7d06 	br	2860 <___vfprintf_internal_r+0x410>
    366c:	d9002d17 	ldw	r4,180(sp)
    3670:	d9801e04 	addi	r6,sp,120
    3674:	b80b883a 	mov	r5,r23
    3678:	0009c300 	call	9c30 <__sprint_r>
    367c:	103c781e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3680:	d8c02017 	ldw	r3,128(sp)
    3684:	da000404 	addi	r8,sp,16
    3688:	003de906 	br	2e30 <___vfprintf_internal_r+0x9e0>
    368c:	d9002d17 	ldw	r4,180(sp)
    3690:	d9801e04 	addi	r6,sp,120
    3694:	b80b883a 	mov	r5,r23
    3698:	0009c300 	call	9c30 <__sprint_r>
    369c:	103c701e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    36a0:	d8c02017 	ldw	r3,128(sp)
    36a4:	da000404 	addi	r8,sp,16
    36a8:	003d9b06 	br	2d18 <___vfprintf_internal_r+0x8c8>
    36ac:	d9002d17 	ldw	r4,180(sp)
    36b0:	d9801e04 	addi	r6,sp,120
    36b4:	b80b883a 	mov	r5,r23
    36b8:	0009c300 	call	9c30 <__sprint_r>
    36bc:	103c681e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    36c0:	d8c02017 	ldw	r3,128(sp)
    36c4:	da000404 	addi	r8,sp,16
    36c8:	003da106 	br	2d50 <___vfprintf_internal_r+0x900>
    36cc:	d9402a17 	ldw	r5,168(sp)
    36d0:	d8002785 	stb	zero,158(sp)
    36d4:	283f0616 	blt	r5,zero,32f0 <___vfprintf_internal_r+0xea0>
    36d8:	00ffdfc4 	movi	r3,-129
    36dc:	9d84b03a 	or	r2,r19,r22
    36e0:	90e4703a 	and	r18,r18,r3
    36e4:	103c3b26 	beq	r2,zero,27d4 <___vfprintf_internal_r+0x384>
    36e8:	0039883a 	mov	fp,zero
    36ec:	003e5806 	br	3050 <___vfprintf_internal_r+0xc00>
    36f0:	9080040c 	andi	r2,r18,16
    36f4:	1001b326 	beq	r2,zero,3dc4 <___vfprintf_internal_r+0x1974>
    36f8:	d8c02e17 	ldw	r3,184(sp)
    36fc:	d9002a17 	ldw	r4,168(sp)
    3700:	d8002785 	stb	zero,158(sp)
    3704:	18800104 	addi	r2,r3,4
    3708:	1cc00017 	ldw	r19,0(r3)
    370c:	002d883a 	mov	r22,zero
    3710:	2001b516 	blt	r4,zero,3de8 <___vfprintf_internal_r+0x1998>
    3714:	00ffdfc4 	movi	r3,-129
    3718:	d8802e15 	stw	r2,184(sp)
    371c:	90e4703a 	and	r18,r18,r3
    3720:	983d0526 	beq	r19,zero,2b38 <___vfprintf_internal_r+0x6e8>
    3724:	0039883a 	mov	fp,zero
    3728:	003d0806 	br	2b4c <___vfprintf_internal_r+0x6fc>
    372c:	dc402617 	ldw	r17,152(sp)
    3730:	0441d30e 	bge	zero,r17,3e80 <___vfprintf_internal_r+0x1a30>
    3734:	dc403217 	ldw	r17,200(sp)
    3738:	d8803317 	ldw	r2,204(sp)
    373c:	1440010e 	bge	r2,r17,3744 <___vfprintf_internal_r+0x12f4>
    3740:	1023883a 	mov	r17,r2
    3744:	04400a0e 	bge	zero,r17,3770 <___vfprintf_internal_r+0x1320>
    3748:	d8801f17 	ldw	r2,124(sp)
    374c:	1c47883a 	add	r3,r3,r17
    3750:	44000015 	stw	r16,0(r8)
    3754:	10800044 	addi	r2,r2,1
    3758:	44400115 	stw	r17,4(r8)
    375c:	d8c02015 	stw	r3,128(sp)
    3760:	d8801f15 	stw	r2,124(sp)
    3764:	010001c4 	movi	r4,7
    3768:	20826516 	blt	r4,r2,4100 <___vfprintf_internal_r+0x1cb0>
    376c:	42000204 	addi	r8,r8,8
    3770:	88026116 	blt	r17,zero,40f8 <___vfprintf_internal_r+0x1ca8>
    3774:	d9003217 	ldw	r4,200(sp)
    3778:	2463c83a 	sub	r17,r4,r17
    377c:	04407b0e 	bge	zero,r17,396c <___vfprintf_internal_r+0x151c>
    3780:	05800404 	movi	r22,16
    3784:	d8801f17 	ldw	r2,124(sp)
    3788:	b4419d0e 	bge	r22,r17,3e00 <___vfprintf_internal_r+0x19b0>
    378c:	01000074 	movhi	r4,1
    3790:	21086984 	addi	r4,r4,8614
    3794:	d9002c15 	stw	r4,176(sp)
    3798:	070001c4 	movi	fp,7
    379c:	dcc02d17 	ldw	r19,180(sp)
    37a0:	00000306 	br	37b0 <___vfprintf_internal_r+0x1360>
    37a4:	42000204 	addi	r8,r8,8
    37a8:	8c7ffc04 	addi	r17,r17,-16
    37ac:	b441970e 	bge	r22,r17,3e0c <___vfprintf_internal_r+0x19bc>
    37b0:	18c00404 	addi	r3,r3,16
    37b4:	10800044 	addi	r2,r2,1
    37b8:	45000015 	stw	r20,0(r8)
    37bc:	45800115 	stw	r22,4(r8)
    37c0:	d8c02015 	stw	r3,128(sp)
    37c4:	d8801f15 	stw	r2,124(sp)
    37c8:	e0bff60e 	bge	fp,r2,37a4 <___vfprintf_internal_r+0x1354>
    37cc:	d9801e04 	addi	r6,sp,120
    37d0:	b80b883a 	mov	r5,r23
    37d4:	9809883a 	mov	r4,r19
    37d8:	0009c300 	call	9c30 <__sprint_r>
    37dc:	103c201e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    37e0:	d8c02017 	ldw	r3,128(sp)
    37e4:	d8801f17 	ldw	r2,124(sp)
    37e8:	da000404 	addi	r8,sp,16
    37ec:	003fee06 	br	37a8 <___vfprintf_internal_r+0x1358>
    37f0:	d9002d17 	ldw	r4,180(sp)
    37f4:	d9801e04 	addi	r6,sp,120
    37f8:	b80b883a 	mov	r5,r23
    37fc:	0009c300 	call	9c30 <__sprint_r>
    3800:	103c171e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3804:	d8c02017 	ldw	r3,128(sp)
    3808:	df002787 	ldb	fp,158(sp)
    380c:	da000404 	addi	r8,sp,16
    3810:	003d3406 	br	2ce4 <___vfprintf_internal_r+0x894>
    3814:	9080040c 	andi	r2,r18,16
    3818:	10016126 	beq	r2,zero,3da0 <___vfprintf_internal_r+0x1950>
    381c:	d9402e17 	ldw	r5,184(sp)
    3820:	2cc00017 	ldw	r19,0(r5)
    3824:	29400104 	addi	r5,r5,4
    3828:	d9402e15 	stw	r5,184(sp)
    382c:	982dd7fa 	srai	r22,r19,31
    3830:	b005883a 	mov	r2,r22
    3834:	003c5a06 	br	29a0 <___vfprintf_internal_r+0x550>
    3838:	9080040c 	andi	r2,r18,16
    383c:	10003526 	beq	r2,zero,3914 <___vfprintf_internal_r+0x14c4>
    3840:	d8c02e17 	ldw	r3,184(sp)
    3844:	d9002a17 	ldw	r4,168(sp)
    3848:	d8002785 	stb	zero,158(sp)
    384c:	18800104 	addi	r2,r3,4
    3850:	1cc00017 	ldw	r19,0(r3)
    3854:	002d883a 	mov	r22,zero
    3858:	20003716 	blt	r4,zero,3938 <___vfprintf_internal_r+0x14e8>
    385c:	00ffdfc4 	movi	r3,-129
    3860:	d8802e15 	stw	r2,184(sp)
    3864:	90e4703a 	and	r18,r18,r3
    3868:	0039883a 	mov	fp,zero
    386c:	983dd426 	beq	r19,zero,2fc0 <___vfprintf_internal_r+0xb70>
    3870:	00800244 	movi	r2,9
    3874:	14fc5336 	bltu	r2,r19,29c4 <___vfprintf_internal_r+0x574>
    3878:	d8c02817 	ldw	r3,160(sp)
    387c:	dc001dc4 	addi	r16,sp,119
    3880:	9cc00c04 	addi	r19,r19,48
    3884:	1c07c83a 	sub	r3,r3,r16
    3888:	dcc01dc5 	stb	r19,119(sp)
    388c:	d8c02b15 	stw	r3,172(sp)
    3890:	003cc606 	br	2bac <___vfprintf_internal_r+0x75c>
    3894:	d8803317 	ldw	r2,204(sp)
    3898:	143fffc4 	addi	r16,r2,-1
    389c:	043f4d0e 	bge	zero,r16,35d4 <___vfprintf_internal_r+0x1184>
    38a0:	07000404 	movi	fp,16
    38a4:	e400810e 	bge	fp,r16,3aac <___vfprintf_internal_r+0x165c>
    38a8:	01400074 	movhi	r5,1
    38ac:	29486984 	addi	r5,r5,8614
    38b0:	d9402c15 	stw	r5,176(sp)
    38b4:	01c001c4 	movi	r7,7
    38b8:	dcc02d17 	ldw	r19,180(sp)
    38bc:	00000306 	br	38cc <___vfprintf_internal_r+0x147c>
    38c0:	b5800204 	addi	r22,r22,8
    38c4:	843ffc04 	addi	r16,r16,-16
    38c8:	e4007b0e 	bge	fp,r16,3ab8 <___vfprintf_internal_r+0x1668>
    38cc:	18c00404 	addi	r3,r3,16
    38d0:	8c400044 	addi	r17,r17,1
    38d4:	b5000015 	stw	r20,0(r22)
    38d8:	b7000115 	stw	fp,4(r22)
    38dc:	d8c02015 	stw	r3,128(sp)
    38e0:	dc401f15 	stw	r17,124(sp)
    38e4:	3c7ff60e 	bge	r7,r17,38c0 <___vfprintf_internal_r+0x1470>
    38e8:	d9801e04 	addi	r6,sp,120
    38ec:	b80b883a 	mov	r5,r23
    38f0:	9809883a 	mov	r4,r19
    38f4:	d9c03c15 	stw	r7,240(sp)
    38f8:	0009c300 	call	9c30 <__sprint_r>
    38fc:	d9c03c17 	ldw	r7,240(sp)
    3900:	103bd71e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3904:	d8c02017 	ldw	r3,128(sp)
    3908:	dc401f17 	ldw	r17,124(sp)
    390c:	dd800404 	addi	r22,sp,16
    3910:	003fec06 	br	38c4 <___vfprintf_internal_r+0x1474>
    3914:	9080100c 	andi	r2,r18,64
    3918:	d8002785 	stb	zero,158(sp)
    391c:	10010e26 	beq	r2,zero,3d58 <___vfprintf_internal_r+0x1908>
    3920:	d9402e17 	ldw	r5,184(sp)
    3924:	d8c02a17 	ldw	r3,168(sp)
    3928:	002d883a 	mov	r22,zero
    392c:	28800104 	addi	r2,r5,4
    3930:	2cc0000b 	ldhu	r19,0(r5)
    3934:	183fc90e 	bge	r3,zero,385c <___vfprintf_internal_r+0x140c>
    3938:	d8802e15 	stw	r2,184(sp)
    393c:	0039883a 	mov	fp,zero
    3940:	9d84b03a 	or	r2,r19,r22
    3944:	103c1e1e 	bne	r2,zero,29c0 <___vfprintf_internal_r+0x570>
    3948:	00800044 	movi	r2,1
    394c:	003e6c06 	br	3300 <___vfprintf_internal_r+0xeb0>
    3950:	d9002d17 	ldw	r4,180(sp)
    3954:	d9801e04 	addi	r6,sp,120
    3958:	b80b883a 	mov	r5,r23
    395c:	0009c300 	call	9c30 <__sprint_r>
    3960:	103bbf1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3964:	d8c02017 	ldw	r3,128(sp)
    3968:	da000404 	addi	r8,sp,16
    396c:	d9003217 	ldw	r4,200(sp)
    3970:	d8802617 	ldw	r2,152(sp)
    3974:	d9403317 	ldw	r5,204(sp)
    3978:	8123883a 	add	r17,r16,r4
    397c:	11400216 	blt	r2,r5,3988 <___vfprintf_internal_r+0x1538>
    3980:	9100004c 	andi	r4,r18,1
    3984:	20000d26 	beq	r4,zero,39bc <___vfprintf_internal_r+0x156c>
    3988:	d9003717 	ldw	r4,220(sp)
    398c:	d9403417 	ldw	r5,208(sp)
    3990:	1907883a 	add	r3,r3,r4
    3994:	d9001f17 	ldw	r4,124(sp)
    3998:	41400015 	stw	r5,0(r8)
    399c:	d9403717 	ldw	r5,220(sp)
    39a0:	21000044 	addi	r4,r4,1
    39a4:	d8c02015 	stw	r3,128(sp)
    39a8:	41400115 	stw	r5,4(r8)
    39ac:	d9001f15 	stw	r4,124(sp)
    39b0:	014001c4 	movi	r5,7
    39b4:	2901e816 	blt	r5,r4,4158 <___vfprintf_internal_r+0x1d08>
    39b8:	42000204 	addi	r8,r8,8
    39bc:	d9003317 	ldw	r4,204(sp)
    39c0:	8121883a 	add	r16,r16,r4
    39c4:	2085c83a 	sub	r2,r4,r2
    39c8:	8461c83a 	sub	r16,r16,r17
    39cc:	1400010e 	bge	r2,r16,39d4 <___vfprintf_internal_r+0x1584>
    39d0:	1021883a 	mov	r16,r2
    39d4:	04000a0e 	bge	zero,r16,3a00 <___vfprintf_internal_r+0x15b0>
    39d8:	d9001f17 	ldw	r4,124(sp)
    39dc:	1c07883a 	add	r3,r3,r16
    39e0:	44400015 	stw	r17,0(r8)
    39e4:	21000044 	addi	r4,r4,1
    39e8:	44000115 	stw	r16,4(r8)
    39ec:	d8c02015 	stw	r3,128(sp)
    39f0:	d9001f15 	stw	r4,124(sp)
    39f4:	014001c4 	movi	r5,7
    39f8:	2901fb16 	blt	r5,r4,41e8 <___vfprintf_internal_r+0x1d98>
    39fc:	42000204 	addi	r8,r8,8
    3a00:	8001f716 	blt	r16,zero,41e0 <___vfprintf_internal_r+0x1d90>
    3a04:	1421c83a 	sub	r16,r2,r16
    3a08:	043d160e 	bge	zero,r16,2e64 <___vfprintf_internal_r+0xa14>
    3a0c:	04400404 	movi	r17,16
    3a10:	d8801f17 	ldw	r2,124(sp)
    3a14:	8c3efb0e 	bge	r17,r16,3604 <___vfprintf_internal_r+0x11b4>
    3a18:	01400074 	movhi	r5,1
    3a1c:	29486984 	addi	r5,r5,8614
    3a20:	d9402c15 	stw	r5,176(sp)
    3a24:	058001c4 	movi	r22,7
    3a28:	dcc02d17 	ldw	r19,180(sp)
    3a2c:	00000306 	br	3a3c <___vfprintf_internal_r+0x15ec>
    3a30:	42000204 	addi	r8,r8,8
    3a34:	843ffc04 	addi	r16,r16,-16
    3a38:	8c3ef50e 	bge	r17,r16,3610 <___vfprintf_internal_r+0x11c0>
    3a3c:	18c00404 	addi	r3,r3,16
    3a40:	10800044 	addi	r2,r2,1
    3a44:	45000015 	stw	r20,0(r8)
    3a48:	44400115 	stw	r17,4(r8)
    3a4c:	d8c02015 	stw	r3,128(sp)
    3a50:	d8801f15 	stw	r2,124(sp)
    3a54:	b0bff60e 	bge	r22,r2,3a30 <___vfprintf_internal_r+0x15e0>
    3a58:	d9801e04 	addi	r6,sp,120
    3a5c:	b80b883a 	mov	r5,r23
    3a60:	9809883a 	mov	r4,r19
    3a64:	0009c300 	call	9c30 <__sprint_r>
    3a68:	103b7d1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3a6c:	d8c02017 	ldw	r3,128(sp)
    3a70:	d8801f17 	ldw	r2,124(sp)
    3a74:	da000404 	addi	r8,sp,16
    3a78:	003fee06 	br	3a34 <___vfprintf_internal_r+0x15e4>
    3a7c:	9088703a 	and	r4,r18,r2
    3a80:	203eab1e 	bne	r4,zero,3530 <___vfprintf_internal_r+0x10e0>
    3a84:	dc401f17 	ldw	r17,124(sp)
    3a88:	40800115 	stw	r2,4(r8)
    3a8c:	44000015 	stw	r16,0(r8)
    3a90:	8c400044 	addi	r17,r17,1
    3a94:	d8c02015 	stw	r3,128(sp)
    3a98:	dc401f15 	stw	r17,124(sp)
    3a9c:	008001c4 	movi	r2,7
    3aa0:	14400e16 	blt	r2,r17,3adc <___vfprintf_internal_r+0x168c>
    3aa4:	45800204 	addi	r22,r8,8
    3aa8:	003eca06 	br	35d4 <___vfprintf_internal_r+0x1184>
    3aac:	01000074 	movhi	r4,1
    3ab0:	21086984 	addi	r4,r4,8614
    3ab4:	d9002c15 	stw	r4,176(sp)
    3ab8:	d8802c17 	ldw	r2,176(sp)
    3abc:	1c07883a 	add	r3,r3,r16
    3ac0:	8c400044 	addi	r17,r17,1
    3ac4:	b0800015 	stw	r2,0(r22)
    3ac8:	b4000115 	stw	r16,4(r22)
    3acc:	d8c02015 	stw	r3,128(sp)
    3ad0:	dc401f15 	stw	r17,124(sp)
    3ad4:	008001c4 	movi	r2,7
    3ad8:	147ebd0e 	bge	r2,r17,35d0 <___vfprintf_internal_r+0x1180>
    3adc:	d9002d17 	ldw	r4,180(sp)
    3ae0:	d9801e04 	addi	r6,sp,120
    3ae4:	b80b883a 	mov	r5,r23
    3ae8:	0009c300 	call	9c30 <__sprint_r>
    3aec:	103b5c1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3af0:	d8c02017 	ldw	r3,128(sp)
    3af4:	dc401f17 	ldw	r17,124(sp)
    3af8:	dd800404 	addi	r22,sp,16
    3afc:	003eb506 	br	35d4 <___vfprintf_internal_r+0x1184>
    3b00:	d9002d17 	ldw	r4,180(sp)
    3b04:	d9801e04 	addi	r6,sp,120
    3b08:	b80b883a 	mov	r5,r23
    3b0c:	0009c300 	call	9c30 <__sprint_r>
    3b10:	103b531e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3b14:	d8c02017 	ldw	r3,128(sp)
    3b18:	dc401f17 	ldw	r17,124(sp)
    3b1c:	da000404 	addi	r8,sp,16
    3b20:	003e8d06 	br	3558 <___vfprintf_internal_r+0x1108>
    3b24:	d9002d17 	ldw	r4,180(sp)
    3b28:	d9801e04 	addi	r6,sp,120
    3b2c:	b80b883a 	mov	r5,r23
    3b30:	0009c300 	call	9c30 <__sprint_r>
    3b34:	103b4a1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3b38:	d8c02017 	ldw	r3,128(sp)
    3b3c:	dc401f17 	ldw	r17,124(sp)
    3b40:	dd800404 	addi	r22,sp,16
    3b44:	003e8f06 	br	3584 <___vfprintf_internal_r+0x1134>
    3b48:	0027883a 	mov	r19,zero
    3b4c:	003f4a06 	br	3878 <___vfprintf_internal_r+0x1428>
    3b50:	d9002d17 	ldw	r4,180(sp)
    3b54:	d9801e04 	addi	r6,sp,120
    3b58:	b80b883a 	mov	r5,r23
    3b5c:	0009c300 	call	9c30 <__sprint_r>
    3b60:	103b3f1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3b64:	d8c02017 	ldw	r3,128(sp)
    3b68:	da000404 	addi	r8,sp,16
    3b6c:	003c7b06 	br	2d5c <___vfprintf_internal_r+0x90c>
    3b70:	d9402a17 	ldw	r5,168(sp)
    3b74:	04e7c83a 	sub	r19,zero,r19
    3b78:	07000b44 	movi	fp,45
    3b7c:	9804c03a 	cmpne	r2,r19,zero
    3b80:	05adc83a 	sub	r22,zero,r22
    3b84:	df002785 	stb	fp,158(sp)
    3b88:	b0adc83a 	sub	r22,r22,r2
    3b8c:	28017b16 	blt	r5,zero,417c <___vfprintf_internal_r+0x1d2c>
    3b90:	00bfdfc4 	movi	r2,-129
    3b94:	90a4703a 	and	r18,r18,r2
    3b98:	003b8906 	br	29c0 <___vfprintf_internal_r+0x570>
    3b9c:	d9003617 	ldw	r4,216(sp)
    3ba0:	d9403817 	ldw	r5,224(sp)
    3ba4:	da003d15 	stw	r8,244(sp)
    3ba8:	00098540 	call	9854 <__fpclassifyd>
    3bac:	da003d17 	ldw	r8,244(sp)
    3bb0:	1000f026 	beq	r2,zero,3f74 <___vfprintf_internal_r+0x1b24>
    3bb4:	d9002a17 	ldw	r4,168(sp)
    3bb8:	05bff7c4 	movi	r22,-33
    3bbc:	00bfffc4 	movi	r2,-1
    3bc0:	8dac703a 	and	r22,r17,r22
    3bc4:	20820026 	beq	r4,r2,43c8 <___vfprintf_internal_r+0x1f78>
    3bc8:	008011c4 	movi	r2,71
    3bcc:	b081f726 	beq	r22,r2,43ac <___vfprintf_internal_r+0x1f5c>
    3bd0:	d9003817 	ldw	r4,224(sp)
    3bd4:	90c04014 	ori	r3,r18,256
    3bd8:	d8c02c15 	stw	r3,176(sp)
    3bdc:	20021516 	blt	r4,zero,4434 <___vfprintf_internal_r+0x1fe4>
    3be0:	dcc03817 	ldw	r19,224(sp)
    3be4:	d8002905 	stb	zero,164(sp)
    3be8:	00801984 	movi	r2,102
    3bec:	8881f926 	beq	r17,r2,43d4 <___vfprintf_internal_r+0x1f84>
    3bf0:	00801184 	movi	r2,70
    3bf4:	88821c26 	beq	r17,r2,4468 <___vfprintf_internal_r+0x2018>
    3bf8:	00801144 	movi	r2,69
    3bfc:	b081ef26 	beq	r22,r2,43bc <___vfprintf_internal_r+0x1f6c>
    3c00:	d8c02a17 	ldw	r3,168(sp)
    3c04:	d8802104 	addi	r2,sp,132
    3c08:	d8800315 	stw	r2,12(sp)
    3c0c:	d9403617 	ldw	r5,216(sp)
    3c10:	d8802504 	addi	r2,sp,148
    3c14:	d9002d17 	ldw	r4,180(sp)
    3c18:	d8800215 	stw	r2,8(sp)
    3c1c:	d8802604 	addi	r2,sp,152
    3c20:	d8c00015 	stw	r3,0(sp)
    3c24:	d8800115 	stw	r2,4(sp)
    3c28:	01c00084 	movi	r7,2
    3c2c:	980d883a 	mov	r6,r19
    3c30:	d8c03c15 	stw	r3,240(sp)
    3c34:	da003d15 	stw	r8,244(sp)
    3c38:	0004b800 	call	4b80 <_dtoa_r>
    3c3c:	1021883a 	mov	r16,r2
    3c40:	008019c4 	movi	r2,103
    3c44:	d8c03c17 	ldw	r3,240(sp)
    3c48:	da003d17 	ldw	r8,244(sp)
    3c4c:	88817126 	beq	r17,r2,4214 <___vfprintf_internal_r+0x1dc4>
    3c50:	008011c4 	movi	r2,71
    3c54:	88829126 	beq	r17,r2,469c <___vfprintf_internal_r+0x224c>
    3c58:	80f9883a 	add	fp,r16,r3
    3c5c:	d9003617 	ldw	r4,216(sp)
    3c60:	000d883a 	mov	r6,zero
    3c64:	000f883a 	mov	r7,zero
    3c68:	980b883a 	mov	r5,r19
    3c6c:	da003d15 	stw	r8,244(sp)
    3c70:	000db900 	call	db90 <__eqdf2>
    3c74:	da003d17 	ldw	r8,244(sp)
    3c78:	10018d26 	beq	r2,zero,42b0 <___vfprintf_internal_r+0x1e60>
    3c7c:	d8802117 	ldw	r2,132(sp)
    3c80:	1700062e 	bgeu	r2,fp,3c9c <___vfprintf_internal_r+0x184c>
    3c84:	01000c04 	movi	r4,48
    3c88:	10c00044 	addi	r3,r2,1
    3c8c:	d8c02115 	stw	r3,132(sp)
    3c90:	11000005 	stb	r4,0(r2)
    3c94:	d8802117 	ldw	r2,132(sp)
    3c98:	173ffb36 	bltu	r2,fp,3c88 <___vfprintf_internal_r+0x1838>
    3c9c:	1405c83a 	sub	r2,r2,r16
    3ca0:	d8803315 	stw	r2,204(sp)
    3ca4:	008011c4 	movi	r2,71
    3ca8:	b0817626 	beq	r22,r2,4284 <___vfprintf_internal_r+0x1e34>
    3cac:	00801944 	movi	r2,101
    3cb0:	1442800e 	bge	r2,r17,46b4 <___vfprintf_internal_r+0x2264>
    3cb4:	d8c02617 	ldw	r3,152(sp)
    3cb8:	00801984 	movi	r2,102
    3cbc:	d8c03215 	stw	r3,200(sp)
    3cc0:	8881fe26 	beq	r17,r2,44bc <___vfprintf_internal_r+0x206c>
    3cc4:	d8c03217 	ldw	r3,200(sp)
    3cc8:	d9003317 	ldw	r4,204(sp)
    3ccc:	1901dd16 	blt	r3,r4,4444 <___vfprintf_internal_r+0x1ff4>
    3cd0:	9480004c 	andi	r18,r18,1
    3cd4:	90022b1e 	bne	r18,zero,4584 <___vfprintf_internal_r+0x2134>
    3cd8:	1805883a 	mov	r2,r3
    3cdc:	18028316 	blt	r3,zero,46ec <___vfprintf_internal_r+0x229c>
    3ce0:	d8c03217 	ldw	r3,200(sp)
    3ce4:	044019c4 	movi	r17,103
    3ce8:	d8c02b15 	stw	r3,172(sp)
    3cec:	df002907 	ldb	fp,164(sp)
    3cf0:	e001531e 	bne	fp,zero,4240 <___vfprintf_internal_r+0x1df0>
    3cf4:	df002783 	ldbu	fp,158(sp)
    3cf8:	d8802915 	stw	r2,164(sp)
    3cfc:	dc802c17 	ldw	r18,176(sp)
    3d00:	d8002a15 	stw	zero,168(sp)
    3d04:	003baf06 	br	2bc4 <___vfprintf_internal_r+0x774>
    3d08:	d8c02e17 	ldw	r3,184(sp)
    3d0c:	d9002e17 	ldw	r4,184(sp)
    3d10:	d9402e17 	ldw	r5,184(sp)
    3d14:	18c00017 	ldw	r3,0(r3)
    3d18:	21000117 	ldw	r4,4(r4)
    3d1c:	29400204 	addi	r5,r5,8
    3d20:	d8c03615 	stw	r3,216(sp)
    3d24:	d9003815 	stw	r4,224(sp)
    3d28:	d9402e15 	stw	r5,184(sp)
    3d2c:	003b5006 	br	2a70 <___vfprintf_internal_r+0x620>
    3d30:	ac400007 	ldb	r17,0(r21)
    3d34:	003a2806 	br	25d8 <___vfprintf_internal_r+0x188>
    3d38:	9080100c 	andi	r2,r18,64
    3d3c:	1000a826 	beq	r2,zero,3fe0 <___vfprintf_internal_r+0x1b90>
    3d40:	d8c02e17 	ldw	r3,184(sp)
    3d44:	002d883a 	mov	r22,zero
    3d48:	1cc0000b 	ldhu	r19,0(r3)
    3d4c:	18c00104 	addi	r3,r3,4
    3d50:	d8c02e15 	stw	r3,184(sp)
    3d54:	003caf06 	br	3014 <___vfprintf_internal_r+0xbc4>
    3d58:	d9002e17 	ldw	r4,184(sp)
    3d5c:	d9402a17 	ldw	r5,168(sp)
    3d60:	002d883a 	mov	r22,zero
    3d64:	20800104 	addi	r2,r4,4
    3d68:	24c00017 	ldw	r19,0(r4)
    3d6c:	283ebb0e 	bge	r5,zero,385c <___vfprintf_internal_r+0x140c>
    3d70:	003ef106 	br	3938 <___vfprintf_internal_r+0x14e8>
    3d74:	9080040c 	andi	r2,r18,16
    3d78:	1000921e 	bne	r2,zero,3fc4 <___vfprintf_internal_r+0x1b74>
    3d7c:	9480100c 	andi	r18,r18,64
    3d80:	90013926 	beq	r18,zero,4268 <___vfprintf_internal_r+0x1e18>
    3d84:	d9402e17 	ldw	r5,184(sp)
    3d88:	d8c02f17 	ldw	r3,188(sp)
    3d8c:	28800017 	ldw	r2,0(r5)
    3d90:	29400104 	addi	r5,r5,4
    3d94:	d9402e15 	stw	r5,184(sp)
    3d98:	10c0000d 	sth	r3,0(r2)
    3d9c:	0039e406 	br	2530 <___vfprintf_internal_r+0xe0>
    3da0:	9080100c 	andi	r2,r18,64
    3da4:	10008026 	beq	r2,zero,3fa8 <___vfprintf_internal_r+0x1b58>
    3da8:	d8802e17 	ldw	r2,184(sp)
    3dac:	14c0000f 	ldh	r19,0(r2)
    3db0:	10800104 	addi	r2,r2,4
    3db4:	d8802e15 	stw	r2,184(sp)
    3db8:	982dd7fa 	srai	r22,r19,31
    3dbc:	b005883a 	mov	r2,r22
    3dc0:	003af706 	br	29a0 <___vfprintf_internal_r+0x550>
    3dc4:	9080100c 	andi	r2,r18,64
    3dc8:	d8002785 	stb	zero,158(sp)
    3dcc:	10008a1e 	bne	r2,zero,3ff8 <___vfprintf_internal_r+0x1ba8>
    3dd0:	d9002e17 	ldw	r4,184(sp)
    3dd4:	d9402a17 	ldw	r5,168(sp)
    3dd8:	002d883a 	mov	r22,zero
    3ddc:	20800104 	addi	r2,r4,4
    3de0:	24c00017 	ldw	r19,0(r4)
    3de4:	283e4b0e 	bge	r5,zero,3714 <___vfprintf_internal_r+0x12c4>
    3de8:	9d86b03a 	or	r3,r19,r22
    3dec:	d8802e15 	stw	r2,184(sp)
    3df0:	183e4c1e 	bne	r3,zero,3724 <___vfprintf_internal_r+0x12d4>
    3df4:	0039883a 	mov	fp,zero
    3df8:	0005883a 	mov	r2,zero
    3dfc:	003d4006 	br	3300 <___vfprintf_internal_r+0xeb0>
    3e00:	01400074 	movhi	r5,1
    3e04:	29486984 	addi	r5,r5,8614
    3e08:	d9402c15 	stw	r5,176(sp)
    3e0c:	d9402c17 	ldw	r5,176(sp)
    3e10:	1c47883a 	add	r3,r3,r17
    3e14:	10800044 	addi	r2,r2,1
    3e18:	41400015 	stw	r5,0(r8)
    3e1c:	44400115 	stw	r17,4(r8)
    3e20:	d8c02015 	stw	r3,128(sp)
    3e24:	d8801f15 	stw	r2,124(sp)
    3e28:	010001c4 	movi	r4,7
    3e2c:	20bec816 	blt	r4,r2,3950 <___vfprintf_internal_r+0x1500>
    3e30:	42000204 	addi	r8,r8,8
    3e34:	003ecd06 	br	396c <___vfprintf_internal_r+0x151c>
    3e38:	d9002a17 	ldw	r4,168(sp)
    3e3c:	d8002785 	stb	zero,158(sp)
    3e40:	203d2d16 	blt	r4,zero,32f8 <___vfprintf_internal_r+0xea8>
    3e44:	00bfdfc4 	movi	r2,-129
    3e48:	90a4703a 	and	r18,r18,r2
    3e4c:	003a6106 	br	27d4 <___vfprintf_internal_r+0x384>
    3e50:	01000074 	movhi	r4,1
    3e54:	21086984 	addi	r4,r4,8614
    3e58:	d9002c15 	stw	r4,176(sp)
    3e5c:	003bea06 	br	2e08 <___vfprintf_internal_r+0x9b8>
    3e60:	d9002d17 	ldw	r4,180(sp)
    3e64:	d9801e04 	addi	r6,sp,120
    3e68:	b80b883a 	mov	r5,r23
    3e6c:	0009c300 	call	9c30 <__sprint_r>
    3e70:	103a7b1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3e74:	d8c02017 	ldw	r3,128(sp)
    3e78:	da000404 	addi	r8,sp,16
    3e7c:	003d4106 	br	3384 <___vfprintf_internal_r+0xf34>
    3e80:	d8801f17 	ldw	r2,124(sp)
    3e84:	01400074 	movhi	r5,1
    3e88:	01000044 	movi	r4,1
    3e8c:	18c00044 	addi	r3,r3,1
    3e90:	10800044 	addi	r2,r2,1
    3e94:	29486904 	addi	r5,r5,8612
    3e98:	41000115 	stw	r4,4(r8)
    3e9c:	41400015 	stw	r5,0(r8)
    3ea0:	d8c02015 	stw	r3,128(sp)
    3ea4:	d8801f15 	stw	r2,124(sp)
    3ea8:	010001c4 	movi	r4,7
    3eac:	20805c16 	blt	r4,r2,4020 <___vfprintf_internal_r+0x1bd0>
    3eb0:	42000204 	addi	r8,r8,8
    3eb4:	8800041e 	bne	r17,zero,3ec8 <___vfprintf_internal_r+0x1a78>
    3eb8:	d8803317 	ldw	r2,204(sp)
    3ebc:	1000021e 	bne	r2,zero,3ec8 <___vfprintf_internal_r+0x1a78>
    3ec0:	9080004c 	andi	r2,r18,1
    3ec4:	103be726 	beq	r2,zero,2e64 <___vfprintf_internal_r+0xa14>
    3ec8:	d9003717 	ldw	r4,220(sp)
    3ecc:	d8801f17 	ldw	r2,124(sp)
    3ed0:	d9403417 	ldw	r5,208(sp)
    3ed4:	20c7883a 	add	r3,r4,r3
    3ed8:	10800044 	addi	r2,r2,1
    3edc:	41000115 	stw	r4,4(r8)
    3ee0:	41400015 	stw	r5,0(r8)
    3ee4:	d8c02015 	stw	r3,128(sp)
    3ee8:	d8801f15 	stw	r2,124(sp)
    3eec:	010001c4 	movi	r4,7
    3ef0:	20812116 	blt	r4,r2,4378 <___vfprintf_internal_r+0x1f28>
    3ef4:	42000204 	addi	r8,r8,8
    3ef8:	0463c83a 	sub	r17,zero,r17
    3efc:	0440730e 	bge	zero,r17,40cc <___vfprintf_internal_r+0x1c7c>
    3f00:	05800404 	movi	r22,16
    3f04:	b440860e 	bge	r22,r17,4120 <___vfprintf_internal_r+0x1cd0>
    3f08:	01400074 	movhi	r5,1
    3f0c:	29486984 	addi	r5,r5,8614
    3f10:	d9402c15 	stw	r5,176(sp)
    3f14:	070001c4 	movi	fp,7
    3f18:	dcc02d17 	ldw	r19,180(sp)
    3f1c:	00000306 	br	3f2c <___vfprintf_internal_r+0x1adc>
    3f20:	42000204 	addi	r8,r8,8
    3f24:	8c7ffc04 	addi	r17,r17,-16
    3f28:	b440800e 	bge	r22,r17,412c <___vfprintf_internal_r+0x1cdc>
    3f2c:	18c00404 	addi	r3,r3,16
    3f30:	10800044 	addi	r2,r2,1
    3f34:	45000015 	stw	r20,0(r8)
    3f38:	45800115 	stw	r22,4(r8)
    3f3c:	d8c02015 	stw	r3,128(sp)
    3f40:	d8801f15 	stw	r2,124(sp)
    3f44:	e0bff60e 	bge	fp,r2,3f20 <___vfprintf_internal_r+0x1ad0>
    3f48:	d9801e04 	addi	r6,sp,120
    3f4c:	b80b883a 	mov	r5,r23
    3f50:	9809883a 	mov	r4,r19
    3f54:	0009c300 	call	9c30 <__sprint_r>
    3f58:	103a411e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    3f5c:	d8c02017 	ldw	r3,128(sp)
    3f60:	d8801f17 	ldw	r2,124(sp)
    3f64:	da000404 	addi	r8,sp,16
    3f68:	003fee06 	br	3f24 <___vfprintf_internal_r+0x1ad4>
    3f6c:	00bfffc4 	movi	r2,-1
    3f70:	003a3f06 	br	2870 <___vfprintf_internal_r+0x420>
    3f74:	008011c4 	movi	r2,71
    3f78:	1440b816 	blt	r2,r17,425c <___vfprintf_internal_r+0x1e0c>
    3f7c:	04000074 	movhi	r16,1
    3f80:	84085b04 	addi	r16,r16,8556
    3f84:	00c000c4 	movi	r3,3
    3f88:	00bfdfc4 	movi	r2,-129
    3f8c:	d8c02915 	stw	r3,164(sp)
    3f90:	90a4703a 	and	r18,r18,r2
    3f94:	df002783 	ldbu	fp,158(sp)
    3f98:	d8c02b15 	stw	r3,172(sp)
    3f9c:	d8002a15 	stw	zero,168(sp)
    3fa0:	d8003215 	stw	zero,200(sp)
    3fa4:	003b0706 	br	2bc4 <___vfprintf_internal_r+0x774>
    3fa8:	d8c02e17 	ldw	r3,184(sp)
    3fac:	1cc00017 	ldw	r19,0(r3)
    3fb0:	18c00104 	addi	r3,r3,4
    3fb4:	d8c02e15 	stw	r3,184(sp)
    3fb8:	982dd7fa 	srai	r22,r19,31
    3fbc:	b005883a 	mov	r2,r22
    3fc0:	003a7706 	br	29a0 <___vfprintf_internal_r+0x550>
    3fc4:	d8c02e17 	ldw	r3,184(sp)
    3fc8:	d9002f17 	ldw	r4,188(sp)
    3fcc:	18800017 	ldw	r2,0(r3)
    3fd0:	18c00104 	addi	r3,r3,4
    3fd4:	d8c02e15 	stw	r3,184(sp)
    3fd8:	11000015 	stw	r4,0(r2)
    3fdc:	00395406 	br	2530 <___vfprintf_internal_r+0xe0>
    3fe0:	d9002e17 	ldw	r4,184(sp)
    3fe4:	002d883a 	mov	r22,zero
    3fe8:	24c00017 	ldw	r19,0(r4)
    3fec:	21000104 	addi	r4,r4,4
    3ff0:	d9002e15 	stw	r4,184(sp)
    3ff4:	003c0706 	br	3014 <___vfprintf_internal_r+0xbc4>
    3ff8:	d9402e17 	ldw	r5,184(sp)
    3ffc:	d8c02a17 	ldw	r3,168(sp)
    4000:	002d883a 	mov	r22,zero
    4004:	28800104 	addi	r2,r5,4
    4008:	2cc0000b 	ldhu	r19,0(r5)
    400c:	183dc10e 	bge	r3,zero,3714 <___vfprintf_internal_r+0x12c4>
    4010:	003f7506 	br	3de8 <___vfprintf_internal_r+0x1998>
    4014:	04000074 	movhi	r16,1
    4018:	84085904 	addi	r16,r16,8548
    401c:	003aa706 	br	2abc <___vfprintf_internal_r+0x66c>
    4020:	d9002d17 	ldw	r4,180(sp)
    4024:	d9801e04 	addi	r6,sp,120
    4028:	b80b883a 	mov	r5,r23
    402c:	0009c300 	call	9c30 <__sprint_r>
    4030:	103a0b1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    4034:	dc402617 	ldw	r17,152(sp)
    4038:	d8c02017 	ldw	r3,128(sp)
    403c:	da000404 	addi	r8,sp,16
    4040:	003f9c06 	br	3eb4 <___vfprintf_internal_r+0x1a64>
    4044:	ac400043 	ldbu	r17,1(r21)
    4048:	84000814 	ori	r16,r16,32
    404c:	ad400044 	addi	r21,r21,1
    4050:	8c403fcc 	andi	r17,r17,255
    4054:	8c40201c 	xori	r17,r17,128
    4058:	8c7fe004 	addi	r17,r17,-128
    405c:	00395e06 	br	25d8 <___vfprintf_internal_r+0x188>
    4060:	d8c02e15 	stw	r3,184(sp)
    4064:	0039883a 	mov	fp,zero
    4068:	003e3506 	br	3940 <___vfprintf_internal_r+0x14f0>
    406c:	d9002d17 	ldw	r4,180(sp)
    4070:	d9801e04 	addi	r6,sp,120
    4074:	b80b883a 	mov	r5,r23
    4078:	0009c300 	call	9c30 <__sprint_r>
    407c:	1039f81e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    4080:	d8c02017 	ldw	r3,128(sp)
    4084:	da000404 	addi	r8,sp,16
    4088:	003cd006 	br	33cc <___vfprintf_internal_r+0xf7c>
    408c:	8009883a 	mov	r4,r16
    4090:	df003d15 	stw	fp,244(sp)
    4094:	00023b80 	call	23b8 <strlen>
    4098:	d8802b15 	stw	r2,172(sp)
    409c:	da003d17 	ldw	r8,244(sp)
    40a0:	103c200e 	bge	r2,zero,3124 <___vfprintf_internal_r+0xcd4>
    40a4:	0005883a 	mov	r2,zero
    40a8:	003c1e06 	br	3124 <___vfprintf_internal_r+0xcd4>
    40ac:	d9002d17 	ldw	r4,180(sp)
    40b0:	d9801e04 	addi	r6,sp,120
    40b4:	b80b883a 	mov	r5,r23
    40b8:	0009c300 	call	9c30 <__sprint_r>
    40bc:	1039e81e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    40c0:	d8c02017 	ldw	r3,128(sp)
    40c4:	d8801f17 	ldw	r2,124(sp)
    40c8:	da000404 	addi	r8,sp,16
    40cc:	d9403317 	ldw	r5,204(sp)
    40d0:	10800044 	addi	r2,r2,1
    40d4:	44000015 	stw	r16,0(r8)
    40d8:	28c7883a 	add	r3,r5,r3
    40dc:	003b5b06 	br	2e4c <___vfprintf_internal_r+0x9fc>
    40e0:	01000074 	movhi	r4,1
    40e4:	21086d84 	addi	r4,r4,8630
    40e8:	d9003515 	stw	r4,212(sp)
    40ec:	003af206 	br	2cb8 <___vfprintf_internal_r+0x868>
    40f0:	013fffc4 	movi	r4,-1
    40f4:	003a0806 	br	2918 <___vfprintf_internal_r+0x4c8>
    40f8:	0023883a 	mov	r17,zero
    40fc:	003d9d06 	br	3774 <___vfprintf_internal_r+0x1324>
    4100:	d9002d17 	ldw	r4,180(sp)
    4104:	d9801e04 	addi	r6,sp,120
    4108:	b80b883a 	mov	r5,r23
    410c:	0009c300 	call	9c30 <__sprint_r>
    4110:	1039d31e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    4114:	d8c02017 	ldw	r3,128(sp)
    4118:	da000404 	addi	r8,sp,16
    411c:	003d9406 	br	3770 <___vfprintf_internal_r+0x1320>
    4120:	01000074 	movhi	r4,1
    4124:	21086984 	addi	r4,r4,8614
    4128:	d9002c15 	stw	r4,176(sp)
    412c:	d9002c17 	ldw	r4,176(sp)
    4130:	1c47883a 	add	r3,r3,r17
    4134:	10800044 	addi	r2,r2,1
    4138:	41000015 	stw	r4,0(r8)
    413c:	44400115 	stw	r17,4(r8)
    4140:	d8c02015 	stw	r3,128(sp)
    4144:	d8801f15 	stw	r2,124(sp)
    4148:	010001c4 	movi	r4,7
    414c:	20bfd716 	blt	r4,r2,40ac <___vfprintf_internal_r+0x1c5c>
    4150:	42000204 	addi	r8,r8,8
    4154:	003fdd06 	br	40cc <___vfprintf_internal_r+0x1c7c>
    4158:	d9002d17 	ldw	r4,180(sp)
    415c:	d9801e04 	addi	r6,sp,120
    4160:	b80b883a 	mov	r5,r23
    4164:	0009c300 	call	9c30 <__sprint_r>
    4168:	1039bd1e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    416c:	d8802617 	ldw	r2,152(sp)
    4170:	d8c02017 	ldw	r3,128(sp)
    4174:	da000404 	addi	r8,sp,16
    4178:	003e1006 	br	39bc <___vfprintf_internal_r+0x156c>
    417c:	00800044 	movi	r2,1
    4180:	10803fcc 	andi	r2,r2,255
    4184:	00c00044 	movi	r3,1
    4188:	10fa0d26 	beq	r2,r3,29c0 <___vfprintf_internal_r+0x570>
    418c:	00c00084 	movi	r3,2
    4190:	10fbaf26 	beq	r2,r3,3050 <___vfprintf_internal_r+0xc00>
    4194:	003a6d06 	br	2b4c <___vfprintf_internal_r+0x6fc>
    4198:	01000074 	movhi	r4,1
    419c:	21086d84 	addi	r4,r4,8630
    41a0:	d9003515 	stw	r4,212(sp)
    41a4:	003b5406 	br	2ef8 <___vfprintf_internal_r+0xaa8>
    41a8:	d8802a17 	ldw	r2,168(sp)
    41ac:	00c00184 	movi	r3,6
    41b0:	1880012e 	bgeu	r3,r2,41b8 <___vfprintf_internal_r+0x1d68>
    41b4:	1805883a 	mov	r2,r3
    41b8:	d8802b15 	stw	r2,172(sp)
    41bc:	1000ef16 	blt	r2,zero,457c <___vfprintf_internal_r+0x212c>
    41c0:	04000074 	movhi	r16,1
    41c4:	d8802915 	stw	r2,164(sp)
    41c8:	dcc02e15 	stw	r19,184(sp)
    41cc:	d8002a15 	stw	zero,168(sp)
    41d0:	d8003215 	stw	zero,200(sp)
    41d4:	84086704 	addi	r16,r16,8604
    41d8:	0039883a 	mov	fp,zero
    41dc:	003a8006 	br	2be0 <___vfprintf_internal_r+0x790>
    41e0:	0021883a 	mov	r16,zero
    41e4:	003e0706 	br	3a04 <___vfprintf_internal_r+0x15b4>
    41e8:	d9002d17 	ldw	r4,180(sp)
    41ec:	d9801e04 	addi	r6,sp,120
    41f0:	b80b883a 	mov	r5,r23
    41f4:	0009c300 	call	9c30 <__sprint_r>
    41f8:	1039991e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    41fc:	d8802617 	ldw	r2,152(sp)
    4200:	d9403317 	ldw	r5,204(sp)
    4204:	d8c02017 	ldw	r3,128(sp)
    4208:	da000404 	addi	r8,sp,16
    420c:	2885c83a 	sub	r2,r5,r2
    4210:	003dfb06 	br	3a00 <___vfprintf_internal_r+0x15b0>
    4214:	9080004c 	andi	r2,r18,1
    4218:	103e8f1e 	bne	r2,zero,3c58 <___vfprintf_internal_r+0x1808>
    421c:	d8802117 	ldw	r2,132(sp)
    4220:	003e9e06 	br	3c9c <___vfprintf_internal_r+0x184c>
    4224:	1025883a 	mov	r18,r2
    4228:	0039883a 	mov	fp,zero
    422c:	00800084 	movi	r2,2
    4230:	003fd306 	br	4180 <___vfprintf_internal_r+0x1d30>
    4234:	07000b44 	movi	fp,45
    4238:	df002785 	stb	fp,158(sp)
    423c:	003a1b06 	br	2aac <___vfprintf_internal_r+0x65c>
    4240:	00c00b44 	movi	r3,45
    4244:	d8c02785 	stb	r3,158(sp)
    4248:	d8802915 	stw	r2,164(sp)
    424c:	dc802c17 	ldw	r18,176(sp)
    4250:	d8002a15 	stw	zero,168(sp)
    4254:	07000b44 	movi	fp,45
    4258:	003a5e06 	br	2bd4 <___vfprintf_internal_r+0x784>
    425c:	04000074 	movhi	r16,1
    4260:	84085c04 	addi	r16,r16,8560
    4264:	003f4706 	br	3f84 <___vfprintf_internal_r+0x1b34>
    4268:	d9002e17 	ldw	r4,184(sp)
    426c:	d9402f17 	ldw	r5,188(sp)
    4270:	20800017 	ldw	r2,0(r4)
    4274:	21000104 	addi	r4,r4,4
    4278:	d9002e15 	stw	r4,184(sp)
    427c:	11400015 	stw	r5,0(r2)
    4280:	0038ab06 	br	2530 <___vfprintf_internal_r+0xe0>
    4284:	dd802617 	ldw	r22,152(sp)
    4288:	00bfff44 	movi	r2,-3
    428c:	b0801c16 	blt	r22,r2,4300 <___vfprintf_internal_r+0x1eb0>
    4290:	d9402a17 	ldw	r5,168(sp)
    4294:	2d801a16 	blt	r5,r22,4300 <___vfprintf_internal_r+0x1eb0>
    4298:	dd803215 	stw	r22,200(sp)
    429c:	003e8906 	br	3cc4 <___vfprintf_internal_r+0x1874>
    42a0:	01000074 	movhi	r4,1
    42a4:	21086984 	addi	r4,r4,8614
    42a8:	d9002c15 	stw	r4,176(sp)
    42ac:	003c9106 	br	34f4 <___vfprintf_internal_r+0x10a4>
    42b0:	e005883a 	mov	r2,fp
    42b4:	003e7906 	br	3c9c <___vfprintf_internal_r+0x184c>
    42b8:	d9002a17 	ldw	r4,168(sp)
    42bc:	df002783 	ldbu	fp,158(sp)
    42c0:	dcc02e15 	stw	r19,184(sp)
    42c4:	d9002915 	stw	r4,164(sp)
    42c8:	d9002b15 	stw	r4,172(sp)
    42cc:	d8002a15 	stw	zero,168(sp)
    42d0:	d8003215 	stw	zero,200(sp)
    42d4:	003a3b06 	br	2bc4 <___vfprintf_internal_r+0x774>
    42d8:	9080004c 	andi	r2,r18,1
    42dc:	0039883a 	mov	fp,zero
    42e0:	10000426 	beq	r2,zero,42f4 <___vfprintf_internal_r+0x1ea4>
    42e4:	00800c04 	movi	r2,48
    42e8:	dc001dc4 	addi	r16,sp,119
    42ec:	d8801dc5 	stb	r2,119(sp)
    42f0:	003b6406 	br	3084 <___vfprintf_internal_r+0xc34>
    42f4:	d8002b15 	stw	zero,172(sp)
    42f8:	dc001e04 	addi	r16,sp,120
    42fc:	003a2b06 	br	2bac <___vfprintf_internal_r+0x75c>
    4300:	8c7fff84 	addi	r17,r17,-2
    4304:	b5bfffc4 	addi	r22,r22,-1
    4308:	dd802615 	stw	r22,152(sp)
    430c:	dc4022c5 	stb	r17,139(sp)
    4310:	b000bf16 	blt	r22,zero,4610 <___vfprintf_internal_r+0x21c0>
    4314:	00800ac4 	movi	r2,43
    4318:	d8802305 	stb	r2,140(sp)
    431c:	00800244 	movi	r2,9
    4320:	15807016 	blt	r2,r22,44e4 <___vfprintf_internal_r+0x2094>
    4324:	00800c04 	movi	r2,48
    4328:	b5800c04 	addi	r22,r22,48
    432c:	d8802345 	stb	r2,141(sp)
    4330:	dd802385 	stb	r22,142(sp)
    4334:	d88023c4 	addi	r2,sp,143
    4338:	df0022c4 	addi	fp,sp,139
    433c:	d8c03317 	ldw	r3,204(sp)
    4340:	1739c83a 	sub	fp,r2,fp
    4344:	d9003317 	ldw	r4,204(sp)
    4348:	e0c7883a 	add	r3,fp,r3
    434c:	df003a15 	stw	fp,232(sp)
    4350:	d8c02b15 	stw	r3,172(sp)
    4354:	00800044 	movi	r2,1
    4358:	1100b30e 	bge	r2,r4,4628 <___vfprintf_internal_r+0x21d8>
    435c:	d8c02b17 	ldw	r3,172(sp)
    4360:	18c00044 	addi	r3,r3,1
    4364:	d8c02b15 	stw	r3,172(sp)
    4368:	1805883a 	mov	r2,r3
    436c:	1800ac16 	blt	r3,zero,4620 <___vfprintf_internal_r+0x21d0>
    4370:	d8003215 	stw	zero,200(sp)
    4374:	003e5d06 	br	3cec <___vfprintf_internal_r+0x189c>
    4378:	d9002d17 	ldw	r4,180(sp)
    437c:	d9801e04 	addi	r6,sp,120
    4380:	b80b883a 	mov	r5,r23
    4384:	0009c300 	call	9c30 <__sprint_r>
    4388:	1039351e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x410>
    438c:	dc402617 	ldw	r17,152(sp)
    4390:	d8c02017 	ldw	r3,128(sp)
    4394:	d8801f17 	ldw	r2,124(sp)
    4398:	da000404 	addi	r8,sp,16
    439c:	003ed606 	br	3ef8 <___vfprintf_internal_r+0x1aa8>
    43a0:	182b883a 	mov	r21,r3
    43a4:	d8002a15 	stw	zero,168(sp)
    43a8:	00388c06 	br	25dc <___vfprintf_internal_r+0x18c>
    43ac:	d8802a17 	ldw	r2,168(sp)
    43b0:	103e071e 	bne	r2,zero,3bd0 <___vfprintf_internal_r+0x1780>
    43b4:	dc002a15 	stw	r16,168(sp)
    43b8:	003e0506 	br	3bd0 <___vfprintf_internal_r+0x1780>
    43bc:	d9002a17 	ldw	r4,168(sp)
    43c0:	20c00044 	addi	r3,r4,1
    43c4:	003e0f06 	br	3c04 <___vfprintf_internal_r+0x17b4>
    43c8:	01400184 	movi	r5,6
    43cc:	d9402a15 	stw	r5,168(sp)
    43d0:	003dff06 	br	3bd0 <___vfprintf_internal_r+0x1780>
    43d4:	d8802104 	addi	r2,sp,132
    43d8:	d8800315 	stw	r2,12(sp)
    43dc:	d8802504 	addi	r2,sp,148
    43e0:	d8800215 	stw	r2,8(sp)
    43e4:	d8802604 	addi	r2,sp,152
    43e8:	d8800115 	stw	r2,4(sp)
    43ec:	d8802a17 	ldw	r2,168(sp)
    43f0:	d9403617 	ldw	r5,216(sp)
    43f4:	d9002d17 	ldw	r4,180(sp)
    43f8:	d8800015 	stw	r2,0(sp)
    43fc:	01c000c4 	movi	r7,3
    4400:	980d883a 	mov	r6,r19
    4404:	da003d15 	stw	r8,244(sp)
    4408:	0004b800 	call	4b80 <_dtoa_r>
    440c:	d8c02a17 	ldw	r3,168(sp)
    4410:	da003d17 	ldw	r8,244(sp)
    4414:	1021883a 	mov	r16,r2
    4418:	10f9883a 	add	fp,r2,r3
    441c:	81000007 	ldb	r4,0(r16)
    4420:	00800c04 	movi	r2,48
    4424:	20805e26 	beq	r4,r2,45a0 <___vfprintf_internal_r+0x2150>
    4428:	d8c02617 	ldw	r3,152(sp)
    442c:	e0f9883a 	add	fp,fp,r3
    4430:	003e0a06 	br	3c5c <___vfprintf_internal_r+0x180c>
    4434:	00c00b44 	movi	r3,45
    4438:	24e0003c 	xorhi	r19,r4,32768
    443c:	d8c02905 	stb	r3,164(sp)
    4440:	003de906 	br	3be8 <___vfprintf_internal_r+0x1798>
    4444:	d8c03217 	ldw	r3,200(sp)
    4448:	00c07a0e 	bge	zero,r3,4634 <___vfprintf_internal_r+0x21e4>
    444c:	00800044 	movi	r2,1
    4450:	d9003317 	ldw	r4,204(sp)
    4454:	1105883a 	add	r2,r2,r4
    4458:	d8802b15 	stw	r2,172(sp)
    445c:	10004e16 	blt	r2,zero,4598 <___vfprintf_internal_r+0x2148>
    4460:	044019c4 	movi	r17,103
    4464:	003e2106 	br	3cec <___vfprintf_internal_r+0x189c>
    4468:	d9002a17 	ldw	r4,168(sp)
    446c:	d8802104 	addi	r2,sp,132
    4470:	d8800315 	stw	r2,12(sp)
    4474:	d9000015 	stw	r4,0(sp)
    4478:	d8802504 	addi	r2,sp,148
    447c:	d9403617 	ldw	r5,216(sp)
    4480:	d9002d17 	ldw	r4,180(sp)
    4484:	d8800215 	stw	r2,8(sp)
    4488:	d8802604 	addi	r2,sp,152
    448c:	d8800115 	stw	r2,4(sp)
    4490:	01c000c4 	movi	r7,3
    4494:	980d883a 	mov	r6,r19
    4498:	da003d15 	stw	r8,244(sp)
    449c:	0004b800 	call	4b80 <_dtoa_r>
    44a0:	d8c02a17 	ldw	r3,168(sp)
    44a4:	da003d17 	ldw	r8,244(sp)
    44a8:	1021883a 	mov	r16,r2
    44ac:	00801184 	movi	r2,70
    44b0:	80f9883a 	add	fp,r16,r3
    44b4:	88bfd926 	beq	r17,r2,441c <___vfprintf_internal_r+0x1fcc>
    44b8:	003de806 	br	3c5c <___vfprintf_internal_r+0x180c>
    44bc:	d9002a17 	ldw	r4,168(sp)
    44c0:	00c04d0e 	bge	zero,r3,45f8 <___vfprintf_internal_r+0x21a8>
    44c4:	2000441e 	bne	r4,zero,45d8 <___vfprintf_internal_r+0x2188>
    44c8:	9480004c 	andi	r18,r18,1
    44cc:	9000421e 	bne	r18,zero,45d8 <___vfprintf_internal_r+0x2188>
    44d0:	1805883a 	mov	r2,r3
    44d4:	18006f16 	blt	r3,zero,4694 <___vfprintf_internal_r+0x2244>
    44d8:	d8c03217 	ldw	r3,200(sp)
    44dc:	d8c02b15 	stw	r3,172(sp)
    44e0:	003e0206 	br	3cec <___vfprintf_internal_r+0x189c>
    44e4:	df0022c4 	addi	fp,sp,139
    44e8:	dc002a15 	stw	r16,168(sp)
    44ec:	4027883a 	mov	r19,r8
    44f0:	e021883a 	mov	r16,fp
    44f4:	b009883a 	mov	r4,r22
    44f8:	01400284 	movi	r5,10
    44fc:	000c7bc0 	call	c7bc <__modsi3>
    4500:	10800c04 	addi	r2,r2,48
    4504:	843fffc4 	addi	r16,r16,-1
    4508:	b009883a 	mov	r4,r22
    450c:	01400284 	movi	r5,10
    4510:	80800005 	stb	r2,0(r16)
    4514:	000c7380 	call	c738 <__divsi3>
    4518:	102d883a 	mov	r22,r2
    451c:	00800244 	movi	r2,9
    4520:	15bff416 	blt	r2,r22,44f4 <___vfprintf_internal_r+0x20a4>
    4524:	9811883a 	mov	r8,r19
    4528:	b0800c04 	addi	r2,r22,48
    452c:	8027883a 	mov	r19,r16
    4530:	997fffc4 	addi	r5,r19,-1
    4534:	98bfffc5 	stb	r2,-1(r19)
    4538:	dc002a17 	ldw	r16,168(sp)
    453c:	2f006d2e 	bgeu	r5,fp,46f4 <___vfprintf_internal_r+0x22a4>
    4540:	d9c02384 	addi	r7,sp,142
    4544:	3ccfc83a 	sub	r7,r7,r19
    4548:	d9002344 	addi	r4,sp,141
    454c:	e1cf883a 	add	r7,fp,r7
    4550:	00000106 	br	4558 <___vfprintf_internal_r+0x2108>
    4554:	28800003 	ldbu	r2,0(r5)
    4558:	20800005 	stb	r2,0(r4)
    455c:	21000044 	addi	r4,r4,1
    4560:	29400044 	addi	r5,r5,1
    4564:	393ffb1e 	bne	r7,r4,4554 <___vfprintf_internal_r+0x2104>
    4568:	d8802304 	addi	r2,sp,140
    456c:	14c5c83a 	sub	r2,r2,r19
    4570:	d8c02344 	addi	r3,sp,141
    4574:	1885883a 	add	r2,r3,r2
    4578:	003f7006 	br	433c <___vfprintf_internal_r+0x1eec>
    457c:	0005883a 	mov	r2,zero
    4580:	003f0f06 	br	41c0 <___vfprintf_internal_r+0x1d70>
    4584:	d8c03217 	ldw	r3,200(sp)
    4588:	18c00044 	addi	r3,r3,1
    458c:	d8c02b15 	stw	r3,172(sp)
    4590:	1805883a 	mov	r2,r3
    4594:	183fb20e 	bge	r3,zero,4460 <___vfprintf_internal_r+0x2010>
    4598:	0005883a 	mov	r2,zero
    459c:	003fb006 	br	4460 <___vfprintf_internal_r+0x2010>
    45a0:	d9003617 	ldw	r4,216(sp)
    45a4:	000d883a 	mov	r6,zero
    45a8:	000f883a 	mov	r7,zero
    45ac:	980b883a 	mov	r5,r19
    45b0:	d8c03c15 	stw	r3,240(sp)
    45b4:	da003d15 	stw	r8,244(sp)
    45b8:	000db900 	call	db90 <__eqdf2>
    45bc:	d8c03c17 	ldw	r3,240(sp)
    45c0:	da003d17 	ldw	r8,244(sp)
    45c4:	103f9826 	beq	r2,zero,4428 <___vfprintf_internal_r+0x1fd8>
    45c8:	00800044 	movi	r2,1
    45cc:	10c7c83a 	sub	r3,r2,r3
    45d0:	d8c02615 	stw	r3,152(sp)
    45d4:	003f9506 	br	442c <___vfprintf_internal_r+0x1fdc>
    45d8:	d9002a17 	ldw	r4,168(sp)
    45dc:	d8c03217 	ldw	r3,200(sp)
    45e0:	20800044 	addi	r2,r4,1
    45e4:	1885883a 	add	r2,r3,r2
    45e8:	d8802b15 	stw	r2,172(sp)
    45ec:	103dbf0e 	bge	r2,zero,3cec <___vfprintf_internal_r+0x189c>
    45f0:	0005883a 	mov	r2,zero
    45f4:	003dbd06 	br	3cec <___vfprintf_internal_r+0x189c>
    45f8:	2000201e 	bne	r4,zero,467c <___vfprintf_internal_r+0x222c>
    45fc:	9480004c 	andi	r18,r18,1
    4600:	90001e1e 	bne	r18,zero,467c <___vfprintf_internal_r+0x222c>
    4604:	00800044 	movi	r2,1
    4608:	d8802b15 	stw	r2,172(sp)
    460c:	003db706 	br	3cec <___vfprintf_internal_r+0x189c>
    4610:	00800b44 	movi	r2,45
    4614:	05adc83a 	sub	r22,zero,r22
    4618:	d8802305 	stb	r2,140(sp)
    461c:	003f3f06 	br	431c <___vfprintf_internal_r+0x1ecc>
    4620:	0005883a 	mov	r2,zero
    4624:	003f5206 	br	4370 <___vfprintf_internal_r+0x1f20>
    4628:	90a4703a 	and	r18,r18,r2
    462c:	903f4e26 	beq	r18,zero,4368 <___vfprintf_internal_r+0x1f18>
    4630:	003f4a06 	br	435c <___vfprintf_internal_r+0x1f0c>
    4634:	00800084 	movi	r2,2
    4638:	10c5c83a 	sub	r2,r2,r3
    463c:	003f8406 	br	4450 <___vfprintf_internal_r+0x2000>
    4640:	d9402e17 	ldw	r5,184(sp)
    4644:	d9002e17 	ldw	r4,184(sp)
    4648:	ac400043 	ldbu	r17,1(r21)
    464c:	29400017 	ldw	r5,0(r5)
    4650:	20800104 	addi	r2,r4,4
    4654:	d8802e15 	stw	r2,184(sp)
    4658:	d9402a15 	stw	r5,168(sp)
    465c:	182b883a 	mov	r21,r3
    4660:	283e7b0e 	bge	r5,zero,4050 <___vfprintf_internal_r+0x1c00>
    4664:	8c403fcc 	andi	r17,r17,255
    4668:	017fffc4 	movi	r5,-1
    466c:	8c40201c 	xori	r17,r17,128
    4670:	d9402a15 	stw	r5,168(sp)
    4674:	8c7fe004 	addi	r17,r17,-128
    4678:	0037d706 	br	25d8 <___vfprintf_internal_r+0x188>
    467c:	d8c02a17 	ldw	r3,168(sp)
    4680:	18c00084 	addi	r3,r3,2
    4684:	d8c02b15 	stw	r3,172(sp)
    4688:	1805883a 	mov	r2,r3
    468c:	183d970e 	bge	r3,zero,3cec <___vfprintf_internal_r+0x189c>
    4690:	003fd706 	br	45f0 <___vfprintf_internal_r+0x21a0>
    4694:	0005883a 	mov	r2,zero
    4698:	003f8f06 	br	44d8 <___vfprintf_internal_r+0x2088>
    469c:	9080004c 	andi	r2,r18,1
    46a0:	103f821e 	bne	r2,zero,44ac <___vfprintf_internal_r+0x205c>
    46a4:	d8802117 	ldw	r2,132(sp)
    46a8:	1405c83a 	sub	r2,r2,r16
    46ac:	d8803315 	stw	r2,204(sp)
    46b0:	b47ef426 	beq	r22,r17,4284 <___vfprintf_internal_r+0x1e34>
    46b4:	dd802617 	ldw	r22,152(sp)
    46b8:	003f1206 	br	4304 <___vfprintf_internal_r+0x1eb4>
    46bc:	d8c02b03 	ldbu	r3,172(sp)
    46c0:	d8c02785 	stb	r3,158(sp)
    46c4:	0038df06 	br	2a44 <___vfprintf_internal_r+0x5f4>
    46c8:	d8c02b03 	ldbu	r3,172(sp)
    46cc:	d8c02785 	stb	r3,158(sp)
    46d0:	0038aa06 	br	297c <___vfprintf_internal_r+0x52c>
    46d4:	d8c02b03 	ldbu	r3,172(sp)
    46d8:	d8c02785 	stb	r3,158(sp)
    46dc:	003a4306 	br	2fec <___vfprintf_internal_r+0xb9c>
    46e0:	d8c02b03 	ldbu	r3,172(sp)
    46e4:	d8c02785 	stb	r3,158(sp)
    46e8:	003af506 	br	32c0 <___vfprintf_internal_r+0xe70>
    46ec:	0005883a 	mov	r2,zero
    46f0:	003d7b06 	br	3ce0 <___vfprintf_internal_r+0x1890>
    46f4:	d8802344 	addi	r2,sp,141
    46f8:	003f1006 	br	433c <___vfprintf_internal_r+0x1eec>
    46fc:	d8c02b03 	ldbu	r3,172(sp)
    4700:	d8c02785 	stb	r3,158(sp)
    4704:	0038fd06 	br	2afc <___vfprintf_internal_r+0x6ac>
    4708:	d8c02b03 	ldbu	r3,172(sp)
    470c:	d8c02785 	stb	r3,158(sp)
    4710:	003a9706 	br	3170 <___vfprintf_internal_r+0xd20>
    4714:	d8c02b03 	ldbu	r3,172(sp)
    4718:	d8c02785 	stb	r3,158(sp)
    471c:	003a1806 	br	2f80 <___vfprintf_internal_r+0xb30>
    4720:	d8c02b03 	ldbu	r3,172(sp)
    4724:	d8c02785 	stb	r3,158(sp)
    4728:	003abe06 	br	3224 <___vfprintf_internal_r+0xdd4>

0000472c <__vfprintf_internal>:
    472c:	00800074 	movhi	r2,1
    4730:	108fc404 	addi	r2,r2,16144
    4734:	300f883a 	mov	r7,r6
    4738:	280d883a 	mov	r6,r5
    473c:	200b883a 	mov	r5,r4
    4740:	11000017 	ldw	r4,0(r2)
    4744:	00024501 	jmpi	2450 <___vfprintf_internal_r>

00004748 <__sbprintf>:
    4748:	2880030b 	ldhu	r2,12(r5)
    474c:	2ac01917 	ldw	r11,100(r5)
    4750:	2a80038b 	ldhu	r10,14(r5)
    4754:	2a400717 	ldw	r9,28(r5)
    4758:	2a000917 	ldw	r8,36(r5)
    475c:	defee204 	addi	sp,sp,-1144
    4760:	00c10004 	movi	r3,1024
    4764:	dc011a15 	stw	r16,1128(sp)
    4768:	10bfff4c 	andi	r2,r2,65533
    476c:	2821883a 	mov	r16,r5
    4770:	d8cb883a 	add	r5,sp,r3
    4774:	dc811c15 	stw	r18,1136(sp)
    4778:	dc411b15 	stw	r17,1132(sp)
    477c:	dfc11d15 	stw	ra,1140(sp)
    4780:	2025883a 	mov	r18,r4
    4784:	d881030d 	sth	r2,1036(sp)
    4788:	dac11915 	stw	r11,1124(sp)
    478c:	da81038d 	sth	r10,1038(sp)
    4790:	da410715 	stw	r9,1052(sp)
    4794:	da010915 	stw	r8,1060(sp)
    4798:	dec10015 	stw	sp,1024(sp)
    479c:	dec10415 	stw	sp,1040(sp)
    47a0:	d8c10215 	stw	r3,1032(sp)
    47a4:	d8c10515 	stw	r3,1044(sp)
    47a8:	d8010615 	stw	zero,1048(sp)
    47ac:	00024500 	call	2450 <___vfprintf_internal_r>
    47b0:	1023883a 	mov	r17,r2
    47b4:	10000416 	blt	r2,zero,47c8 <__sbprintf+0x80>
    47b8:	d9410004 	addi	r5,sp,1024
    47bc:	9009883a 	mov	r4,r18
    47c0:	00064240 	call	6424 <_fflush_r>
    47c4:	10000d1e 	bne	r2,zero,47fc <__sbprintf+0xb4>
    47c8:	d881030b 	ldhu	r2,1036(sp)
    47cc:	1080100c 	andi	r2,r2,64
    47d0:	10000326 	beq	r2,zero,47e0 <__sbprintf+0x98>
    47d4:	8080030b 	ldhu	r2,12(r16)
    47d8:	10801014 	ori	r2,r2,64
    47dc:	8080030d 	sth	r2,12(r16)
    47e0:	8805883a 	mov	r2,r17
    47e4:	dfc11d17 	ldw	ra,1140(sp)
    47e8:	dc811c17 	ldw	r18,1136(sp)
    47ec:	dc411b17 	ldw	r17,1132(sp)
    47f0:	dc011a17 	ldw	r16,1128(sp)
    47f4:	dec11e04 	addi	sp,sp,1144
    47f8:	f800283a 	ret
    47fc:	047fffc4 	movi	r17,-1
    4800:	003ff106 	br	47c8 <__sbprintf+0x80>

00004804 <__swsetup_r>:
    4804:	00800074 	movhi	r2,1
    4808:	defffd04 	addi	sp,sp,-12
    480c:	108fc404 	addi	r2,r2,16144
    4810:	dc400115 	stw	r17,4(sp)
    4814:	2023883a 	mov	r17,r4
    4818:	11000017 	ldw	r4,0(r2)
    481c:	dc000015 	stw	r16,0(sp)
    4820:	dfc00215 	stw	ra,8(sp)
    4824:	2821883a 	mov	r16,r5
    4828:	20000226 	beq	r4,zero,4834 <__swsetup_r+0x30>
    482c:	20800e17 	ldw	r2,56(r4)
    4830:	10003126 	beq	r2,zero,48f8 <__swsetup_r+0xf4>
    4834:	8080030b 	ldhu	r2,12(r16)
    4838:	10c0020c 	andi	r3,r2,8
    483c:	1009883a 	mov	r4,r2
    4840:	18000f26 	beq	r3,zero,4880 <__swsetup_r+0x7c>
    4844:	80c00417 	ldw	r3,16(r16)
    4848:	18001526 	beq	r3,zero,48a0 <__swsetup_r+0x9c>
    484c:	1100004c 	andi	r4,r2,1
    4850:	20001c1e 	bne	r4,zero,48c4 <__swsetup_r+0xc0>
    4854:	1080008c 	andi	r2,r2,2
    4858:	1000291e 	bne	r2,zero,4900 <__swsetup_r+0xfc>
    485c:	80800517 	ldw	r2,20(r16)
    4860:	80800215 	stw	r2,8(r16)
    4864:	18001c26 	beq	r3,zero,48d8 <__swsetup_r+0xd4>
    4868:	0005883a 	mov	r2,zero
    486c:	dfc00217 	ldw	ra,8(sp)
    4870:	dc400117 	ldw	r17,4(sp)
    4874:	dc000017 	ldw	r16,0(sp)
    4878:	dec00304 	addi	sp,sp,12
    487c:	f800283a 	ret
    4880:	2080040c 	andi	r2,r4,16
    4884:	10002e26 	beq	r2,zero,4940 <__swsetup_r+0x13c>
    4888:	2080010c 	andi	r2,r4,4
    488c:	10001e1e 	bne	r2,zero,4908 <__swsetup_r+0x104>
    4890:	80c00417 	ldw	r3,16(r16)
    4894:	20800214 	ori	r2,r4,8
    4898:	8080030d 	sth	r2,12(r16)
    489c:	183feb1e 	bne	r3,zero,484c <__swsetup_r+0x48>
    48a0:	1100a00c 	andi	r4,r2,640
    48a4:	01408004 	movi	r5,512
    48a8:	217fe826 	beq	r4,r5,484c <__swsetup_r+0x48>
    48ac:	800b883a 	mov	r5,r16
    48b0:	8809883a 	mov	r4,r17
    48b4:	00073c00 	call	73c0 <__smakebuf_r>
    48b8:	8080030b 	ldhu	r2,12(r16)
    48bc:	80c00417 	ldw	r3,16(r16)
    48c0:	003fe206 	br	484c <__swsetup_r+0x48>
    48c4:	80800517 	ldw	r2,20(r16)
    48c8:	80000215 	stw	zero,8(r16)
    48cc:	0085c83a 	sub	r2,zero,r2
    48d0:	80800615 	stw	r2,24(r16)
    48d4:	183fe41e 	bne	r3,zero,4868 <__swsetup_r+0x64>
    48d8:	80c0030b 	ldhu	r3,12(r16)
    48dc:	0005883a 	mov	r2,zero
    48e0:	1900200c 	andi	r4,r3,128
    48e4:	203fe126 	beq	r4,zero,486c <__swsetup_r+0x68>
    48e8:	18c01014 	ori	r3,r3,64
    48ec:	80c0030d 	sth	r3,12(r16)
    48f0:	00bfffc4 	movi	r2,-1
    48f4:	003fdd06 	br	486c <__swsetup_r+0x68>
    48f8:	00068100 	call	6810 <__sinit>
    48fc:	003fcd06 	br	4834 <__swsetup_r+0x30>
    4900:	0005883a 	mov	r2,zero
    4904:	003fd606 	br	4860 <__swsetup_r+0x5c>
    4908:	81400c17 	ldw	r5,48(r16)
    490c:	28000626 	beq	r5,zero,4928 <__swsetup_r+0x124>
    4910:	80801004 	addi	r2,r16,64
    4914:	28800326 	beq	r5,r2,4924 <__swsetup_r+0x120>
    4918:	8809883a 	mov	r4,r17
    491c:	00069840 	call	6984 <_free_r>
    4920:	8100030b 	ldhu	r4,12(r16)
    4924:	80000c15 	stw	zero,48(r16)
    4928:	80c00417 	ldw	r3,16(r16)
    492c:	00bff6c4 	movi	r2,-37
    4930:	1108703a 	and	r4,r2,r4
    4934:	80000115 	stw	zero,4(r16)
    4938:	80c00015 	stw	r3,0(r16)
    493c:	003fd506 	br	4894 <__swsetup_r+0x90>
    4940:	00800244 	movi	r2,9
    4944:	88800015 	stw	r2,0(r17)
    4948:	20801014 	ori	r2,r4,64
    494c:	8080030d 	sth	r2,12(r16)
    4950:	00bfffc4 	movi	r2,-1
    4954:	003fc506 	br	486c <__swsetup_r+0x68>

00004958 <quorem>:
    4958:	defff204 	addi	sp,sp,-56
    495c:	ddc00b15 	stw	r23,44(sp)
    4960:	20800417 	ldw	r2,16(r4)
    4964:	2dc00417 	ldw	r23,16(r5)
    4968:	dfc00d15 	stw	ra,52(sp)
    496c:	df000c15 	stw	fp,48(sp)
    4970:	dd800a15 	stw	r22,40(sp)
    4974:	dd400915 	stw	r21,36(sp)
    4978:	dd000815 	stw	r20,32(sp)
    497c:	dcc00715 	stw	r19,28(sp)
    4980:	dc800615 	stw	r18,24(sp)
    4984:	dc400515 	stw	r17,20(sp)
    4988:	dc000415 	stw	r16,16(sp)
    498c:	15c07a16 	blt	r2,r23,4b78 <quorem+0x220>
    4990:	bdffffc4 	addi	r23,r23,-1
    4994:	bde9883a 	add	r20,r23,r23
    4998:	28c00504 	addi	r3,r5,20
    499c:	a529883a 	add	r20,r20,r20
    49a0:	1d39883a 	add	fp,r3,r20
    49a4:	24c00504 	addi	r19,r4,20
    49a8:	d9400215 	stw	r5,8(sp)
    49ac:	9d29883a 	add	r20,r19,r20
    49b0:	e1400017 	ldw	r5,0(fp)
    49b4:	d9000015 	stw	r4,0(sp)
    49b8:	a1000017 	ldw	r4,0(r20)
    49bc:	29400044 	addi	r5,r5,1
    49c0:	d8c00115 	stw	r3,4(sp)
    49c4:	dd000315 	stw	r20,12(sp)
    49c8:	000c8300 	call	c830 <__udivsi3>
    49cc:	1025883a 	mov	r18,r2
    49d0:	10003026 	beq	r2,zero,4a94 <quorem+0x13c>
    49d4:	dc400117 	ldw	r17,4(sp)
    49d8:	9829883a 	mov	r20,r19
    49dc:	002d883a 	mov	r22,zero
    49e0:	0021883a 	mov	r16,zero
    49e4:	8d400017 	ldw	r21,0(r17)
    49e8:	900b883a 	mov	r5,r18
    49ec:	8c400104 	addi	r17,r17,4
    49f0:	a93fffcc 	andi	r4,r21,65535
    49f4:	000c8ec0 	call	c8ec <__mulsi3>
    49f8:	a808d43a 	srli	r4,r21,16
    49fc:	900b883a 	mov	r5,r18
    4a00:	15ad883a 	add	r22,r2,r22
    4a04:	000c8ec0 	call	c8ec <__mulsi3>
    4a08:	a1000017 	ldw	r4,0(r20)
    4a0c:	b00cd43a 	srli	r6,r22,16
    4a10:	b0ffffcc 	andi	r3,r22,65535
    4a14:	217fffcc 	andi	r5,r4,65535
    4a18:	2c21883a 	add	r16,r5,r16
    4a1c:	80c7c83a 	sub	r3,r16,r3
    4a20:	2008d43a 	srli	r4,r4,16
    4a24:	1185883a 	add	r2,r2,r6
    4a28:	1821d43a 	srai	r16,r3,16
    4a2c:	117fffcc 	andi	r5,r2,65535
    4a30:	2149c83a 	sub	r4,r4,r5
    4a34:	2421883a 	add	r16,r4,r16
    4a38:	8008943a 	slli	r4,r16,16
    4a3c:	18ffffcc 	andi	r3,r3,65535
    4a40:	102cd43a 	srli	r22,r2,16
    4a44:	20c8b03a 	or	r4,r4,r3
    4a48:	a1000015 	stw	r4,0(r20)
    4a4c:	8021d43a 	srai	r16,r16,16
    4a50:	a5000104 	addi	r20,r20,4
    4a54:	e47fe32e 	bgeu	fp,r17,49e4 <quorem+0x8c>
    4a58:	d8c00317 	ldw	r3,12(sp)
    4a5c:	18800017 	ldw	r2,0(r3)
    4a60:	10000c1e 	bne	r2,zero,4a94 <quorem+0x13c>
    4a64:	18bfff04 	addi	r2,r3,-4
    4a68:	9880082e 	bgeu	r19,r2,4a8c <quorem+0x134>
    4a6c:	18ffff17 	ldw	r3,-4(r3)
    4a70:	18000326 	beq	r3,zero,4a80 <quorem+0x128>
    4a74:	00000506 	br	4a8c <quorem+0x134>
    4a78:	10c00017 	ldw	r3,0(r2)
    4a7c:	1800031e 	bne	r3,zero,4a8c <quorem+0x134>
    4a80:	10bfff04 	addi	r2,r2,-4
    4a84:	bdffffc4 	addi	r23,r23,-1
    4a88:	98bffb36 	bltu	r19,r2,4a78 <quorem+0x120>
    4a8c:	d8c00017 	ldw	r3,0(sp)
    4a90:	1dc00415 	stw	r23,16(r3)
    4a94:	d9400217 	ldw	r5,8(sp)
    4a98:	d9000017 	ldw	r4,0(sp)
    4a9c:	0008bbc0 	call	8bbc <__mcmp>
    4aa0:	10002816 	blt	r2,zero,4b44 <quorem+0x1ec>
    4aa4:	dc400117 	ldw	r17,4(sp)
    4aa8:	94800044 	addi	r18,r18,1
    4aac:	980d883a 	mov	r6,r19
    4ab0:	0007883a 	mov	r3,zero
    4ab4:	31000017 	ldw	r4,0(r6)
    4ab8:	89400017 	ldw	r5,0(r17)
    4abc:	31800104 	addi	r6,r6,4
    4ac0:	20bfffcc 	andi	r2,r4,65535
    4ac4:	10c7883a 	add	r3,r2,r3
    4ac8:	28bfffcc 	andi	r2,r5,65535
    4acc:	1885c83a 	sub	r2,r3,r2
    4ad0:	280ad43a 	srli	r5,r5,16
    4ad4:	2008d43a 	srli	r4,r4,16
    4ad8:	1007d43a 	srai	r3,r2,16
    4adc:	10bfffcc 	andi	r2,r2,65535
    4ae0:	2149c83a 	sub	r4,r4,r5
    4ae4:	20c9883a 	add	r4,r4,r3
    4ae8:	200a943a 	slli	r5,r4,16
    4aec:	8c400104 	addi	r17,r17,4
    4af0:	2007d43a 	srai	r3,r4,16
    4af4:	2884b03a 	or	r2,r5,r2
    4af8:	30bfff15 	stw	r2,-4(r6)
    4afc:	e47fed2e 	bgeu	fp,r17,4ab4 <quorem+0x15c>
    4b00:	bdc5883a 	add	r2,r23,r23
    4b04:	1085883a 	add	r2,r2,r2
    4b08:	9887883a 	add	r3,r19,r2
    4b0c:	18800017 	ldw	r2,0(r3)
    4b10:	10000c1e 	bne	r2,zero,4b44 <quorem+0x1ec>
    4b14:	18bfff04 	addi	r2,r3,-4
    4b18:	9880082e 	bgeu	r19,r2,4b3c <quorem+0x1e4>
    4b1c:	18ffff17 	ldw	r3,-4(r3)
    4b20:	18000326 	beq	r3,zero,4b30 <quorem+0x1d8>
    4b24:	00000506 	br	4b3c <quorem+0x1e4>
    4b28:	10c00017 	ldw	r3,0(r2)
    4b2c:	1800031e 	bne	r3,zero,4b3c <quorem+0x1e4>
    4b30:	10bfff04 	addi	r2,r2,-4
    4b34:	bdffffc4 	addi	r23,r23,-1
    4b38:	98bffb36 	bltu	r19,r2,4b28 <quorem+0x1d0>
    4b3c:	d8c00017 	ldw	r3,0(sp)
    4b40:	1dc00415 	stw	r23,16(r3)
    4b44:	9005883a 	mov	r2,r18
    4b48:	dfc00d17 	ldw	ra,52(sp)
    4b4c:	df000c17 	ldw	fp,48(sp)
    4b50:	ddc00b17 	ldw	r23,44(sp)
    4b54:	dd800a17 	ldw	r22,40(sp)
    4b58:	dd400917 	ldw	r21,36(sp)
    4b5c:	dd000817 	ldw	r20,32(sp)
    4b60:	dcc00717 	ldw	r19,28(sp)
    4b64:	dc800617 	ldw	r18,24(sp)
    4b68:	dc400517 	ldw	r17,20(sp)
    4b6c:	dc000417 	ldw	r16,16(sp)
    4b70:	dec00e04 	addi	sp,sp,56
    4b74:	f800283a 	ret
    4b78:	0005883a 	mov	r2,zero
    4b7c:	003ff206 	br	4b48 <quorem+0x1f0>

00004b80 <_dtoa_r>:
    4b80:	20801017 	ldw	r2,64(r4)
    4b84:	deffde04 	addi	sp,sp,-136
    4b88:	df002015 	stw	fp,128(sp)
    4b8c:	dcc01b15 	stw	r19,108(sp)
    4b90:	dc801a15 	stw	r18,104(sp)
    4b94:	dc401915 	stw	r17,100(sp)
    4b98:	dc001815 	stw	r16,96(sp)
    4b9c:	dfc02115 	stw	ra,132(sp)
    4ba0:	ddc01f15 	stw	r23,124(sp)
    4ba4:	dd801e15 	stw	r22,120(sp)
    4ba8:	dd401d15 	stw	r21,116(sp)
    4bac:	dd001c15 	stw	r20,112(sp)
    4bb0:	d9c00315 	stw	r7,12(sp)
    4bb4:	2039883a 	mov	fp,r4
    4bb8:	3023883a 	mov	r17,r6
    4bbc:	2825883a 	mov	r18,r5
    4bc0:	dc002417 	ldw	r16,144(sp)
    4bc4:	3027883a 	mov	r19,r6
    4bc8:	10000826 	beq	r2,zero,4bec <_dtoa_r+0x6c>
    4bcc:	21801117 	ldw	r6,68(r4)
    4bd0:	00c00044 	movi	r3,1
    4bd4:	100b883a 	mov	r5,r2
    4bd8:	1986983a 	sll	r3,r3,r6
    4bdc:	11800115 	stw	r6,4(r2)
    4be0:	10c00215 	stw	r3,8(r2)
    4be4:	00082e00 	call	82e0 <_Bfree>
    4be8:	e0001015 	stw	zero,64(fp)
    4bec:	88002e16 	blt	r17,zero,4ca8 <_dtoa_r+0x128>
    4bf0:	80000015 	stw	zero,0(r16)
    4bf4:	889ffc2c 	andhi	r2,r17,32752
    4bf8:	00dffc34 	movhi	r3,32752
    4bfc:	10c01c26 	beq	r2,r3,4c70 <_dtoa_r+0xf0>
    4c00:	000d883a 	mov	r6,zero
    4c04:	000f883a 	mov	r7,zero
    4c08:	9009883a 	mov	r4,r18
    4c0c:	980b883a 	mov	r5,r19
    4c10:	000db900 	call	db90 <__eqdf2>
    4c14:	10002b1e 	bne	r2,zero,4cc4 <_dtoa_r+0x144>
    4c18:	d9c02317 	ldw	r7,140(sp)
    4c1c:	00800044 	movi	r2,1
    4c20:	38800015 	stw	r2,0(r7)
    4c24:	d8802517 	ldw	r2,148(sp)
    4c28:	10019e26 	beq	r2,zero,52a4 <_dtoa_r+0x724>
    4c2c:	d8c02517 	ldw	r3,148(sp)
    4c30:	00800074 	movhi	r2,1
    4c34:	10886944 	addi	r2,r2,8613
    4c38:	18800015 	stw	r2,0(r3)
    4c3c:	10bfffc4 	addi	r2,r2,-1
    4c40:	dfc02117 	ldw	ra,132(sp)
    4c44:	df002017 	ldw	fp,128(sp)
    4c48:	ddc01f17 	ldw	r23,124(sp)
    4c4c:	dd801e17 	ldw	r22,120(sp)
    4c50:	dd401d17 	ldw	r21,116(sp)
    4c54:	dd001c17 	ldw	r20,112(sp)
    4c58:	dcc01b17 	ldw	r19,108(sp)
    4c5c:	dc801a17 	ldw	r18,104(sp)
    4c60:	dc401917 	ldw	r17,100(sp)
    4c64:	dc001817 	ldw	r16,96(sp)
    4c68:	dec02204 	addi	sp,sp,136
    4c6c:	f800283a 	ret
    4c70:	d8c02317 	ldw	r3,140(sp)
    4c74:	0089c3c4 	movi	r2,9999
    4c78:	18800015 	stw	r2,0(r3)
    4c7c:	90017726 	beq	r18,zero,525c <_dtoa_r+0x6dc>
    4c80:	00800074 	movhi	r2,1
    4c84:	10887504 	addi	r2,r2,8660
    4c88:	d9002517 	ldw	r4,148(sp)
    4c8c:	203fec26 	beq	r4,zero,4c40 <_dtoa_r+0xc0>
    4c90:	10c000c7 	ldb	r3,3(r2)
    4c94:	1801781e 	bne	r3,zero,5278 <_dtoa_r+0x6f8>
    4c98:	10c000c4 	addi	r3,r2,3
    4c9c:	d9802517 	ldw	r6,148(sp)
    4ca0:	30c00015 	stw	r3,0(r6)
    4ca4:	003fe606 	br	4c40 <_dtoa_r+0xc0>
    4ca8:	04e00034 	movhi	r19,32768
    4cac:	9cffffc4 	addi	r19,r19,-1
    4cb0:	00800044 	movi	r2,1
    4cb4:	8ce6703a 	and	r19,r17,r19
    4cb8:	80800015 	stw	r2,0(r16)
    4cbc:	9823883a 	mov	r17,r19
    4cc0:	003fcc06 	br	4bf4 <_dtoa_r+0x74>
    4cc4:	d8800204 	addi	r2,sp,8
    4cc8:	d8800015 	stw	r2,0(sp)
    4ccc:	d9c00104 	addi	r7,sp,4
    4cd0:	900b883a 	mov	r5,r18
    4cd4:	980d883a 	mov	r6,r19
    4cd8:	e009883a 	mov	r4,fp
    4cdc:	8820d53a 	srli	r16,r17,20
    4ce0:	0008f880 	call	8f88 <__d2b>
    4ce4:	d8800915 	stw	r2,36(sp)
    4ce8:	8001651e 	bne	r16,zero,5280 <_dtoa_r+0x700>
    4cec:	dd800217 	ldw	r22,8(sp)
    4cf0:	dc000117 	ldw	r16,4(sp)
    4cf4:	00800804 	movi	r2,32
    4cf8:	b421883a 	add	r16,r22,r16
    4cfc:	80c10c84 	addi	r3,r16,1074
    4d00:	10c2d10e 	bge	r2,r3,5848 <_dtoa_r+0xcc8>
    4d04:	00801004 	movi	r2,64
    4d08:	81010484 	addi	r4,r16,1042
    4d0c:	10c7c83a 	sub	r3,r2,r3
    4d10:	9108d83a 	srl	r4,r18,r4
    4d14:	88e2983a 	sll	r17,r17,r3
    4d18:	2448b03a 	or	r4,r4,r17
    4d1c:	000f0ac0 	call	f0ac <__floatunsidf>
    4d20:	017f8434 	movhi	r5,65040
    4d24:	01800044 	movi	r6,1
    4d28:	1009883a 	mov	r4,r2
    4d2c:	194b883a 	add	r5,r3,r5
    4d30:	843fffc4 	addi	r16,r16,-1
    4d34:	d9801115 	stw	r6,68(sp)
    4d38:	000d883a 	mov	r6,zero
    4d3c:	01cffe34 	movhi	r7,16376
    4d40:	000e6540 	call	e654 <__subdf3>
    4d44:	0198dbf4 	movhi	r6,25455
    4d48:	01cff4f4 	movhi	r7,16339
    4d4c:	3190d844 	addi	r6,r6,17249
    4d50:	39e1e9c4 	addi	r7,r7,-30809
    4d54:	1009883a 	mov	r4,r2
    4d58:	180b883a 	mov	r5,r3
    4d5c:	000dde80 	call	dde8 <__muldf3>
    4d60:	01a2d874 	movhi	r6,35681
    4d64:	01cff1f4 	movhi	r7,16327
    4d68:	31b22cc4 	addi	r6,r6,-14157
    4d6c:	39e28a04 	addi	r7,r7,-30168
    4d70:	180b883a 	mov	r5,r3
    4d74:	1009883a 	mov	r4,r2
    4d78:	000c9140 	call	c914 <__adddf3>
    4d7c:	8009883a 	mov	r4,r16
    4d80:	1029883a 	mov	r20,r2
    4d84:	1823883a 	mov	r17,r3
    4d88:	000efd00 	call	efd0 <__floatsidf>
    4d8c:	019427f4 	movhi	r6,20639
    4d90:	01cff4f4 	movhi	r7,16339
    4d94:	319e7ec4 	addi	r6,r6,31227
    4d98:	39d104c4 	addi	r7,r7,17427
    4d9c:	1009883a 	mov	r4,r2
    4da0:	180b883a 	mov	r5,r3
    4da4:	000dde80 	call	dde8 <__muldf3>
    4da8:	100d883a 	mov	r6,r2
    4dac:	180f883a 	mov	r7,r3
    4db0:	a009883a 	mov	r4,r20
    4db4:	880b883a 	mov	r5,r17
    4db8:	000c9140 	call	c914 <__adddf3>
    4dbc:	1009883a 	mov	r4,r2
    4dc0:	180b883a 	mov	r5,r3
    4dc4:	1029883a 	mov	r20,r2
    4dc8:	1823883a 	mov	r17,r3
    4dcc:	000ef500 	call	ef50 <__fixdfsi>
    4dd0:	000d883a 	mov	r6,zero
    4dd4:	000f883a 	mov	r7,zero
    4dd8:	a009883a 	mov	r4,r20
    4ddc:	880b883a 	mov	r5,r17
    4de0:	d8800515 	stw	r2,20(sp)
    4de4:	000dcf40 	call	dcf4 <__ledf2>
    4de8:	10028716 	blt	r2,zero,5808 <_dtoa_r+0xc88>
    4dec:	d8c00517 	ldw	r3,20(sp)
    4df0:	00800584 	movi	r2,22
    4df4:	10c27536 	bltu	r2,r3,57cc <_dtoa_r+0xc4c>
    4df8:	180490fa 	slli	r2,r3,3
    4dfc:	00c00074 	movhi	r3,1
    4e00:	18c89104 	addi	r3,r3,8772
    4e04:	1885883a 	add	r2,r3,r2
    4e08:	11000017 	ldw	r4,0(r2)
    4e0c:	11400117 	ldw	r5,4(r2)
    4e10:	900d883a 	mov	r6,r18
    4e14:	980f883a 	mov	r7,r19
    4e18:	000dc180 	call	dc18 <__gedf2>
    4e1c:	00828d0e 	bge	zero,r2,5854 <_dtoa_r+0xcd4>
    4e20:	d9000517 	ldw	r4,20(sp)
    4e24:	d8000e15 	stw	zero,56(sp)
    4e28:	213fffc4 	addi	r4,r4,-1
    4e2c:	d9000515 	stw	r4,20(sp)
    4e30:	b42dc83a 	sub	r22,r22,r16
    4e34:	b5bfffc4 	addi	r22,r22,-1
    4e38:	b0026f16 	blt	r22,zero,57f8 <_dtoa_r+0xc78>
    4e3c:	d8000815 	stw	zero,32(sp)
    4e40:	d9c00517 	ldw	r7,20(sp)
    4e44:	38026416 	blt	r7,zero,57d8 <_dtoa_r+0xc58>
    4e48:	b1ed883a 	add	r22,r22,r7
    4e4c:	d9c00d15 	stw	r7,52(sp)
    4e50:	d8000a15 	stw	zero,40(sp)
    4e54:	d9800317 	ldw	r6,12(sp)
    4e58:	00800244 	movi	r2,9
    4e5c:	11811436 	bltu	r2,r6,52b0 <_dtoa_r+0x730>
    4e60:	00800144 	movi	r2,5
    4e64:	1184e10e 	bge	r2,r6,61ec <_dtoa_r+0x166c>
    4e68:	31bfff04 	addi	r6,r6,-4
    4e6c:	d9800315 	stw	r6,12(sp)
    4e70:	0023883a 	mov	r17,zero
    4e74:	d9800317 	ldw	r6,12(sp)
    4e78:	008000c4 	movi	r2,3
    4e7c:	30836726 	beq	r6,r2,5c1c <_dtoa_r+0x109c>
    4e80:	1183410e 	bge	r2,r6,5b88 <_dtoa_r+0x1008>
    4e84:	d9c00317 	ldw	r7,12(sp)
    4e88:	00800104 	movi	r2,4
    4e8c:	38827c26 	beq	r7,r2,5880 <_dtoa_r+0xd00>
    4e90:	00800144 	movi	r2,5
    4e94:	3884c41e 	bne	r7,r2,61a8 <_dtoa_r+0x1628>
    4e98:	00800044 	movi	r2,1
    4e9c:	d8800b15 	stw	r2,44(sp)
    4ea0:	d8c00517 	ldw	r3,20(sp)
    4ea4:	d9002217 	ldw	r4,136(sp)
    4ea8:	1907883a 	add	r3,r3,r4
    4eac:	19800044 	addi	r6,r3,1
    4eb0:	d8c00c15 	stw	r3,48(sp)
    4eb4:	d9800615 	stw	r6,24(sp)
    4eb8:	0183a40e 	bge	zero,r6,5d4c <_dtoa_r+0x11cc>
    4ebc:	d9800617 	ldw	r6,24(sp)
    4ec0:	3021883a 	mov	r16,r6
    4ec4:	e0001115 	stw	zero,68(fp)
    4ec8:	008005c4 	movi	r2,23
    4ecc:	1184c92e 	bgeu	r2,r6,61f4 <_dtoa_r+0x1674>
    4ed0:	00c00044 	movi	r3,1
    4ed4:	00800104 	movi	r2,4
    4ed8:	1085883a 	add	r2,r2,r2
    4edc:	11000504 	addi	r4,r2,20
    4ee0:	180b883a 	mov	r5,r3
    4ee4:	18c00044 	addi	r3,r3,1
    4ee8:	313ffb2e 	bgeu	r6,r4,4ed8 <_dtoa_r+0x358>
    4eec:	e1401115 	stw	r5,68(fp)
    4ef0:	e009883a 	mov	r4,fp
    4ef4:	00082380 	call	8238 <_Balloc>
    4ef8:	d8800715 	stw	r2,28(sp)
    4efc:	e0801015 	stw	r2,64(fp)
    4f00:	00800384 	movi	r2,14
    4f04:	1400f736 	bltu	r2,r16,52e4 <_dtoa_r+0x764>
    4f08:	8800f626 	beq	r17,zero,52e4 <_dtoa_r+0x764>
    4f0c:	d9c00517 	ldw	r7,20(sp)
    4f10:	01c39a0e 	bge	zero,r7,5d7c <_dtoa_r+0x11fc>
    4f14:	388003cc 	andi	r2,r7,15
    4f18:	100490fa 	slli	r2,r2,3
    4f1c:	382bd13a 	srai	r21,r7,4
    4f20:	00c00074 	movhi	r3,1
    4f24:	18c89104 	addi	r3,r3,8772
    4f28:	1885883a 	add	r2,r3,r2
    4f2c:	a8c0040c 	andi	r3,r21,16
    4f30:	12400017 	ldw	r9,0(r2)
    4f34:	12000117 	ldw	r8,4(r2)
    4f38:	18037926 	beq	r3,zero,5d20 <_dtoa_r+0x11a0>
    4f3c:	00800074 	movhi	r2,1
    4f40:	10888704 	addi	r2,r2,8732
    4f44:	11800817 	ldw	r6,32(r2)
    4f48:	11c00917 	ldw	r7,36(r2)
    4f4c:	9009883a 	mov	r4,r18
    4f50:	980b883a 	mov	r5,r19
    4f54:	da001715 	stw	r8,92(sp)
    4f58:	da401615 	stw	r9,88(sp)
    4f5c:	000d1c00 	call	d1c0 <__divdf3>
    4f60:	da001717 	ldw	r8,92(sp)
    4f64:	da401617 	ldw	r9,88(sp)
    4f68:	ad4003cc 	andi	r21,r21,15
    4f6c:	040000c4 	movi	r16,3
    4f70:	1023883a 	mov	r17,r2
    4f74:	1829883a 	mov	r20,r3
    4f78:	a8001126 	beq	r21,zero,4fc0 <_dtoa_r+0x440>
    4f7c:	05c00074 	movhi	r23,1
    4f80:	bdc88704 	addi	r23,r23,8732
    4f84:	4805883a 	mov	r2,r9
    4f88:	4007883a 	mov	r3,r8
    4f8c:	a980004c 	andi	r6,r21,1
    4f90:	1009883a 	mov	r4,r2
    4f94:	a82bd07a 	srai	r21,r21,1
    4f98:	180b883a 	mov	r5,r3
    4f9c:	30000426 	beq	r6,zero,4fb0 <_dtoa_r+0x430>
    4fa0:	b9800017 	ldw	r6,0(r23)
    4fa4:	b9c00117 	ldw	r7,4(r23)
    4fa8:	84000044 	addi	r16,r16,1
    4fac:	000dde80 	call	dde8 <__muldf3>
    4fb0:	bdc00204 	addi	r23,r23,8
    4fb4:	a83ff51e 	bne	r21,zero,4f8c <_dtoa_r+0x40c>
    4fb8:	1013883a 	mov	r9,r2
    4fbc:	1811883a 	mov	r8,r3
    4fc0:	480d883a 	mov	r6,r9
    4fc4:	400f883a 	mov	r7,r8
    4fc8:	8809883a 	mov	r4,r17
    4fcc:	a00b883a 	mov	r5,r20
    4fd0:	000d1c00 	call	d1c0 <__divdf3>
    4fd4:	d8800f15 	stw	r2,60(sp)
    4fd8:	d8c01015 	stw	r3,64(sp)
    4fdc:	d8c00e17 	ldw	r3,56(sp)
    4fe0:	18000626 	beq	r3,zero,4ffc <_dtoa_r+0x47c>
    4fe4:	d9000f17 	ldw	r4,60(sp)
    4fe8:	d9401017 	ldw	r5,64(sp)
    4fec:	000d883a 	mov	r6,zero
    4ff0:	01cffc34 	movhi	r7,16368
    4ff4:	000dcf40 	call	dcf4 <__ledf2>
    4ff8:	10040b16 	blt	r2,zero,6028 <_dtoa_r+0x14a8>
    4ffc:	8009883a 	mov	r4,r16
    5000:	000efd00 	call	efd0 <__floatsidf>
    5004:	d9800f17 	ldw	r6,60(sp)
    5008:	d9c01017 	ldw	r7,64(sp)
    500c:	1009883a 	mov	r4,r2
    5010:	180b883a 	mov	r5,r3
    5014:	000dde80 	call	dde8 <__muldf3>
    5018:	000d883a 	mov	r6,zero
    501c:	01d00734 	movhi	r7,16412
    5020:	1009883a 	mov	r4,r2
    5024:	180b883a 	mov	r5,r3
    5028:	000c9140 	call	c914 <__adddf3>
    502c:	1021883a 	mov	r16,r2
    5030:	d8800617 	ldw	r2,24(sp)
    5034:	047f3034 	movhi	r17,64704
    5038:	1c63883a 	add	r17,r3,r17
    503c:	10031826 	beq	r2,zero,5ca0 <_dtoa_r+0x1120>
    5040:	d8c00517 	ldw	r3,20(sp)
    5044:	db000617 	ldw	r12,24(sp)
    5048:	d8c01315 	stw	r3,76(sp)
    504c:	d9000b17 	ldw	r4,44(sp)
    5050:	20038f26 	beq	r4,zero,5e90 <_dtoa_r+0x1310>
    5054:	60bfffc4 	addi	r2,r12,-1
    5058:	100490fa 	slli	r2,r2,3
    505c:	00c00074 	movhi	r3,1
    5060:	18c89104 	addi	r3,r3,8772
    5064:	1885883a 	add	r2,r3,r2
    5068:	11800017 	ldw	r6,0(r2)
    506c:	11c00117 	ldw	r7,4(r2)
    5070:	d8800717 	ldw	r2,28(sp)
    5074:	0009883a 	mov	r4,zero
    5078:	014ff834 	movhi	r5,16352
    507c:	db001615 	stw	r12,88(sp)
    5080:	15c00044 	addi	r23,r2,1
    5084:	000d1c00 	call	d1c0 <__divdf3>
    5088:	800d883a 	mov	r6,r16
    508c:	880f883a 	mov	r7,r17
    5090:	1009883a 	mov	r4,r2
    5094:	180b883a 	mov	r5,r3
    5098:	000e6540 	call	e654 <__subdf3>
    509c:	d9401017 	ldw	r5,64(sp)
    50a0:	d9000f17 	ldw	r4,60(sp)
    50a4:	102b883a 	mov	r21,r2
    50a8:	d8c01215 	stw	r3,72(sp)
    50ac:	000ef500 	call	ef50 <__fixdfsi>
    50b0:	1009883a 	mov	r4,r2
    50b4:	1029883a 	mov	r20,r2
    50b8:	000efd00 	call	efd0 <__floatsidf>
    50bc:	d9000f17 	ldw	r4,60(sp)
    50c0:	d9401017 	ldw	r5,64(sp)
    50c4:	100d883a 	mov	r6,r2
    50c8:	180f883a 	mov	r7,r3
    50cc:	000e6540 	call	e654 <__subdf3>
    50d0:	1823883a 	mov	r17,r3
    50d4:	d8c00717 	ldw	r3,28(sp)
    50d8:	d9401217 	ldw	r5,72(sp)
    50dc:	a2000c04 	addi	r8,r20,48
    50e0:	1021883a 	mov	r16,r2
    50e4:	1a000005 	stb	r8,0(r3)
    50e8:	800d883a 	mov	r6,r16
    50ec:	880f883a 	mov	r7,r17
    50f0:	a809883a 	mov	r4,r21
    50f4:	4029883a 	mov	r20,r8
    50f8:	000dc180 	call	dc18 <__gedf2>
    50fc:	00841d16 	blt	zero,r2,6174 <_dtoa_r+0x15f4>
    5100:	800d883a 	mov	r6,r16
    5104:	880f883a 	mov	r7,r17
    5108:	0009883a 	mov	r4,zero
    510c:	014ffc34 	movhi	r5,16368
    5110:	000e6540 	call	e654 <__subdf3>
    5114:	d9401217 	ldw	r5,72(sp)
    5118:	100d883a 	mov	r6,r2
    511c:	180f883a 	mov	r7,r3
    5120:	a809883a 	mov	r4,r21
    5124:	000dc180 	call	dc18 <__gedf2>
    5128:	db001617 	ldw	r12,88(sp)
    512c:	00840e16 	blt	zero,r2,6168 <_dtoa_r+0x15e8>
    5130:	00800044 	movi	r2,1
    5134:	13006b0e 	bge	r2,r12,52e4 <_dtoa_r+0x764>
    5138:	d9000717 	ldw	r4,28(sp)
    513c:	dd800f15 	stw	r22,60(sp)
    5140:	dcc01015 	stw	r19,64(sp)
    5144:	2319883a 	add	r12,r4,r12
    5148:	dcc01217 	ldw	r19,72(sp)
    514c:	602d883a 	mov	r22,r12
    5150:	dc801215 	stw	r18,72(sp)
    5154:	b825883a 	mov	r18,r23
    5158:	00000906 	br	5180 <_dtoa_r+0x600>
    515c:	000e6540 	call	e654 <__subdf3>
    5160:	a80d883a 	mov	r6,r21
    5164:	980f883a 	mov	r7,r19
    5168:	1009883a 	mov	r4,r2
    516c:	180b883a 	mov	r5,r3
    5170:	000dcf40 	call	dcf4 <__ledf2>
    5174:	1003e816 	blt	r2,zero,6118 <_dtoa_r+0x1598>
    5178:	b825883a 	mov	r18,r23
    517c:	bd83e926 	beq	r23,r22,6124 <_dtoa_r+0x15a4>
    5180:	a809883a 	mov	r4,r21
    5184:	980b883a 	mov	r5,r19
    5188:	000d883a 	mov	r6,zero
    518c:	01d00934 	movhi	r7,16420
    5190:	000dde80 	call	dde8 <__muldf3>
    5194:	000d883a 	mov	r6,zero
    5198:	01d00934 	movhi	r7,16420
    519c:	8009883a 	mov	r4,r16
    51a0:	880b883a 	mov	r5,r17
    51a4:	102b883a 	mov	r21,r2
    51a8:	1827883a 	mov	r19,r3
    51ac:	000dde80 	call	dde8 <__muldf3>
    51b0:	180b883a 	mov	r5,r3
    51b4:	1009883a 	mov	r4,r2
    51b8:	1821883a 	mov	r16,r3
    51bc:	1023883a 	mov	r17,r2
    51c0:	000ef500 	call	ef50 <__fixdfsi>
    51c4:	1009883a 	mov	r4,r2
    51c8:	1029883a 	mov	r20,r2
    51cc:	000efd00 	call	efd0 <__floatsidf>
    51d0:	8809883a 	mov	r4,r17
    51d4:	800b883a 	mov	r5,r16
    51d8:	100d883a 	mov	r6,r2
    51dc:	180f883a 	mov	r7,r3
    51e0:	000e6540 	call	e654 <__subdf3>
    51e4:	a5000c04 	addi	r20,r20,48
    51e8:	a80d883a 	mov	r6,r21
    51ec:	980f883a 	mov	r7,r19
    51f0:	1009883a 	mov	r4,r2
    51f4:	180b883a 	mov	r5,r3
    51f8:	95000005 	stb	r20,0(r18)
    51fc:	1021883a 	mov	r16,r2
    5200:	1823883a 	mov	r17,r3
    5204:	000dcf40 	call	dcf4 <__ledf2>
    5208:	bdc00044 	addi	r23,r23,1
    520c:	800d883a 	mov	r6,r16
    5210:	880f883a 	mov	r7,r17
    5214:	0009883a 	mov	r4,zero
    5218:	014ffc34 	movhi	r5,16368
    521c:	103fcf0e 	bge	r2,zero,515c <_dtoa_r+0x5dc>
    5220:	d8c01317 	ldw	r3,76(sp)
    5224:	d8c00515 	stw	r3,20(sp)
    5228:	d9400917 	ldw	r5,36(sp)
    522c:	e009883a 	mov	r4,fp
    5230:	00082e00 	call	82e0 <_Bfree>
    5234:	d9000517 	ldw	r4,20(sp)
    5238:	d9802317 	ldw	r6,140(sp)
    523c:	d9c02517 	ldw	r7,148(sp)
    5240:	b8000005 	stb	zero,0(r23)
    5244:	20800044 	addi	r2,r4,1
    5248:	30800015 	stw	r2,0(r6)
    524c:	3802aa26 	beq	r7,zero,5cf8 <_dtoa_r+0x1178>
    5250:	3dc00015 	stw	r23,0(r7)
    5254:	d8800717 	ldw	r2,28(sp)
    5258:	003e7906 	br	4c40 <_dtoa_r+0xc0>
    525c:	00800434 	movhi	r2,16
    5260:	10bfffc4 	addi	r2,r2,-1
    5264:	88a2703a 	and	r17,r17,r2
    5268:	883e851e 	bne	r17,zero,4c80 <_dtoa_r+0x100>
    526c:	00800074 	movhi	r2,1
    5270:	10887204 	addi	r2,r2,8648
    5274:	003e8406 	br	4c88 <_dtoa_r+0x108>
    5278:	10c00204 	addi	r3,r2,8
    527c:	003e8706 	br	4c9c <_dtoa_r+0x11c>
    5280:	01400434 	movhi	r5,16
    5284:	297fffc4 	addi	r5,r5,-1
    5288:	994a703a 	and	r5,r19,r5
    528c:	9009883a 	mov	r4,r18
    5290:	843f0044 	addi	r16,r16,-1023
    5294:	294ffc34 	orhi	r5,r5,16368
    5298:	dd800217 	ldw	r22,8(sp)
    529c:	d8001115 	stw	zero,68(sp)
    52a0:	003ea506 	br	4d38 <_dtoa_r+0x1b8>
    52a4:	00800074 	movhi	r2,1
    52a8:	10886904 	addi	r2,r2,8612
    52ac:	003e6406 	br	4c40 <_dtoa_r+0xc0>
    52b0:	e0001115 	stw	zero,68(fp)
    52b4:	000b883a 	mov	r5,zero
    52b8:	e009883a 	mov	r4,fp
    52bc:	00082380 	call	8238 <_Balloc>
    52c0:	01bfffc4 	movi	r6,-1
    52c4:	01c00044 	movi	r7,1
    52c8:	d8800715 	stw	r2,28(sp)
    52cc:	d9800c15 	stw	r6,48(sp)
    52d0:	e0801015 	stw	r2,64(fp)
    52d4:	d8000315 	stw	zero,12(sp)
    52d8:	d9c00b15 	stw	r7,44(sp)
    52dc:	d9800615 	stw	r6,24(sp)
    52e0:	d8002215 	stw	zero,136(sp)
    52e4:	d8800117 	ldw	r2,4(sp)
    52e8:	10008916 	blt	r2,zero,5510 <_dtoa_r+0x990>
    52ec:	d9000517 	ldw	r4,20(sp)
    52f0:	00c00384 	movi	r3,14
    52f4:	19008616 	blt	r3,r4,5510 <_dtoa_r+0x990>
    52f8:	200490fa 	slli	r2,r4,3
    52fc:	00c00074 	movhi	r3,1
    5300:	d9802217 	ldw	r6,136(sp)
    5304:	18c89104 	addi	r3,r3,8772
    5308:	1885883a 	add	r2,r3,r2
    530c:	14000017 	ldw	r16,0(r2)
    5310:	14400117 	ldw	r17,4(r2)
    5314:	30016316 	blt	r6,zero,58a4 <_dtoa_r+0xd24>
    5318:	800d883a 	mov	r6,r16
    531c:	880f883a 	mov	r7,r17
    5320:	9009883a 	mov	r4,r18
    5324:	980b883a 	mov	r5,r19
    5328:	000d1c00 	call	d1c0 <__divdf3>
    532c:	180b883a 	mov	r5,r3
    5330:	1009883a 	mov	r4,r2
    5334:	000ef500 	call	ef50 <__fixdfsi>
    5338:	1009883a 	mov	r4,r2
    533c:	102b883a 	mov	r21,r2
    5340:	000efd00 	call	efd0 <__floatsidf>
    5344:	800d883a 	mov	r6,r16
    5348:	880f883a 	mov	r7,r17
    534c:	1009883a 	mov	r4,r2
    5350:	180b883a 	mov	r5,r3
    5354:	000dde80 	call	dde8 <__muldf3>
    5358:	100d883a 	mov	r6,r2
    535c:	180f883a 	mov	r7,r3
    5360:	9009883a 	mov	r4,r18
    5364:	980b883a 	mov	r5,r19
    5368:	000e6540 	call	e654 <__subdf3>
    536c:	d9c00717 	ldw	r7,28(sp)
    5370:	1009883a 	mov	r4,r2
    5374:	a8800c04 	addi	r2,r21,48
    5378:	38800005 	stb	r2,0(r7)
    537c:	3dc00044 	addi	r23,r7,1
    5380:	d9c00617 	ldw	r7,24(sp)
    5384:	01800044 	movi	r6,1
    5388:	180b883a 	mov	r5,r3
    538c:	2005883a 	mov	r2,r4
    5390:	39803826 	beq	r7,r6,5474 <_dtoa_r+0x8f4>
    5394:	000d883a 	mov	r6,zero
    5398:	01d00934 	movhi	r7,16420
    539c:	000dde80 	call	dde8 <__muldf3>
    53a0:	000d883a 	mov	r6,zero
    53a4:	000f883a 	mov	r7,zero
    53a8:	1009883a 	mov	r4,r2
    53ac:	180b883a 	mov	r5,r3
    53b0:	1025883a 	mov	r18,r2
    53b4:	1827883a 	mov	r19,r3
    53b8:	000db900 	call	db90 <__eqdf2>
    53bc:	103f9a26 	beq	r2,zero,5228 <_dtoa_r+0x6a8>
    53c0:	d9c00617 	ldw	r7,24(sp)
    53c4:	d8c00717 	ldw	r3,28(sp)
    53c8:	b829883a 	mov	r20,r23
    53cc:	38bfffc4 	addi	r2,r7,-1
    53d0:	18ad883a 	add	r22,r3,r2
    53d4:	00000a06 	br	5400 <_dtoa_r+0x880>
    53d8:	000dde80 	call	dde8 <__muldf3>
    53dc:	000d883a 	mov	r6,zero
    53e0:	000f883a 	mov	r7,zero
    53e4:	1009883a 	mov	r4,r2
    53e8:	180b883a 	mov	r5,r3
    53ec:	1025883a 	mov	r18,r2
    53f0:	1827883a 	mov	r19,r3
    53f4:	b829883a 	mov	r20,r23
    53f8:	000db900 	call	db90 <__eqdf2>
    53fc:	103f8a26 	beq	r2,zero,5228 <_dtoa_r+0x6a8>
    5400:	800d883a 	mov	r6,r16
    5404:	880f883a 	mov	r7,r17
    5408:	9009883a 	mov	r4,r18
    540c:	980b883a 	mov	r5,r19
    5410:	000d1c00 	call	d1c0 <__divdf3>
    5414:	180b883a 	mov	r5,r3
    5418:	1009883a 	mov	r4,r2
    541c:	000ef500 	call	ef50 <__fixdfsi>
    5420:	1009883a 	mov	r4,r2
    5424:	102b883a 	mov	r21,r2
    5428:	000efd00 	call	efd0 <__floatsidf>
    542c:	800d883a 	mov	r6,r16
    5430:	880f883a 	mov	r7,r17
    5434:	1009883a 	mov	r4,r2
    5438:	180b883a 	mov	r5,r3
    543c:	000dde80 	call	dde8 <__muldf3>
    5440:	100d883a 	mov	r6,r2
    5444:	180f883a 	mov	r7,r3
    5448:	9009883a 	mov	r4,r18
    544c:	980b883a 	mov	r5,r19
    5450:	000e6540 	call	e654 <__subdf3>
    5454:	aa000c04 	addi	r8,r21,48
    5458:	a2000005 	stb	r8,0(r20)
    545c:	000d883a 	mov	r6,zero
    5460:	01d00934 	movhi	r7,16420
    5464:	1009883a 	mov	r4,r2
    5468:	180b883a 	mov	r5,r3
    546c:	a5c00044 	addi	r23,r20,1
    5470:	b53fd91e 	bne	r22,r20,53d8 <_dtoa_r+0x858>
    5474:	100d883a 	mov	r6,r2
    5478:	180f883a 	mov	r7,r3
    547c:	1009883a 	mov	r4,r2
    5480:	180b883a 	mov	r5,r3
    5484:	000c9140 	call	c914 <__adddf3>
    5488:	100d883a 	mov	r6,r2
    548c:	180f883a 	mov	r7,r3
    5490:	8009883a 	mov	r4,r16
    5494:	880b883a 	mov	r5,r17
    5498:	1027883a 	mov	r19,r2
    549c:	1825883a 	mov	r18,r3
    54a0:	000dcf40 	call	dcf4 <__ledf2>
    54a4:	10000816 	blt	r2,zero,54c8 <_dtoa_r+0x948>
    54a8:	980d883a 	mov	r6,r19
    54ac:	900f883a 	mov	r7,r18
    54b0:	8009883a 	mov	r4,r16
    54b4:	880b883a 	mov	r5,r17
    54b8:	000db900 	call	db90 <__eqdf2>
    54bc:	103f5a1e 	bne	r2,zero,5228 <_dtoa_r+0x6a8>
    54c0:	ad40004c 	andi	r21,r21,1
    54c4:	a83f5826 	beq	r21,zero,5228 <_dtoa_r+0x6a8>
    54c8:	bd3fffc3 	ldbu	r20,-1(r23)
    54cc:	b8bfffc4 	addi	r2,r23,-1
    54d0:	1007883a 	mov	r3,r2
    54d4:	01400e44 	movi	r5,57
    54d8:	d9800717 	ldw	r6,28(sp)
    54dc:	00000506 	br	54f4 <_dtoa_r+0x974>
    54e0:	18ffffc4 	addi	r3,r3,-1
    54e4:	11824726 	beq	r2,r6,5e04 <_dtoa_r+0x1284>
    54e8:	1d000003 	ldbu	r20,0(r3)
    54ec:	102f883a 	mov	r23,r2
    54f0:	10bfffc4 	addi	r2,r2,-1
    54f4:	a1003fcc 	andi	r4,r20,255
    54f8:	2100201c 	xori	r4,r4,128
    54fc:	213fe004 	addi	r4,r4,-128
    5500:	217ff726 	beq	r4,r5,54e0 <_dtoa_r+0x960>
    5504:	a2000044 	addi	r8,r20,1
    5508:	12000005 	stb	r8,0(r2)
    550c:	003f4606 	br	5228 <_dtoa_r+0x6a8>
    5510:	d9000b17 	ldw	r4,44(sp)
    5514:	2000c826 	beq	r4,zero,5838 <_dtoa_r+0xcb8>
    5518:	d9800317 	ldw	r6,12(sp)
    551c:	00c00044 	movi	r3,1
    5520:	1980f90e 	bge	r3,r6,5908 <_dtoa_r+0xd88>
    5524:	d8800617 	ldw	r2,24(sp)
    5528:	d8c00a17 	ldw	r3,40(sp)
    552c:	157fffc4 	addi	r21,r2,-1
    5530:	1d41f316 	blt	r3,r21,5d00 <_dtoa_r+0x1180>
    5534:	1d6bc83a 	sub	r21,r3,r21
    5538:	d9c00617 	ldw	r7,24(sp)
    553c:	3802aa16 	blt	r7,zero,5fe8 <_dtoa_r+0x1468>
    5540:	dd000817 	ldw	r20,32(sp)
    5544:	d8800617 	ldw	r2,24(sp)
    5548:	d8c00817 	ldw	r3,32(sp)
    554c:	01400044 	movi	r5,1
    5550:	e009883a 	mov	r4,fp
    5554:	1887883a 	add	r3,r3,r2
    5558:	d8c00815 	stw	r3,32(sp)
    555c:	b0ad883a 	add	r22,r22,r2
    5560:	000866c0 	call	866c <__i2b>
    5564:	1023883a 	mov	r17,r2
    5568:	a0000826 	beq	r20,zero,558c <_dtoa_r+0xa0c>
    556c:	0580070e 	bge	zero,r22,558c <_dtoa_r+0xa0c>
    5570:	a005883a 	mov	r2,r20
    5574:	b500b916 	blt	r22,r20,585c <_dtoa_r+0xcdc>
    5578:	d9000817 	ldw	r4,32(sp)
    557c:	a0a9c83a 	sub	r20,r20,r2
    5580:	b0adc83a 	sub	r22,r22,r2
    5584:	2089c83a 	sub	r4,r4,r2
    5588:	d9000815 	stw	r4,32(sp)
    558c:	d9800a17 	ldw	r6,40(sp)
    5590:	0181810e 	bge	zero,r6,5b98 <_dtoa_r+0x1018>
    5594:	d9c00b17 	ldw	r7,44(sp)
    5598:	3800b326 	beq	r7,zero,5868 <_dtoa_r+0xce8>
    559c:	a800b226 	beq	r21,zero,5868 <_dtoa_r+0xce8>
    55a0:	880b883a 	mov	r5,r17
    55a4:	a80d883a 	mov	r6,r21
    55a8:	e009883a 	mov	r4,fp
    55ac:	00089340 	call	8934 <__pow5mult>
    55b0:	d9800917 	ldw	r6,36(sp)
    55b4:	100b883a 	mov	r5,r2
    55b8:	e009883a 	mov	r4,fp
    55bc:	1023883a 	mov	r17,r2
    55c0:	00086a80 	call	86a8 <__multiply>
    55c4:	1021883a 	mov	r16,r2
    55c8:	d8800a17 	ldw	r2,40(sp)
    55cc:	d9400917 	ldw	r5,36(sp)
    55d0:	e009883a 	mov	r4,fp
    55d4:	1545c83a 	sub	r2,r2,r21
    55d8:	d8800a15 	stw	r2,40(sp)
    55dc:	00082e00 	call	82e0 <_Bfree>
    55e0:	d8c00a17 	ldw	r3,40(sp)
    55e4:	18009f1e 	bne	r3,zero,5864 <_dtoa_r+0xce4>
    55e8:	05c00044 	movi	r23,1
    55ec:	e009883a 	mov	r4,fp
    55f0:	b80b883a 	mov	r5,r23
    55f4:	000866c0 	call	866c <__i2b>
    55f8:	d9000d17 	ldw	r4,52(sp)
    55fc:	102b883a 	mov	r21,r2
    5600:	2000ce26 	beq	r4,zero,593c <_dtoa_r+0xdbc>
    5604:	200d883a 	mov	r6,r4
    5608:	100b883a 	mov	r5,r2
    560c:	e009883a 	mov	r4,fp
    5610:	00089340 	call	8934 <__pow5mult>
    5614:	d9800317 	ldw	r6,12(sp)
    5618:	102b883a 	mov	r21,r2
    561c:	b981810e 	bge	r23,r6,5c24 <_dtoa_r+0x10a4>
    5620:	0027883a 	mov	r19,zero
    5624:	a8800417 	ldw	r2,16(r21)
    5628:	05c00804 	movi	r23,32
    562c:	10800104 	addi	r2,r2,4
    5630:	1085883a 	add	r2,r2,r2
    5634:	1085883a 	add	r2,r2,r2
    5638:	a885883a 	add	r2,r21,r2
    563c:	11000017 	ldw	r4,0(r2)
    5640:	00085540 	call	8554 <__hi0bits>
    5644:	b885c83a 	sub	r2,r23,r2
    5648:	1585883a 	add	r2,r2,r22
    564c:	108007cc 	andi	r2,r2,31
    5650:	1000b326 	beq	r2,zero,5920 <_dtoa_r+0xda0>
    5654:	00c00804 	movi	r3,32
    5658:	1887c83a 	sub	r3,r3,r2
    565c:	01000104 	movi	r4,4
    5660:	20c2cd0e 	bge	r4,r3,6198 <_dtoa_r+0x1618>
    5664:	00c00704 	movi	r3,28
    5668:	1885c83a 	sub	r2,r3,r2
    566c:	d8c00817 	ldw	r3,32(sp)
    5670:	a0a9883a 	add	r20,r20,r2
    5674:	b0ad883a 	add	r22,r22,r2
    5678:	1887883a 	add	r3,r3,r2
    567c:	d8c00815 	stw	r3,32(sp)
    5680:	d9800817 	ldw	r6,32(sp)
    5684:	0180040e 	bge	zero,r6,5698 <_dtoa_r+0xb18>
    5688:	800b883a 	mov	r5,r16
    568c:	e009883a 	mov	r4,fp
    5690:	0008a740 	call	8a74 <__lshift>
    5694:	1021883a 	mov	r16,r2
    5698:	0580050e 	bge	zero,r22,56b0 <_dtoa_r+0xb30>
    569c:	a80b883a 	mov	r5,r21
    56a0:	b00d883a 	mov	r6,r22
    56a4:	e009883a 	mov	r4,fp
    56a8:	0008a740 	call	8a74 <__lshift>
    56ac:	102b883a 	mov	r21,r2
    56b0:	d9c00e17 	ldw	r7,56(sp)
    56b4:	3801211e 	bne	r7,zero,5b3c <_dtoa_r+0xfbc>
    56b8:	d9800617 	ldw	r6,24(sp)
    56bc:	0181380e 	bge	zero,r6,5ba0 <_dtoa_r+0x1020>
    56c0:	d8c00b17 	ldw	r3,44(sp)
    56c4:	1800ab1e 	bne	r3,zero,5974 <_dtoa_r+0xdf4>
    56c8:	dc800717 	ldw	r18,28(sp)
    56cc:	dcc00617 	ldw	r19,24(sp)
    56d0:	9029883a 	mov	r20,r18
    56d4:	00000206 	br	56e0 <_dtoa_r+0xb60>
    56d8:	00083080 	call	8308 <__multadd>
    56dc:	1021883a 	mov	r16,r2
    56e0:	a80b883a 	mov	r5,r21
    56e4:	8009883a 	mov	r4,r16
    56e8:	00049580 	call	4958 <quorem>
    56ec:	10800c04 	addi	r2,r2,48
    56f0:	90800005 	stb	r2,0(r18)
    56f4:	94800044 	addi	r18,r18,1
    56f8:	9507c83a 	sub	r3,r18,r20
    56fc:	000f883a 	mov	r7,zero
    5700:	01800284 	movi	r6,10
    5704:	800b883a 	mov	r5,r16
    5708:	e009883a 	mov	r4,fp
    570c:	1cfff216 	blt	r3,r19,56d8 <_dtoa_r+0xb58>
    5710:	1011883a 	mov	r8,r2
    5714:	d8800617 	ldw	r2,24(sp)
    5718:	0082370e 	bge	zero,r2,5ff8 <_dtoa_r+0x1478>
    571c:	d9000717 	ldw	r4,28(sp)
    5720:	0025883a 	mov	r18,zero
    5724:	20af883a 	add	r23,r4,r2
    5728:	01800044 	movi	r6,1
    572c:	800b883a 	mov	r5,r16
    5730:	e009883a 	mov	r4,fp
    5734:	da001715 	stw	r8,92(sp)
    5738:	0008a740 	call	8a74 <__lshift>
    573c:	a80b883a 	mov	r5,r21
    5740:	1009883a 	mov	r4,r2
    5744:	d8800915 	stw	r2,36(sp)
    5748:	0008bbc0 	call	8bbc <__mcmp>
    574c:	da001717 	ldw	r8,92(sp)
    5750:	0081800e 	bge	zero,r2,5d54 <_dtoa_r+0x11d4>
    5754:	b93fffc3 	ldbu	r4,-1(r23)
    5758:	b8bfffc4 	addi	r2,r23,-1
    575c:	1007883a 	mov	r3,r2
    5760:	01800e44 	movi	r6,57
    5764:	d9c00717 	ldw	r7,28(sp)
    5768:	00000506 	br	5780 <_dtoa_r+0xc00>
    576c:	18ffffc4 	addi	r3,r3,-1
    5770:	11c12326 	beq	r2,r7,5c00 <_dtoa_r+0x1080>
    5774:	19000003 	ldbu	r4,0(r3)
    5778:	102f883a 	mov	r23,r2
    577c:	10bfffc4 	addi	r2,r2,-1
    5780:	21403fcc 	andi	r5,r4,255
    5784:	2940201c 	xori	r5,r5,128
    5788:	297fe004 	addi	r5,r5,-128
    578c:	29bff726 	beq	r5,r6,576c <_dtoa_r+0xbec>
    5790:	21000044 	addi	r4,r4,1
    5794:	11000005 	stb	r4,0(r2)
    5798:	a80b883a 	mov	r5,r21
    579c:	e009883a 	mov	r4,fp
    57a0:	00082e00 	call	82e0 <_Bfree>
    57a4:	883ea026 	beq	r17,zero,5228 <_dtoa_r+0x6a8>
    57a8:	90000426 	beq	r18,zero,57bc <_dtoa_r+0xc3c>
    57ac:	94400326 	beq	r18,r17,57bc <_dtoa_r+0xc3c>
    57b0:	900b883a 	mov	r5,r18
    57b4:	e009883a 	mov	r4,fp
    57b8:	00082e00 	call	82e0 <_Bfree>
    57bc:	880b883a 	mov	r5,r17
    57c0:	e009883a 	mov	r4,fp
    57c4:	00082e00 	call	82e0 <_Bfree>
    57c8:	003e9706 	br	5228 <_dtoa_r+0x6a8>
    57cc:	01800044 	movi	r6,1
    57d0:	d9800e15 	stw	r6,56(sp)
    57d4:	003d9606 	br	4e30 <_dtoa_r+0x2b0>
    57d8:	d8800817 	ldw	r2,32(sp)
    57dc:	d8c00517 	ldw	r3,20(sp)
    57e0:	d8000d15 	stw	zero,52(sp)
    57e4:	10c5c83a 	sub	r2,r2,r3
    57e8:	00c9c83a 	sub	r4,zero,r3
    57ec:	d8800815 	stw	r2,32(sp)
    57f0:	d9000a15 	stw	r4,40(sp)
    57f4:	003d9706 	br	4e54 <_dtoa_r+0x2d4>
    57f8:	05adc83a 	sub	r22,zero,r22
    57fc:	dd800815 	stw	r22,32(sp)
    5800:	002d883a 	mov	r22,zero
    5804:	003d8e06 	br	4e40 <_dtoa_r+0x2c0>
    5808:	d9000517 	ldw	r4,20(sp)
    580c:	000efd00 	call	efd0 <__floatsidf>
    5810:	100d883a 	mov	r6,r2
    5814:	180f883a 	mov	r7,r3
    5818:	a009883a 	mov	r4,r20
    581c:	880b883a 	mov	r5,r17
    5820:	000db900 	call	db90 <__eqdf2>
    5824:	103d7126 	beq	r2,zero,4dec <_dtoa_r+0x26c>
    5828:	d9c00517 	ldw	r7,20(sp)
    582c:	39ffffc4 	addi	r7,r7,-1
    5830:	d9c00515 	stw	r7,20(sp)
    5834:	003d6d06 	br	4dec <_dtoa_r+0x26c>
    5838:	dd400a17 	ldw	r21,40(sp)
    583c:	dd000817 	ldw	r20,32(sp)
    5840:	0023883a 	mov	r17,zero
    5844:	003f4806 	br	5568 <_dtoa_r+0x9e8>
    5848:	10e3c83a 	sub	r17,r2,r3
    584c:	9448983a 	sll	r4,r18,r17
    5850:	003d3206 	br	4d1c <_dtoa_r+0x19c>
    5854:	d8000e15 	stw	zero,56(sp)
    5858:	003d7506 	br	4e30 <_dtoa_r+0x2b0>
    585c:	b005883a 	mov	r2,r22
    5860:	003f4506 	br	5578 <_dtoa_r+0x9f8>
    5864:	dc000915 	stw	r16,36(sp)
    5868:	d9800a17 	ldw	r6,40(sp)
    586c:	d9400917 	ldw	r5,36(sp)
    5870:	e009883a 	mov	r4,fp
    5874:	00089340 	call	8934 <__pow5mult>
    5878:	1021883a 	mov	r16,r2
    587c:	003f5a06 	br	55e8 <_dtoa_r+0xa68>
    5880:	01c00044 	movi	r7,1
    5884:	d9c00b15 	stw	r7,44(sp)
    5888:	d8802217 	ldw	r2,136(sp)
    588c:	0081280e 	bge	zero,r2,5d30 <_dtoa_r+0x11b0>
    5890:	100d883a 	mov	r6,r2
    5894:	1021883a 	mov	r16,r2
    5898:	d8800c15 	stw	r2,48(sp)
    589c:	d8800615 	stw	r2,24(sp)
    58a0:	003d8806 	br	4ec4 <_dtoa_r+0x344>
    58a4:	d8800617 	ldw	r2,24(sp)
    58a8:	00be9b16 	blt	zero,r2,5318 <_dtoa_r+0x798>
    58ac:	10010f1e 	bne	r2,zero,5cec <_dtoa_r+0x116c>
    58b0:	880b883a 	mov	r5,r17
    58b4:	000d883a 	mov	r6,zero
    58b8:	01d00534 	movhi	r7,16404
    58bc:	8009883a 	mov	r4,r16
    58c0:	000dde80 	call	dde8 <__muldf3>
    58c4:	900d883a 	mov	r6,r18
    58c8:	980f883a 	mov	r7,r19
    58cc:	1009883a 	mov	r4,r2
    58d0:	180b883a 	mov	r5,r3
    58d4:	000dc180 	call	dc18 <__gedf2>
    58d8:	002b883a 	mov	r21,zero
    58dc:	0023883a 	mov	r17,zero
    58e0:	1000bf16 	blt	r2,zero,5be0 <_dtoa_r+0x1060>
    58e4:	d9802217 	ldw	r6,136(sp)
    58e8:	ddc00717 	ldw	r23,28(sp)
    58ec:	018c303a 	nor	r6,zero,r6
    58f0:	d9800515 	stw	r6,20(sp)
    58f4:	a80b883a 	mov	r5,r21
    58f8:	e009883a 	mov	r4,fp
    58fc:	00082e00 	call	82e0 <_Bfree>
    5900:	883e4926 	beq	r17,zero,5228 <_dtoa_r+0x6a8>
    5904:	003fad06 	br	57bc <_dtoa_r+0xc3c>
    5908:	d9c01117 	ldw	r7,68(sp)
    590c:	3801bc26 	beq	r7,zero,6000 <_dtoa_r+0x1480>
    5910:	10810cc4 	addi	r2,r2,1075
    5914:	dd400a17 	ldw	r21,40(sp)
    5918:	dd000817 	ldw	r20,32(sp)
    591c:	003f0a06 	br	5548 <_dtoa_r+0x9c8>
    5920:	00800704 	movi	r2,28
    5924:	d9000817 	ldw	r4,32(sp)
    5928:	a0a9883a 	add	r20,r20,r2
    592c:	b0ad883a 	add	r22,r22,r2
    5930:	2089883a 	add	r4,r4,r2
    5934:	d9000815 	stw	r4,32(sp)
    5938:	003f5106 	br	5680 <_dtoa_r+0xb00>
    593c:	d8c00317 	ldw	r3,12(sp)
    5940:	b8c1fc0e 	bge	r23,r3,6134 <_dtoa_r+0x15b4>
    5944:	0027883a 	mov	r19,zero
    5948:	b805883a 	mov	r2,r23
    594c:	003f3e06 	br	5648 <_dtoa_r+0xac8>
    5950:	880b883a 	mov	r5,r17
    5954:	e009883a 	mov	r4,fp
    5958:	000f883a 	mov	r7,zero
    595c:	01800284 	movi	r6,10
    5960:	00083080 	call	8308 <__multadd>
    5964:	d9000c17 	ldw	r4,48(sp)
    5968:	1023883a 	mov	r17,r2
    596c:	0102040e 	bge	zero,r4,6180 <_dtoa_r+0x1600>
    5970:	d9000615 	stw	r4,24(sp)
    5974:	0500050e 	bge	zero,r20,598c <_dtoa_r+0xe0c>
    5978:	880b883a 	mov	r5,r17
    597c:	a00d883a 	mov	r6,r20
    5980:	e009883a 	mov	r4,fp
    5984:	0008a740 	call	8a74 <__lshift>
    5988:	1023883a 	mov	r17,r2
    598c:	9801241e 	bne	r19,zero,5e20 <_dtoa_r+0x12a0>
    5990:	8829883a 	mov	r20,r17
    5994:	d9000617 	ldw	r4,24(sp)
    5998:	dcc00717 	ldw	r19,28(sp)
    599c:	9480004c 	andi	r18,r18,1
    59a0:	20bfffc4 	addi	r2,r4,-1
    59a4:	9885883a 	add	r2,r19,r2
    59a8:	d8800415 	stw	r2,16(sp)
    59ac:	dc800615 	stw	r18,24(sp)
    59b0:	a80b883a 	mov	r5,r21
    59b4:	8009883a 	mov	r4,r16
    59b8:	00049580 	call	4958 <quorem>
    59bc:	880b883a 	mov	r5,r17
    59c0:	8009883a 	mov	r4,r16
    59c4:	102f883a 	mov	r23,r2
    59c8:	0008bbc0 	call	8bbc <__mcmp>
    59cc:	a80b883a 	mov	r5,r21
    59d0:	a00d883a 	mov	r6,r20
    59d4:	e009883a 	mov	r4,fp
    59d8:	102d883a 	mov	r22,r2
    59dc:	0008c1c0 	call	8c1c <__mdiff>
    59e0:	1007883a 	mov	r3,r2
    59e4:	10800317 	ldw	r2,12(r2)
    59e8:	bc800c04 	addi	r18,r23,48
    59ec:	180b883a 	mov	r5,r3
    59f0:	10004e1e 	bne	r2,zero,5b2c <_dtoa_r+0xfac>
    59f4:	8009883a 	mov	r4,r16
    59f8:	d8c01615 	stw	r3,88(sp)
    59fc:	0008bbc0 	call	8bbc <__mcmp>
    5a00:	d8c01617 	ldw	r3,88(sp)
    5a04:	e009883a 	mov	r4,fp
    5a08:	d8801615 	stw	r2,88(sp)
    5a0c:	180b883a 	mov	r5,r3
    5a10:	00082e00 	call	82e0 <_Bfree>
    5a14:	d8801617 	ldw	r2,88(sp)
    5a18:	1000041e 	bne	r2,zero,5a2c <_dtoa_r+0xeac>
    5a1c:	d9800317 	ldw	r6,12(sp)
    5a20:	3000021e 	bne	r6,zero,5a2c <_dtoa_r+0xeac>
    5a24:	d8c00617 	ldw	r3,24(sp)
    5a28:	18003726 	beq	r3,zero,5b08 <_dtoa_r+0xf88>
    5a2c:	b0002016 	blt	r22,zero,5ab0 <_dtoa_r+0xf30>
    5a30:	b000041e 	bne	r22,zero,5a44 <_dtoa_r+0xec4>
    5a34:	d9000317 	ldw	r4,12(sp)
    5a38:	2000021e 	bne	r4,zero,5a44 <_dtoa_r+0xec4>
    5a3c:	d8c00617 	ldw	r3,24(sp)
    5a40:	18001b26 	beq	r3,zero,5ab0 <_dtoa_r+0xf30>
    5a44:	00810716 	blt	zero,r2,5e64 <_dtoa_r+0x12e4>
    5a48:	d8c00417 	ldw	r3,16(sp)
    5a4c:	9d800044 	addi	r22,r19,1
    5a50:	9c800005 	stb	r18,0(r19)
    5a54:	b02f883a 	mov	r23,r22
    5a58:	98c10626 	beq	r19,r3,5e74 <_dtoa_r+0x12f4>
    5a5c:	800b883a 	mov	r5,r16
    5a60:	000f883a 	mov	r7,zero
    5a64:	01800284 	movi	r6,10
    5a68:	e009883a 	mov	r4,fp
    5a6c:	00083080 	call	8308 <__multadd>
    5a70:	1021883a 	mov	r16,r2
    5a74:	000f883a 	mov	r7,zero
    5a78:	01800284 	movi	r6,10
    5a7c:	880b883a 	mov	r5,r17
    5a80:	e009883a 	mov	r4,fp
    5a84:	8d002526 	beq	r17,r20,5b1c <_dtoa_r+0xf9c>
    5a88:	00083080 	call	8308 <__multadd>
    5a8c:	a00b883a 	mov	r5,r20
    5a90:	000f883a 	mov	r7,zero
    5a94:	01800284 	movi	r6,10
    5a98:	e009883a 	mov	r4,fp
    5a9c:	1023883a 	mov	r17,r2
    5aa0:	00083080 	call	8308 <__multadd>
    5aa4:	1029883a 	mov	r20,r2
    5aa8:	b027883a 	mov	r19,r22
    5aac:	003fc006 	br	59b0 <_dtoa_r+0xe30>
    5ab0:	9011883a 	mov	r8,r18
    5ab4:	00800e0e 	bge	zero,r2,5af0 <_dtoa_r+0xf70>
    5ab8:	800b883a 	mov	r5,r16
    5abc:	01800044 	movi	r6,1
    5ac0:	e009883a 	mov	r4,fp
    5ac4:	da001715 	stw	r8,92(sp)
    5ac8:	0008a740 	call	8a74 <__lshift>
    5acc:	a80b883a 	mov	r5,r21
    5ad0:	1009883a 	mov	r4,r2
    5ad4:	1021883a 	mov	r16,r2
    5ad8:	0008bbc0 	call	8bbc <__mcmp>
    5adc:	da001717 	ldw	r8,92(sp)
    5ae0:	0081960e 	bge	zero,r2,613c <_dtoa_r+0x15bc>
    5ae4:	00800e44 	movi	r2,57
    5ae8:	40817026 	beq	r8,r2,60ac <_dtoa_r+0x152c>
    5aec:	ba000c44 	addi	r8,r23,49
    5af0:	8825883a 	mov	r18,r17
    5af4:	9dc00044 	addi	r23,r19,1
    5af8:	9a000005 	stb	r8,0(r19)
    5afc:	a023883a 	mov	r17,r20
    5b00:	dc000915 	stw	r16,36(sp)
    5b04:	003f2406 	br	5798 <_dtoa_r+0xc18>
    5b08:	00800e44 	movi	r2,57
    5b0c:	9011883a 	mov	r8,r18
    5b10:	90816626 	beq	r18,r2,60ac <_dtoa_r+0x152c>
    5b14:	05bff516 	blt	zero,r22,5aec <_dtoa_r+0xf6c>
    5b18:	003ff506 	br	5af0 <_dtoa_r+0xf70>
    5b1c:	00083080 	call	8308 <__multadd>
    5b20:	1023883a 	mov	r17,r2
    5b24:	1029883a 	mov	r20,r2
    5b28:	003fdf06 	br	5aa8 <_dtoa_r+0xf28>
    5b2c:	e009883a 	mov	r4,fp
    5b30:	00082e00 	call	82e0 <_Bfree>
    5b34:	00800044 	movi	r2,1
    5b38:	003fbc06 	br	5a2c <_dtoa_r+0xeac>
    5b3c:	a80b883a 	mov	r5,r21
    5b40:	8009883a 	mov	r4,r16
    5b44:	0008bbc0 	call	8bbc <__mcmp>
    5b48:	103edb0e 	bge	r2,zero,56b8 <_dtoa_r+0xb38>
    5b4c:	800b883a 	mov	r5,r16
    5b50:	000f883a 	mov	r7,zero
    5b54:	01800284 	movi	r6,10
    5b58:	e009883a 	mov	r4,fp
    5b5c:	00083080 	call	8308 <__multadd>
    5b60:	1021883a 	mov	r16,r2
    5b64:	d8800517 	ldw	r2,20(sp)
    5b68:	d8c00b17 	ldw	r3,44(sp)
    5b6c:	10bfffc4 	addi	r2,r2,-1
    5b70:	d8800515 	stw	r2,20(sp)
    5b74:	183f761e 	bne	r3,zero,5950 <_dtoa_r+0xdd0>
    5b78:	d9000c17 	ldw	r4,48(sp)
    5b7c:	0101730e 	bge	zero,r4,614c <_dtoa_r+0x15cc>
    5b80:	d9000615 	stw	r4,24(sp)
    5b84:	003ed006 	br	56c8 <_dtoa_r+0xb48>
    5b88:	00800084 	movi	r2,2
    5b8c:	3081861e 	bne	r6,r2,61a8 <_dtoa_r+0x1628>
    5b90:	d8000b15 	stw	zero,44(sp)
    5b94:	003f3c06 	br	5888 <_dtoa_r+0xd08>
    5b98:	dc000917 	ldw	r16,36(sp)
    5b9c:	003e9206 	br	55e8 <_dtoa_r+0xa68>
    5ba0:	d9c00317 	ldw	r7,12(sp)
    5ba4:	00800084 	movi	r2,2
    5ba8:	11fec50e 	bge	r2,r7,56c0 <_dtoa_r+0xb40>
    5bac:	d9000617 	ldw	r4,24(sp)
    5bb0:	20013c1e 	bne	r4,zero,60a4 <_dtoa_r+0x1524>
    5bb4:	a80b883a 	mov	r5,r21
    5bb8:	000f883a 	mov	r7,zero
    5bbc:	01800144 	movi	r6,5
    5bc0:	e009883a 	mov	r4,fp
    5bc4:	00083080 	call	8308 <__multadd>
    5bc8:	100b883a 	mov	r5,r2
    5bcc:	8009883a 	mov	r4,r16
    5bd0:	102b883a 	mov	r21,r2
    5bd4:	0008bbc0 	call	8bbc <__mcmp>
    5bd8:	dc000915 	stw	r16,36(sp)
    5bdc:	00bf410e 	bge	zero,r2,58e4 <_dtoa_r+0xd64>
    5be0:	d9c00717 	ldw	r7,28(sp)
    5be4:	00800c44 	movi	r2,49
    5be8:	38800005 	stb	r2,0(r7)
    5bec:	d8800517 	ldw	r2,20(sp)
    5bf0:	3dc00044 	addi	r23,r7,1
    5bf4:	10800044 	addi	r2,r2,1
    5bf8:	d8800515 	stw	r2,20(sp)
    5bfc:	003f3d06 	br	58f4 <_dtoa_r+0xd74>
    5c00:	d9800517 	ldw	r6,20(sp)
    5c04:	d9c00717 	ldw	r7,28(sp)
    5c08:	00800c44 	movi	r2,49
    5c0c:	31800044 	addi	r6,r6,1
    5c10:	d9800515 	stw	r6,20(sp)
    5c14:	38800005 	stb	r2,0(r7)
    5c18:	003edf06 	br	5798 <_dtoa_r+0xc18>
    5c1c:	d8000b15 	stw	zero,44(sp)
    5c20:	003c9f06 	br	4ea0 <_dtoa_r+0x320>
    5c24:	903e7e1e 	bne	r18,zero,5620 <_dtoa_r+0xaa0>
    5c28:	00800434 	movhi	r2,16
    5c2c:	10bfffc4 	addi	r2,r2,-1
    5c30:	9884703a 	and	r2,r19,r2
    5c34:	1000ea1e 	bne	r2,zero,5fe0 <_dtoa_r+0x1460>
    5c38:	9cdffc2c 	andhi	r19,r19,32752
    5c3c:	9800e826 	beq	r19,zero,5fe0 <_dtoa_r+0x1460>
    5c40:	d9c00817 	ldw	r7,32(sp)
    5c44:	b5800044 	addi	r22,r22,1
    5c48:	04c00044 	movi	r19,1
    5c4c:	39c00044 	addi	r7,r7,1
    5c50:	d9c00815 	stw	r7,32(sp)
    5c54:	d8800d17 	ldw	r2,52(sp)
    5c58:	103e721e 	bne	r2,zero,5624 <_dtoa_r+0xaa4>
    5c5c:	00800044 	movi	r2,1
    5c60:	003e7906 	br	5648 <_dtoa_r+0xac8>
    5c64:	8009883a 	mov	r4,r16
    5c68:	000efd00 	call	efd0 <__floatsidf>
    5c6c:	d9800f17 	ldw	r6,60(sp)
    5c70:	d9c01017 	ldw	r7,64(sp)
    5c74:	1009883a 	mov	r4,r2
    5c78:	180b883a 	mov	r5,r3
    5c7c:	000dde80 	call	dde8 <__muldf3>
    5c80:	000d883a 	mov	r6,zero
    5c84:	01d00734 	movhi	r7,16412
    5c88:	1009883a 	mov	r4,r2
    5c8c:	180b883a 	mov	r5,r3
    5c90:	000c9140 	call	c914 <__adddf3>
    5c94:	047f3034 	movhi	r17,64704
    5c98:	1021883a 	mov	r16,r2
    5c9c:	1c63883a 	add	r17,r3,r17
    5ca0:	d9000f17 	ldw	r4,60(sp)
    5ca4:	d9401017 	ldw	r5,64(sp)
    5ca8:	000d883a 	mov	r6,zero
    5cac:	01d00534 	movhi	r7,16404
    5cb0:	000e6540 	call	e654 <__subdf3>
    5cb4:	800d883a 	mov	r6,r16
    5cb8:	880f883a 	mov	r7,r17
    5cbc:	1009883a 	mov	r4,r2
    5cc0:	180b883a 	mov	r5,r3
    5cc4:	102b883a 	mov	r21,r2
    5cc8:	1829883a 	mov	r20,r3
    5ccc:	000dc180 	call	dc18 <__gedf2>
    5cd0:	00806c16 	blt	zero,r2,5e84 <_dtoa_r+0x1304>
    5cd4:	89e0003c 	xorhi	r7,r17,32768
    5cd8:	800d883a 	mov	r6,r16
    5cdc:	a809883a 	mov	r4,r21
    5ce0:	a00b883a 	mov	r5,r20
    5ce4:	000dcf40 	call	dcf4 <__ledf2>
    5ce8:	103d7e0e 	bge	r2,zero,52e4 <_dtoa_r+0x764>
    5cec:	002b883a 	mov	r21,zero
    5cf0:	0023883a 	mov	r17,zero
    5cf4:	003efb06 	br	58e4 <_dtoa_r+0xd64>
    5cf8:	d8800717 	ldw	r2,28(sp)
    5cfc:	003bd006 	br	4c40 <_dtoa_r+0xc0>
    5d00:	d9000a17 	ldw	r4,40(sp)
    5d04:	d9800d17 	ldw	r6,52(sp)
    5d08:	dd400a15 	stw	r21,40(sp)
    5d0c:	a905c83a 	sub	r2,r21,r4
    5d10:	308d883a 	add	r6,r6,r2
    5d14:	d9800d15 	stw	r6,52(sp)
    5d18:	002b883a 	mov	r21,zero
    5d1c:	003e0606 	br	5538 <_dtoa_r+0x9b8>
    5d20:	9023883a 	mov	r17,r18
    5d24:	9829883a 	mov	r20,r19
    5d28:	04000084 	movi	r16,2
    5d2c:	003c9206 	br	4f78 <_dtoa_r+0x3f8>
    5d30:	04000044 	movi	r16,1
    5d34:	dc000c15 	stw	r16,48(sp)
    5d38:	dc000615 	stw	r16,24(sp)
    5d3c:	dc002215 	stw	r16,136(sp)
    5d40:	e0001115 	stw	zero,68(fp)
    5d44:	000b883a 	mov	r5,zero
    5d48:	003c6906 	br	4ef0 <_dtoa_r+0x370>
    5d4c:	3021883a 	mov	r16,r6
    5d50:	003ffb06 	br	5d40 <_dtoa_r+0x11c0>
    5d54:	1000021e 	bne	r2,zero,5d60 <_dtoa_r+0x11e0>
    5d58:	4200004c 	andi	r8,r8,1
    5d5c:	403e7d1e 	bne	r8,zero,5754 <_dtoa_r+0xbd4>
    5d60:	01000c04 	movi	r4,48
    5d64:	00000106 	br	5d6c <_dtoa_r+0x11ec>
    5d68:	102f883a 	mov	r23,r2
    5d6c:	b8bfffc4 	addi	r2,r23,-1
    5d70:	10c00007 	ldb	r3,0(r2)
    5d74:	193ffc26 	beq	r3,r4,5d68 <_dtoa_r+0x11e8>
    5d78:	003e8706 	br	5798 <_dtoa_r+0xc18>
    5d7c:	d8800517 	ldw	r2,20(sp)
    5d80:	00a3c83a 	sub	r17,zero,r2
    5d84:	8800a426 	beq	r17,zero,6018 <_dtoa_r+0x1498>
    5d88:	888003cc 	andi	r2,r17,15
    5d8c:	100490fa 	slli	r2,r2,3
    5d90:	00c00074 	movhi	r3,1
    5d94:	18c89104 	addi	r3,r3,8772
    5d98:	1885883a 	add	r2,r3,r2
    5d9c:	11800017 	ldw	r6,0(r2)
    5da0:	11c00117 	ldw	r7,4(r2)
    5da4:	9009883a 	mov	r4,r18
    5da8:	980b883a 	mov	r5,r19
    5dac:	8823d13a 	srai	r17,r17,4
    5db0:	000dde80 	call	dde8 <__muldf3>
    5db4:	d8800f15 	stw	r2,60(sp)
    5db8:	d8c01015 	stw	r3,64(sp)
    5dbc:	8800e826 	beq	r17,zero,6160 <_dtoa_r+0x15e0>
    5dc0:	05000074 	movhi	r20,1
    5dc4:	a5088704 	addi	r20,r20,8732
    5dc8:	04000084 	movi	r16,2
    5dcc:	8980004c 	andi	r6,r17,1
    5dd0:	1009883a 	mov	r4,r2
    5dd4:	8823d07a 	srai	r17,r17,1
    5dd8:	180b883a 	mov	r5,r3
    5ddc:	30000426 	beq	r6,zero,5df0 <_dtoa_r+0x1270>
    5de0:	a1800017 	ldw	r6,0(r20)
    5de4:	a1c00117 	ldw	r7,4(r20)
    5de8:	84000044 	addi	r16,r16,1
    5dec:	000dde80 	call	dde8 <__muldf3>
    5df0:	a5000204 	addi	r20,r20,8
    5df4:	883ff51e 	bne	r17,zero,5dcc <_dtoa_r+0x124c>
    5df8:	d8800f15 	stw	r2,60(sp)
    5dfc:	d8c01015 	stw	r3,64(sp)
    5e00:	003c7606 	br	4fdc <_dtoa_r+0x45c>
    5e04:	00c00c04 	movi	r3,48
    5e08:	10c00005 	stb	r3,0(r2)
    5e0c:	d8c00517 	ldw	r3,20(sp)
    5e10:	bd3fffc3 	ldbu	r20,-1(r23)
    5e14:	18c00044 	addi	r3,r3,1
    5e18:	d8c00515 	stw	r3,20(sp)
    5e1c:	003db906 	br	5504 <_dtoa_r+0x984>
    5e20:	89400117 	ldw	r5,4(r17)
    5e24:	e009883a 	mov	r4,fp
    5e28:	00082380 	call	8238 <_Balloc>
    5e2c:	89800417 	ldw	r6,16(r17)
    5e30:	89400304 	addi	r5,r17,12
    5e34:	11000304 	addi	r4,r2,12
    5e38:	31800084 	addi	r6,r6,2
    5e3c:	318d883a 	add	r6,r6,r6
    5e40:	318d883a 	add	r6,r6,r6
    5e44:	1027883a 	mov	r19,r2
    5e48:	0007e6c0 	call	7e6c <memcpy>
    5e4c:	01800044 	movi	r6,1
    5e50:	980b883a 	mov	r5,r19
    5e54:	e009883a 	mov	r4,fp
    5e58:	0008a740 	call	8a74 <__lshift>
    5e5c:	1029883a 	mov	r20,r2
    5e60:	003ecc06 	br	5994 <_dtoa_r+0xe14>
    5e64:	00800e44 	movi	r2,57
    5e68:	90809026 	beq	r18,r2,60ac <_dtoa_r+0x152c>
    5e6c:	92000044 	addi	r8,r18,1
    5e70:	003f1f06 	br	5af0 <_dtoa_r+0xf70>
    5e74:	9011883a 	mov	r8,r18
    5e78:	8825883a 	mov	r18,r17
    5e7c:	a023883a 	mov	r17,r20
    5e80:	003e2906 	br	5728 <_dtoa_r+0xba8>
    5e84:	002b883a 	mov	r21,zero
    5e88:	0023883a 	mov	r17,zero
    5e8c:	003f5406 	br	5be0 <_dtoa_r+0x1060>
    5e90:	61bfffc4 	addi	r6,r12,-1
    5e94:	300490fa 	slli	r2,r6,3
    5e98:	00c00074 	movhi	r3,1
    5e9c:	18c89104 	addi	r3,r3,8772
    5ea0:	1885883a 	add	r2,r3,r2
    5ea4:	11000017 	ldw	r4,0(r2)
    5ea8:	11400117 	ldw	r5,4(r2)
    5eac:	d8800717 	ldw	r2,28(sp)
    5eb0:	880f883a 	mov	r7,r17
    5eb4:	d9801215 	stw	r6,72(sp)
    5eb8:	800d883a 	mov	r6,r16
    5ebc:	db001615 	stw	r12,88(sp)
    5ec0:	15c00044 	addi	r23,r2,1
    5ec4:	000dde80 	call	dde8 <__muldf3>
    5ec8:	d9401017 	ldw	r5,64(sp)
    5ecc:	d9000f17 	ldw	r4,60(sp)
    5ed0:	d8c01515 	stw	r3,84(sp)
    5ed4:	d8801415 	stw	r2,80(sp)
    5ed8:	000ef500 	call	ef50 <__fixdfsi>
    5edc:	1009883a 	mov	r4,r2
    5ee0:	1021883a 	mov	r16,r2
    5ee4:	000efd00 	call	efd0 <__floatsidf>
    5ee8:	d9000f17 	ldw	r4,60(sp)
    5eec:	d9401017 	ldw	r5,64(sp)
    5ef0:	100d883a 	mov	r6,r2
    5ef4:	180f883a 	mov	r7,r3
    5ef8:	000e6540 	call	e654 <__subdf3>
    5efc:	1829883a 	mov	r20,r3
    5f00:	d8c00717 	ldw	r3,28(sp)
    5f04:	84000c04 	addi	r16,r16,48
    5f08:	1023883a 	mov	r17,r2
    5f0c:	1c000005 	stb	r16,0(r3)
    5f10:	db001617 	ldw	r12,88(sp)
    5f14:	00800044 	movi	r2,1
    5f18:	60802226 	beq	r12,r2,5fa4 <_dtoa_r+0x1424>
    5f1c:	d9c00717 	ldw	r7,28(sp)
    5f20:	8805883a 	mov	r2,r17
    5f24:	b82b883a 	mov	r21,r23
    5f28:	3b19883a 	add	r12,r7,r12
    5f2c:	6023883a 	mov	r17,r12
    5f30:	a007883a 	mov	r3,r20
    5f34:	dc800f15 	stw	r18,60(sp)
    5f38:	000d883a 	mov	r6,zero
    5f3c:	01d00934 	movhi	r7,16420
    5f40:	1009883a 	mov	r4,r2
    5f44:	180b883a 	mov	r5,r3
    5f48:	000dde80 	call	dde8 <__muldf3>
    5f4c:	180b883a 	mov	r5,r3
    5f50:	1009883a 	mov	r4,r2
    5f54:	1829883a 	mov	r20,r3
    5f58:	1025883a 	mov	r18,r2
    5f5c:	000ef500 	call	ef50 <__fixdfsi>
    5f60:	1009883a 	mov	r4,r2
    5f64:	1021883a 	mov	r16,r2
    5f68:	000efd00 	call	efd0 <__floatsidf>
    5f6c:	100d883a 	mov	r6,r2
    5f70:	180f883a 	mov	r7,r3
    5f74:	9009883a 	mov	r4,r18
    5f78:	a00b883a 	mov	r5,r20
    5f7c:	84000c04 	addi	r16,r16,48
    5f80:	000e6540 	call	e654 <__subdf3>
    5f84:	ad400044 	addi	r21,r21,1
    5f88:	ac3fffc5 	stb	r16,-1(r21)
    5f8c:	ac7fea1e 	bne	r21,r17,5f38 <_dtoa_r+0x13b8>
    5f90:	1023883a 	mov	r17,r2
    5f94:	d8801217 	ldw	r2,72(sp)
    5f98:	dc800f17 	ldw	r18,60(sp)
    5f9c:	1829883a 	mov	r20,r3
    5fa0:	b8af883a 	add	r23,r23,r2
    5fa4:	d9001417 	ldw	r4,80(sp)
    5fa8:	d9401517 	ldw	r5,84(sp)
    5fac:	000d883a 	mov	r6,zero
    5fb0:	01cff834 	movhi	r7,16352
    5fb4:	000c9140 	call	c914 <__adddf3>
    5fb8:	880d883a 	mov	r6,r17
    5fbc:	a00f883a 	mov	r7,r20
    5fc0:	1009883a 	mov	r4,r2
    5fc4:	180b883a 	mov	r5,r3
    5fc8:	000dcf40 	call	dcf4 <__ledf2>
    5fcc:	10003e0e 	bge	r2,zero,60c8 <_dtoa_r+0x1548>
    5fd0:	d9001317 	ldw	r4,76(sp)
    5fd4:	bd3fffc3 	ldbu	r20,-1(r23)
    5fd8:	d9000515 	stw	r4,20(sp)
    5fdc:	003d3b06 	br	54cc <_dtoa_r+0x94c>
    5fe0:	0027883a 	mov	r19,zero
    5fe4:	003f1b06 	br	5c54 <_dtoa_r+0x10d4>
    5fe8:	d8800817 	ldw	r2,32(sp)
    5fec:	11e9c83a 	sub	r20,r2,r7
    5ff0:	0005883a 	mov	r2,zero
    5ff4:	003d5406 	br	5548 <_dtoa_r+0x9c8>
    5ff8:	00800044 	movi	r2,1
    5ffc:	003dc706 	br	571c <_dtoa_r+0xb9c>
    6000:	d8c00217 	ldw	r3,8(sp)
    6004:	00800d84 	movi	r2,54
    6008:	dd400a17 	ldw	r21,40(sp)
    600c:	10c5c83a 	sub	r2,r2,r3
    6010:	dd000817 	ldw	r20,32(sp)
    6014:	003d4c06 	br	5548 <_dtoa_r+0x9c8>
    6018:	dc800f15 	stw	r18,60(sp)
    601c:	dcc01015 	stw	r19,64(sp)
    6020:	04000084 	movi	r16,2
    6024:	003bed06 	br	4fdc <_dtoa_r+0x45c>
    6028:	d9000617 	ldw	r4,24(sp)
    602c:	203f0d26 	beq	r4,zero,5c64 <_dtoa_r+0x10e4>
    6030:	d9800c17 	ldw	r6,48(sp)
    6034:	01bcab0e 	bge	zero,r6,52e4 <_dtoa_r+0x764>
    6038:	d9401017 	ldw	r5,64(sp)
    603c:	d9000f17 	ldw	r4,60(sp)
    6040:	000d883a 	mov	r6,zero
    6044:	01d00934 	movhi	r7,16420
    6048:	000dde80 	call	dde8 <__muldf3>
    604c:	81000044 	addi	r4,r16,1
    6050:	d8800f15 	stw	r2,60(sp)
    6054:	d8c01015 	stw	r3,64(sp)
    6058:	000efd00 	call	efd0 <__floatsidf>
    605c:	d9800f17 	ldw	r6,60(sp)
    6060:	d9c01017 	ldw	r7,64(sp)
    6064:	1009883a 	mov	r4,r2
    6068:	180b883a 	mov	r5,r3
    606c:	000dde80 	call	dde8 <__muldf3>
    6070:	01d00734 	movhi	r7,16412
    6074:	000d883a 	mov	r6,zero
    6078:	1009883a 	mov	r4,r2
    607c:	180b883a 	mov	r5,r3
    6080:	000c9140 	call	c914 <__adddf3>
    6084:	d9c00517 	ldw	r7,20(sp)
    6088:	047f3034 	movhi	r17,64704
    608c:	1021883a 	mov	r16,r2
    6090:	39ffffc4 	addi	r7,r7,-1
    6094:	d9c01315 	stw	r7,76(sp)
    6098:	1c63883a 	add	r17,r3,r17
    609c:	db000c17 	ldw	r12,48(sp)
    60a0:	003bea06 	br	504c <_dtoa_r+0x4cc>
    60a4:	dc000915 	stw	r16,36(sp)
    60a8:	003e0e06 	br	58e4 <_dtoa_r+0xd64>
    60ac:	01000e44 	movi	r4,57
    60b0:	8825883a 	mov	r18,r17
    60b4:	9dc00044 	addi	r23,r19,1
    60b8:	99000005 	stb	r4,0(r19)
    60bc:	a023883a 	mov	r17,r20
    60c0:	dc000915 	stw	r16,36(sp)
    60c4:	003da406 	br	5758 <_dtoa_r+0xbd8>
    60c8:	d9801417 	ldw	r6,80(sp)
    60cc:	d9c01517 	ldw	r7,84(sp)
    60d0:	0009883a 	mov	r4,zero
    60d4:	014ff834 	movhi	r5,16352
    60d8:	000e6540 	call	e654 <__subdf3>
    60dc:	880d883a 	mov	r6,r17
    60e0:	a00f883a 	mov	r7,r20
    60e4:	1009883a 	mov	r4,r2
    60e8:	180b883a 	mov	r5,r3
    60ec:	000dc180 	call	dc18 <__gedf2>
    60f0:	00bc7c0e 	bge	zero,r2,52e4 <_dtoa_r+0x764>
    60f4:	01000c04 	movi	r4,48
    60f8:	00000106 	br	6100 <_dtoa_r+0x1580>
    60fc:	102f883a 	mov	r23,r2
    6100:	b8bfffc4 	addi	r2,r23,-1
    6104:	10c00007 	ldb	r3,0(r2)
    6108:	193ffc26 	beq	r3,r4,60fc <_dtoa_r+0x157c>
    610c:	d9801317 	ldw	r6,76(sp)
    6110:	d9800515 	stw	r6,20(sp)
    6114:	003c4406 	br	5228 <_dtoa_r+0x6a8>
    6118:	d9801317 	ldw	r6,76(sp)
    611c:	d9800515 	stw	r6,20(sp)
    6120:	003cea06 	br	54cc <_dtoa_r+0x94c>
    6124:	dd800f17 	ldw	r22,60(sp)
    6128:	dcc01017 	ldw	r19,64(sp)
    612c:	dc801217 	ldw	r18,72(sp)
    6130:	003c6c06 	br	52e4 <_dtoa_r+0x764>
    6134:	903e031e 	bne	r18,zero,5944 <_dtoa_r+0xdc4>
    6138:	003ebb06 	br	5c28 <_dtoa_r+0x10a8>
    613c:	103e6c1e 	bne	r2,zero,5af0 <_dtoa_r+0xf70>
    6140:	4080004c 	andi	r2,r8,1
    6144:	103e6a26 	beq	r2,zero,5af0 <_dtoa_r+0xf70>
    6148:	003e6606 	br	5ae4 <_dtoa_r+0xf64>
    614c:	d8c00317 	ldw	r3,12(sp)
    6150:	00800084 	movi	r2,2
    6154:	10c02916 	blt	r2,r3,61fc <_dtoa_r+0x167c>
    6158:	d9000c17 	ldw	r4,48(sp)
    615c:	003e8806 	br	5b80 <_dtoa_r+0x1000>
    6160:	04000084 	movi	r16,2
    6164:	003b9d06 	br	4fdc <_dtoa_r+0x45c>
    6168:	d9001317 	ldw	r4,76(sp)
    616c:	d9000515 	stw	r4,20(sp)
    6170:	003cd606 	br	54cc <_dtoa_r+0x94c>
    6174:	d8801317 	ldw	r2,76(sp)
    6178:	d8800515 	stw	r2,20(sp)
    617c:	003c2a06 	br	5228 <_dtoa_r+0x6a8>
    6180:	d9800317 	ldw	r6,12(sp)
    6184:	00800084 	movi	r2,2
    6188:	11801516 	blt	r2,r6,61e0 <_dtoa_r+0x1660>
    618c:	d9c00c17 	ldw	r7,48(sp)
    6190:	d9c00615 	stw	r7,24(sp)
    6194:	003df706 	br	5974 <_dtoa_r+0xdf4>
    6198:	193d3926 	beq	r3,r4,5680 <_dtoa_r+0xb00>
    619c:	00c00f04 	movi	r3,60
    61a0:	1885c83a 	sub	r2,r3,r2
    61a4:	003ddf06 	br	5924 <_dtoa_r+0xda4>
    61a8:	e009883a 	mov	r4,fp
    61ac:	e0001115 	stw	zero,68(fp)
    61b0:	000b883a 	mov	r5,zero
    61b4:	00082380 	call	8238 <_Balloc>
    61b8:	d8800715 	stw	r2,28(sp)
    61bc:	d8c00717 	ldw	r3,28(sp)
    61c0:	00bfffc4 	movi	r2,-1
    61c4:	01000044 	movi	r4,1
    61c8:	d8800c15 	stw	r2,48(sp)
    61cc:	e0c01015 	stw	r3,64(fp)
    61d0:	d9000b15 	stw	r4,44(sp)
    61d4:	d8800615 	stw	r2,24(sp)
    61d8:	d8002215 	stw	zero,136(sp)
    61dc:	003c4106 	br	52e4 <_dtoa_r+0x764>
    61e0:	d8c00c17 	ldw	r3,48(sp)
    61e4:	d8c00615 	stw	r3,24(sp)
    61e8:	003e7006 	br	5bac <_dtoa_r+0x102c>
    61ec:	04400044 	movi	r17,1
    61f0:	003b2006 	br	4e74 <_dtoa_r+0x2f4>
    61f4:	000b883a 	mov	r5,zero
    61f8:	003b3d06 	br	4ef0 <_dtoa_r+0x370>
    61fc:	d8800c17 	ldw	r2,48(sp)
    6200:	d8800615 	stw	r2,24(sp)
    6204:	003e6906 	br	5bac <_dtoa_r+0x102c>

00006208 <__sflush_r>:
    6208:	2880030b 	ldhu	r2,12(r5)
    620c:	defffb04 	addi	sp,sp,-20
    6210:	dcc00315 	stw	r19,12(sp)
    6214:	dc400115 	stw	r17,4(sp)
    6218:	dfc00415 	stw	ra,16(sp)
    621c:	dc800215 	stw	r18,8(sp)
    6220:	dc000015 	stw	r16,0(sp)
    6224:	10c0020c 	andi	r3,r2,8
    6228:	2823883a 	mov	r17,r5
    622c:	2027883a 	mov	r19,r4
    6230:	1800311e 	bne	r3,zero,62f8 <__sflush_r+0xf0>
    6234:	28c00117 	ldw	r3,4(r5)
    6238:	10820014 	ori	r2,r2,2048
    623c:	2880030d 	sth	r2,12(r5)
    6240:	00c04b0e 	bge	zero,r3,6370 <__sflush_r+0x168>
    6244:	8a000a17 	ldw	r8,40(r17)
    6248:	40002326 	beq	r8,zero,62d8 <__sflush_r+0xd0>
    624c:	9c000017 	ldw	r16,0(r19)
    6250:	10c4000c 	andi	r3,r2,4096
    6254:	98000015 	stw	zero,0(r19)
    6258:	18004826 	beq	r3,zero,637c <__sflush_r+0x174>
    625c:	89801417 	ldw	r6,80(r17)
    6260:	10c0010c 	andi	r3,r2,4
    6264:	18000626 	beq	r3,zero,6280 <__sflush_r+0x78>
    6268:	88c00117 	ldw	r3,4(r17)
    626c:	88800c17 	ldw	r2,48(r17)
    6270:	30cdc83a 	sub	r6,r6,r3
    6274:	10000226 	beq	r2,zero,6280 <__sflush_r+0x78>
    6278:	88800f17 	ldw	r2,60(r17)
    627c:	308dc83a 	sub	r6,r6,r2
    6280:	89400717 	ldw	r5,28(r17)
    6284:	000f883a 	mov	r7,zero
    6288:	9809883a 	mov	r4,r19
    628c:	403ee83a 	callr	r8
    6290:	00ffffc4 	movi	r3,-1
    6294:	10c04426 	beq	r2,r3,63a8 <__sflush_r+0x1a0>
    6298:	88c0030b 	ldhu	r3,12(r17)
    629c:	89000417 	ldw	r4,16(r17)
    62a0:	88000115 	stw	zero,4(r17)
    62a4:	197dffcc 	andi	r5,r3,63487
    62a8:	8940030d 	sth	r5,12(r17)
    62ac:	89000015 	stw	r4,0(r17)
    62b0:	18c4000c 	andi	r3,r3,4096
    62b4:	18002c1e 	bne	r3,zero,6368 <__sflush_r+0x160>
    62b8:	89400c17 	ldw	r5,48(r17)
    62bc:	9c000015 	stw	r16,0(r19)
    62c0:	28000526 	beq	r5,zero,62d8 <__sflush_r+0xd0>
    62c4:	88801004 	addi	r2,r17,64
    62c8:	28800226 	beq	r5,r2,62d4 <__sflush_r+0xcc>
    62cc:	9809883a 	mov	r4,r19
    62d0:	00069840 	call	6984 <_free_r>
    62d4:	88000c15 	stw	zero,48(r17)
    62d8:	0005883a 	mov	r2,zero
    62dc:	dfc00417 	ldw	ra,16(sp)
    62e0:	dcc00317 	ldw	r19,12(sp)
    62e4:	dc800217 	ldw	r18,8(sp)
    62e8:	dc400117 	ldw	r17,4(sp)
    62ec:	dc000017 	ldw	r16,0(sp)
    62f0:	dec00504 	addi	sp,sp,20
    62f4:	f800283a 	ret
    62f8:	2c800417 	ldw	r18,16(r5)
    62fc:	903ff626 	beq	r18,zero,62d8 <__sflush_r+0xd0>
    6300:	2c000017 	ldw	r16,0(r5)
    6304:	108000cc 	andi	r2,r2,3
    6308:	2c800015 	stw	r18,0(r5)
    630c:	84a1c83a 	sub	r16,r16,r18
    6310:	1000131e 	bne	r2,zero,6360 <__sflush_r+0x158>
    6314:	28800517 	ldw	r2,20(r5)
    6318:	88800215 	stw	r2,8(r17)
    631c:	04000316 	blt	zero,r16,632c <__sflush_r+0x124>
    6320:	003fed06 	br	62d8 <__sflush_r+0xd0>
    6324:	90a5883a 	add	r18,r18,r2
    6328:	043feb0e 	bge	zero,r16,62d8 <__sflush_r+0xd0>
    632c:	88800917 	ldw	r2,36(r17)
    6330:	89400717 	ldw	r5,28(r17)
    6334:	800f883a 	mov	r7,r16
    6338:	900d883a 	mov	r6,r18
    633c:	9809883a 	mov	r4,r19
    6340:	103ee83a 	callr	r2
    6344:	80a1c83a 	sub	r16,r16,r2
    6348:	00bff616 	blt	zero,r2,6324 <__sflush_r+0x11c>
    634c:	88c0030b 	ldhu	r3,12(r17)
    6350:	00bfffc4 	movi	r2,-1
    6354:	18c01014 	ori	r3,r3,64
    6358:	88c0030d 	sth	r3,12(r17)
    635c:	003fdf06 	br	62dc <__sflush_r+0xd4>
    6360:	0005883a 	mov	r2,zero
    6364:	003fec06 	br	6318 <__sflush_r+0x110>
    6368:	88801415 	stw	r2,80(r17)
    636c:	003fd206 	br	62b8 <__sflush_r+0xb0>
    6370:	28c00f17 	ldw	r3,60(r5)
    6374:	00ffb316 	blt	zero,r3,6244 <__sflush_r+0x3c>
    6378:	003fd706 	br	62d8 <__sflush_r+0xd0>
    637c:	89400717 	ldw	r5,28(r17)
    6380:	000d883a 	mov	r6,zero
    6384:	01c00044 	movi	r7,1
    6388:	9809883a 	mov	r4,r19
    638c:	403ee83a 	callr	r8
    6390:	100d883a 	mov	r6,r2
    6394:	00bfffc4 	movi	r2,-1
    6398:	30801426 	beq	r6,r2,63ec <__sflush_r+0x1e4>
    639c:	8880030b 	ldhu	r2,12(r17)
    63a0:	8a000a17 	ldw	r8,40(r17)
    63a4:	003fae06 	br	6260 <__sflush_r+0x58>
    63a8:	98c00017 	ldw	r3,0(r19)
    63ac:	183fba26 	beq	r3,zero,6298 <__sflush_r+0x90>
    63b0:	01000744 	movi	r4,29
    63b4:	19000626 	beq	r3,r4,63d0 <__sflush_r+0x1c8>
    63b8:	01000584 	movi	r4,22
    63bc:	19000426 	beq	r3,r4,63d0 <__sflush_r+0x1c8>
    63c0:	88c0030b 	ldhu	r3,12(r17)
    63c4:	18c01014 	ori	r3,r3,64
    63c8:	88c0030d 	sth	r3,12(r17)
    63cc:	003fc306 	br	62dc <__sflush_r+0xd4>
    63d0:	8880030b 	ldhu	r2,12(r17)
    63d4:	88c00417 	ldw	r3,16(r17)
    63d8:	88000115 	stw	zero,4(r17)
    63dc:	10bdffcc 	andi	r2,r2,63487
    63e0:	8880030d 	sth	r2,12(r17)
    63e4:	88c00015 	stw	r3,0(r17)
    63e8:	003fb306 	br	62b8 <__sflush_r+0xb0>
    63ec:	98800017 	ldw	r2,0(r19)
    63f0:	103fea26 	beq	r2,zero,639c <__sflush_r+0x194>
    63f4:	00c00744 	movi	r3,29
    63f8:	10c00226 	beq	r2,r3,6404 <__sflush_r+0x1fc>
    63fc:	00c00584 	movi	r3,22
    6400:	10c0031e 	bne	r2,r3,6410 <__sflush_r+0x208>
    6404:	9c000015 	stw	r16,0(r19)
    6408:	0005883a 	mov	r2,zero
    640c:	003fb306 	br	62dc <__sflush_r+0xd4>
    6410:	88c0030b 	ldhu	r3,12(r17)
    6414:	3005883a 	mov	r2,r6
    6418:	18c01014 	ori	r3,r3,64
    641c:	88c0030d 	sth	r3,12(r17)
    6420:	003fae06 	br	62dc <__sflush_r+0xd4>

00006424 <_fflush_r>:
    6424:	defffd04 	addi	sp,sp,-12
    6428:	dc000115 	stw	r16,4(sp)
    642c:	dfc00215 	stw	ra,8(sp)
    6430:	2021883a 	mov	r16,r4
    6434:	20000226 	beq	r4,zero,6440 <_fflush_r+0x1c>
    6438:	20800e17 	ldw	r2,56(r4)
    643c:	10000c26 	beq	r2,zero,6470 <_fflush_r+0x4c>
    6440:	2880030f 	ldh	r2,12(r5)
    6444:	1000051e 	bne	r2,zero,645c <_fflush_r+0x38>
    6448:	0005883a 	mov	r2,zero
    644c:	dfc00217 	ldw	ra,8(sp)
    6450:	dc000117 	ldw	r16,4(sp)
    6454:	dec00304 	addi	sp,sp,12
    6458:	f800283a 	ret
    645c:	8009883a 	mov	r4,r16
    6460:	dfc00217 	ldw	ra,8(sp)
    6464:	dc000117 	ldw	r16,4(sp)
    6468:	dec00304 	addi	sp,sp,12
    646c:	00062081 	jmpi	6208 <__sflush_r>
    6470:	d9400015 	stw	r5,0(sp)
    6474:	00068100 	call	6810 <__sinit>
    6478:	d9400017 	ldw	r5,0(sp)
    647c:	003ff006 	br	6440 <_fflush_r+0x1c>

00006480 <fflush>:
    6480:	20000526 	beq	r4,zero,6498 <fflush+0x18>
    6484:	00800074 	movhi	r2,1
    6488:	108fc404 	addi	r2,r2,16144
    648c:	200b883a 	mov	r5,r4
    6490:	11000017 	ldw	r4,0(r2)
    6494:	00064241 	jmpi	6424 <_fflush_r>
    6498:	00800074 	movhi	r2,1
    649c:	108fc304 	addi	r2,r2,16140
    64a0:	11000017 	ldw	r4,0(r2)
    64a4:	01400034 	movhi	r5,0
    64a8:	29590904 	addi	r5,r5,25636
    64ac:	00072201 	jmpi	7220 <_fwalk_reent>

000064b0 <__fp_unlock>:
    64b0:	0005883a 	mov	r2,zero
    64b4:	f800283a 	ret

000064b8 <_cleanup_r>:
    64b8:	01400074 	movhi	r5,1
    64bc:	296cef04 	addi	r5,r5,-19524
    64c0:	00072201 	jmpi	7220 <_fwalk_reent>

000064c4 <__sinit.part.1>:
    64c4:	defff704 	addi	sp,sp,-36
    64c8:	00c00034 	movhi	r3,0
    64cc:	dfc00815 	stw	ra,32(sp)
    64d0:	ddc00715 	stw	r23,28(sp)
    64d4:	dd800615 	stw	r22,24(sp)
    64d8:	dd400515 	stw	r21,20(sp)
    64dc:	dd000415 	stw	r20,16(sp)
    64e0:	dcc00315 	stw	r19,12(sp)
    64e4:	dc800215 	stw	r18,8(sp)
    64e8:	dc400115 	stw	r17,4(sp)
    64ec:	dc000015 	stw	r16,0(sp)
    64f0:	18d92e04 	addi	r3,r3,25784
    64f4:	24000117 	ldw	r16,4(r4)
    64f8:	20c00f15 	stw	r3,60(r4)
    64fc:	2080bb04 	addi	r2,r4,748
    6500:	00c000c4 	movi	r3,3
    6504:	20c0b915 	stw	r3,740(r4)
    6508:	2080ba15 	stw	r2,744(r4)
    650c:	2000b815 	stw	zero,736(r4)
    6510:	05c00204 	movi	r23,8
    6514:	00800104 	movi	r2,4
    6518:	2025883a 	mov	r18,r4
    651c:	b80d883a 	mov	r6,r23
    6520:	81001704 	addi	r4,r16,92
    6524:	000b883a 	mov	r5,zero
    6528:	80000015 	stw	zero,0(r16)
    652c:	80000115 	stw	zero,4(r16)
    6530:	80000215 	stw	zero,8(r16)
    6534:	8080030d 	sth	r2,12(r16)
    6538:	80001915 	stw	zero,100(r16)
    653c:	8000038d 	sth	zero,14(r16)
    6540:	80000415 	stw	zero,16(r16)
    6544:	80000515 	stw	zero,20(r16)
    6548:	80000615 	stw	zero,24(r16)
    654c:	00081100 	call	8110 <memset>
    6550:	05800074 	movhi	r22,1
    6554:	94400217 	ldw	r17,8(r18)
    6558:	05400074 	movhi	r21,1
    655c:	05000074 	movhi	r20,1
    6560:	04c00074 	movhi	r19,1
    6564:	b5a64704 	addi	r22,r22,-26340
    6568:	ad665e04 	addi	r21,r21,-26248
    656c:	a5267d04 	addi	r20,r20,-26124
    6570:	9ce69404 	addi	r19,r19,-26032
    6574:	85800815 	stw	r22,32(r16)
    6578:	85400915 	stw	r21,36(r16)
    657c:	85000a15 	stw	r20,40(r16)
    6580:	84c00b15 	stw	r19,44(r16)
    6584:	84000715 	stw	r16,28(r16)
    6588:	00800284 	movi	r2,10
    658c:	8880030d 	sth	r2,12(r17)
    6590:	00800044 	movi	r2,1
    6594:	b80d883a 	mov	r6,r23
    6598:	89001704 	addi	r4,r17,92
    659c:	000b883a 	mov	r5,zero
    65a0:	88000015 	stw	zero,0(r17)
    65a4:	88000115 	stw	zero,4(r17)
    65a8:	88000215 	stw	zero,8(r17)
    65ac:	88001915 	stw	zero,100(r17)
    65b0:	8880038d 	sth	r2,14(r17)
    65b4:	88000415 	stw	zero,16(r17)
    65b8:	88000515 	stw	zero,20(r17)
    65bc:	88000615 	stw	zero,24(r17)
    65c0:	00081100 	call	8110 <memset>
    65c4:	94000317 	ldw	r16,12(r18)
    65c8:	00800484 	movi	r2,18
    65cc:	8c400715 	stw	r17,28(r17)
    65d0:	8d800815 	stw	r22,32(r17)
    65d4:	8d400915 	stw	r21,36(r17)
    65d8:	8d000a15 	stw	r20,40(r17)
    65dc:	8cc00b15 	stw	r19,44(r17)
    65e0:	8080030d 	sth	r2,12(r16)
    65e4:	00800084 	movi	r2,2
    65e8:	80000015 	stw	zero,0(r16)
    65ec:	80000115 	stw	zero,4(r16)
    65f0:	80000215 	stw	zero,8(r16)
    65f4:	80001915 	stw	zero,100(r16)
    65f8:	8080038d 	sth	r2,14(r16)
    65fc:	80000415 	stw	zero,16(r16)
    6600:	80000515 	stw	zero,20(r16)
    6604:	80000615 	stw	zero,24(r16)
    6608:	b80d883a 	mov	r6,r23
    660c:	000b883a 	mov	r5,zero
    6610:	81001704 	addi	r4,r16,92
    6614:	00081100 	call	8110 <memset>
    6618:	00800044 	movi	r2,1
    661c:	84000715 	stw	r16,28(r16)
    6620:	85800815 	stw	r22,32(r16)
    6624:	85400915 	stw	r21,36(r16)
    6628:	85000a15 	stw	r20,40(r16)
    662c:	84c00b15 	stw	r19,44(r16)
    6630:	90800e15 	stw	r2,56(r18)
    6634:	dfc00817 	ldw	ra,32(sp)
    6638:	ddc00717 	ldw	r23,28(sp)
    663c:	dd800617 	ldw	r22,24(sp)
    6640:	dd400517 	ldw	r21,20(sp)
    6644:	dd000417 	ldw	r20,16(sp)
    6648:	dcc00317 	ldw	r19,12(sp)
    664c:	dc800217 	ldw	r18,8(sp)
    6650:	dc400117 	ldw	r17,4(sp)
    6654:	dc000017 	ldw	r16,0(sp)
    6658:	dec00904 	addi	sp,sp,36
    665c:	f800283a 	ret

00006660 <__fp_lock>:
    6660:	0005883a 	mov	r2,zero
    6664:	f800283a 	ret

00006668 <__sfmoreglue>:
    6668:	defffc04 	addi	sp,sp,-16
    666c:	dc800215 	stw	r18,8(sp)
    6670:	2825883a 	mov	r18,r5
    6674:	dc000015 	stw	r16,0(sp)
    6678:	01401a04 	movi	r5,104
    667c:	2021883a 	mov	r16,r4
    6680:	913fffc4 	addi	r4,r18,-1
    6684:	dfc00315 	stw	ra,12(sp)
    6688:	dc400115 	stw	r17,4(sp)
    668c:	000c8ec0 	call	c8ec <__mulsi3>
    6690:	8009883a 	mov	r4,r16
    6694:	11401d04 	addi	r5,r2,116
    6698:	1023883a 	mov	r17,r2
    669c:	000757c0 	call	757c <_malloc_r>
    66a0:	1021883a 	mov	r16,r2
    66a4:	10000726 	beq	r2,zero,66c4 <__sfmoreglue+0x5c>
    66a8:	11000304 	addi	r4,r2,12
    66ac:	10000015 	stw	zero,0(r2)
    66b0:	14800115 	stw	r18,4(r2)
    66b4:	11000215 	stw	r4,8(r2)
    66b8:	89801a04 	addi	r6,r17,104
    66bc:	000b883a 	mov	r5,zero
    66c0:	00081100 	call	8110 <memset>
    66c4:	8005883a 	mov	r2,r16
    66c8:	dfc00317 	ldw	ra,12(sp)
    66cc:	dc800217 	ldw	r18,8(sp)
    66d0:	dc400117 	ldw	r17,4(sp)
    66d4:	dc000017 	ldw	r16,0(sp)
    66d8:	dec00404 	addi	sp,sp,16
    66dc:	f800283a 	ret

000066e0 <__sfp>:
    66e0:	defffb04 	addi	sp,sp,-20
    66e4:	dc000015 	stw	r16,0(sp)
    66e8:	04000074 	movhi	r16,1
    66ec:	840fc304 	addi	r16,r16,16140
    66f0:	dcc00315 	stw	r19,12(sp)
    66f4:	2027883a 	mov	r19,r4
    66f8:	81000017 	ldw	r4,0(r16)
    66fc:	dfc00415 	stw	ra,16(sp)
    6700:	dc800215 	stw	r18,8(sp)
    6704:	20800e17 	ldw	r2,56(r4)
    6708:	dc400115 	stw	r17,4(sp)
    670c:	1000021e 	bne	r2,zero,6718 <__sfp+0x38>
    6710:	00064c40 	call	64c4 <__sinit.part.1>
    6714:	81000017 	ldw	r4,0(r16)
    6718:	2480b804 	addi	r18,r4,736
    671c:	047fffc4 	movi	r17,-1
    6720:	91000117 	ldw	r4,4(r18)
    6724:	94000217 	ldw	r16,8(r18)
    6728:	213fffc4 	addi	r4,r4,-1
    672c:	20000a16 	blt	r4,zero,6758 <__sfp+0x78>
    6730:	8080030f 	ldh	r2,12(r16)
    6734:	10000c26 	beq	r2,zero,6768 <__sfp+0x88>
    6738:	80c01d04 	addi	r3,r16,116
    673c:	00000206 	br	6748 <__sfp+0x68>
    6740:	18bfe60f 	ldh	r2,-104(r3)
    6744:	10000826 	beq	r2,zero,6768 <__sfp+0x88>
    6748:	213fffc4 	addi	r4,r4,-1
    674c:	1c3ffd04 	addi	r16,r3,-12
    6750:	18c01a04 	addi	r3,r3,104
    6754:	247ffa1e 	bne	r4,r17,6740 <__sfp+0x60>
    6758:	90800017 	ldw	r2,0(r18)
    675c:	10001d26 	beq	r2,zero,67d4 <__sfp+0xf4>
    6760:	1025883a 	mov	r18,r2
    6764:	003fee06 	br	6720 <__sfp+0x40>
    6768:	00bfffc4 	movi	r2,-1
    676c:	8080038d 	sth	r2,14(r16)
    6770:	00800044 	movi	r2,1
    6774:	8080030d 	sth	r2,12(r16)
    6778:	80001915 	stw	zero,100(r16)
    677c:	80000015 	stw	zero,0(r16)
    6780:	80000215 	stw	zero,8(r16)
    6784:	80000115 	stw	zero,4(r16)
    6788:	80000415 	stw	zero,16(r16)
    678c:	80000515 	stw	zero,20(r16)
    6790:	80000615 	stw	zero,24(r16)
    6794:	01800204 	movi	r6,8
    6798:	000b883a 	mov	r5,zero
    679c:	81001704 	addi	r4,r16,92
    67a0:	00081100 	call	8110 <memset>
    67a4:	8005883a 	mov	r2,r16
    67a8:	80000c15 	stw	zero,48(r16)
    67ac:	80000d15 	stw	zero,52(r16)
    67b0:	80001115 	stw	zero,68(r16)
    67b4:	80001215 	stw	zero,72(r16)
    67b8:	dfc00417 	ldw	ra,16(sp)
    67bc:	dcc00317 	ldw	r19,12(sp)
    67c0:	dc800217 	ldw	r18,8(sp)
    67c4:	dc400117 	ldw	r17,4(sp)
    67c8:	dc000017 	ldw	r16,0(sp)
    67cc:	dec00504 	addi	sp,sp,20
    67d0:	f800283a 	ret
    67d4:	01400104 	movi	r5,4
    67d8:	9809883a 	mov	r4,r19
    67dc:	00066680 	call	6668 <__sfmoreglue>
    67e0:	90800015 	stw	r2,0(r18)
    67e4:	103fde1e 	bne	r2,zero,6760 <__sfp+0x80>
    67e8:	00800304 	movi	r2,12
    67ec:	98800015 	stw	r2,0(r19)
    67f0:	0005883a 	mov	r2,zero
    67f4:	003ff006 	br	67b8 <__sfp+0xd8>

000067f8 <_cleanup>:
    67f8:	00800074 	movhi	r2,1
    67fc:	108fc304 	addi	r2,r2,16140
    6800:	11000017 	ldw	r4,0(r2)
    6804:	01400074 	movhi	r5,1
    6808:	296cef04 	addi	r5,r5,-19524
    680c:	00072201 	jmpi	7220 <_fwalk_reent>

00006810 <__sinit>:
    6810:	20800e17 	ldw	r2,56(r4)
    6814:	10000126 	beq	r2,zero,681c <__sinit+0xc>
    6818:	f800283a 	ret
    681c:	00064c41 	jmpi	64c4 <__sinit.part.1>

00006820 <__sfp_lock_acquire>:
    6820:	f800283a 	ret

00006824 <__sfp_lock_release>:
    6824:	f800283a 	ret

00006828 <__sinit_lock_acquire>:
    6828:	f800283a 	ret

0000682c <__sinit_lock_release>:
    682c:	f800283a 	ret

00006830 <__fp_lock_all>:
    6830:	00800074 	movhi	r2,1
    6834:	108fc404 	addi	r2,r2,16144
    6838:	11000017 	ldw	r4,0(r2)
    683c:	01400034 	movhi	r5,0
    6840:	29599804 	addi	r5,r5,26208
    6844:	000715c1 	jmpi	715c <_fwalk>

00006848 <__fp_unlock_all>:
    6848:	00800074 	movhi	r2,1
    684c:	108fc404 	addi	r2,r2,16144
    6850:	11000017 	ldw	r4,0(r2)
    6854:	01400034 	movhi	r5,0
    6858:	29592c04 	addi	r5,r5,25776
    685c:	000715c1 	jmpi	715c <_fwalk>

00006860 <_malloc_trim_r>:
    6860:	defffb04 	addi	sp,sp,-20
    6864:	dcc00315 	stw	r19,12(sp)
    6868:	04c00074 	movhi	r19,1
    686c:	dc800215 	stw	r18,8(sp)
    6870:	dc400115 	stw	r17,4(sp)
    6874:	dc000015 	stw	r16,0(sp)
    6878:	dfc00415 	stw	ra,16(sp)
    687c:	2821883a 	mov	r16,r5
    6880:	9cca3f04 	addi	r19,r19,10492
    6884:	2025883a 	mov	r18,r4
    6888:	000f7540 	call	f754 <__malloc_lock>
    688c:	98800217 	ldw	r2,8(r19)
    6890:	14400117 	ldw	r17,4(r2)
    6894:	00bfff04 	movi	r2,-4
    6898:	88a2703a 	and	r17,r17,r2
    689c:	8c21c83a 	sub	r16,r17,r16
    68a0:	8403fbc4 	addi	r16,r16,4079
    68a4:	8020d33a 	srli	r16,r16,12
    68a8:	0083ffc4 	movi	r2,4095
    68ac:	843fffc4 	addi	r16,r16,-1
    68b0:	8020933a 	slli	r16,r16,12
    68b4:	1400060e 	bge	r2,r16,68d0 <_malloc_trim_r+0x70>
    68b8:	000b883a 	mov	r5,zero
    68bc:	9009883a 	mov	r4,r18
    68c0:	00098c80 	call	98c8 <_sbrk_r>
    68c4:	98c00217 	ldw	r3,8(r19)
    68c8:	1c47883a 	add	r3,r3,r17
    68cc:	10c00a26 	beq	r2,r3,68f8 <_malloc_trim_r+0x98>
    68d0:	9009883a 	mov	r4,r18
    68d4:	000f7780 	call	f778 <__malloc_unlock>
    68d8:	0005883a 	mov	r2,zero
    68dc:	dfc00417 	ldw	ra,16(sp)
    68e0:	dcc00317 	ldw	r19,12(sp)
    68e4:	dc800217 	ldw	r18,8(sp)
    68e8:	dc400117 	ldw	r17,4(sp)
    68ec:	dc000017 	ldw	r16,0(sp)
    68f0:	dec00504 	addi	sp,sp,20
    68f4:	f800283a 	ret
    68f8:	040bc83a 	sub	r5,zero,r16
    68fc:	9009883a 	mov	r4,r18
    6900:	00098c80 	call	98c8 <_sbrk_r>
    6904:	00ffffc4 	movi	r3,-1
    6908:	10c00d26 	beq	r2,r3,6940 <_malloc_trim_r+0xe0>
    690c:	00c00074 	movhi	r3,1
    6910:	18d69d04 	addi	r3,r3,23156
    6914:	18800017 	ldw	r2,0(r3)
    6918:	99000217 	ldw	r4,8(r19)
    691c:	8c23c83a 	sub	r17,r17,r16
    6920:	8c400054 	ori	r17,r17,1
    6924:	1421c83a 	sub	r16,r2,r16
    6928:	24400115 	stw	r17,4(r4)
    692c:	9009883a 	mov	r4,r18
    6930:	1c000015 	stw	r16,0(r3)
    6934:	000f7780 	call	f778 <__malloc_unlock>
    6938:	00800044 	movi	r2,1
    693c:	003fe706 	br	68dc <_malloc_trim_r+0x7c>
    6940:	000b883a 	mov	r5,zero
    6944:	9009883a 	mov	r4,r18
    6948:	00098c80 	call	98c8 <_sbrk_r>
    694c:	99000217 	ldw	r4,8(r19)
    6950:	014003c4 	movi	r5,15
    6954:	1107c83a 	sub	r3,r2,r4
    6958:	28ffdd0e 	bge	r5,r3,68d0 <_malloc_trim_r+0x70>
    695c:	01400074 	movhi	r5,1
    6960:	294fc604 	addi	r5,r5,16152
    6964:	29400017 	ldw	r5,0(r5)
    6968:	18c00054 	ori	r3,r3,1
    696c:	20c00115 	stw	r3,4(r4)
    6970:	00c00074 	movhi	r3,1
    6974:	1145c83a 	sub	r2,r2,r5
    6978:	18d69d04 	addi	r3,r3,23156
    697c:	18800015 	stw	r2,0(r3)
    6980:	003fd306 	br	68d0 <_malloc_trim_r+0x70>

00006984 <_free_r>:
    6984:	28004126 	beq	r5,zero,6a8c <_free_r+0x108>
    6988:	defffd04 	addi	sp,sp,-12
    698c:	dc400115 	stw	r17,4(sp)
    6990:	dc000015 	stw	r16,0(sp)
    6994:	2023883a 	mov	r17,r4
    6998:	2821883a 	mov	r16,r5
    699c:	dfc00215 	stw	ra,8(sp)
    69a0:	000f7540 	call	f754 <__malloc_lock>
    69a4:	81ffff17 	ldw	r7,-4(r16)
    69a8:	00bfff84 	movi	r2,-2
    69ac:	01000074 	movhi	r4,1
    69b0:	81bffe04 	addi	r6,r16,-8
    69b4:	3884703a 	and	r2,r7,r2
    69b8:	210a3f04 	addi	r4,r4,10492
    69bc:	308b883a 	add	r5,r6,r2
    69c0:	2a400117 	ldw	r9,4(r5)
    69c4:	22000217 	ldw	r8,8(r4)
    69c8:	00ffff04 	movi	r3,-4
    69cc:	48c6703a 	and	r3,r9,r3
    69d0:	2a005726 	beq	r5,r8,6b30 <_free_r+0x1ac>
    69d4:	28c00115 	stw	r3,4(r5)
    69d8:	39c0004c 	andi	r7,r7,1
    69dc:	3800091e 	bne	r7,zero,6a04 <_free_r+0x80>
    69e0:	823ffe17 	ldw	r8,-8(r16)
    69e4:	22400204 	addi	r9,r4,8
    69e8:	320dc83a 	sub	r6,r6,r8
    69ec:	31c00217 	ldw	r7,8(r6)
    69f0:	1205883a 	add	r2,r2,r8
    69f4:	3a406526 	beq	r7,r9,6b8c <_free_r+0x208>
    69f8:	32000317 	ldw	r8,12(r6)
    69fc:	3a000315 	stw	r8,12(r7)
    6a00:	41c00215 	stw	r7,8(r8)
    6a04:	28cf883a 	add	r7,r5,r3
    6a08:	39c00117 	ldw	r7,4(r7)
    6a0c:	39c0004c 	andi	r7,r7,1
    6a10:	38003a26 	beq	r7,zero,6afc <_free_r+0x178>
    6a14:	10c00054 	ori	r3,r2,1
    6a18:	30c00115 	stw	r3,4(r6)
    6a1c:	3087883a 	add	r3,r6,r2
    6a20:	18800015 	stw	r2,0(r3)
    6a24:	00c07fc4 	movi	r3,511
    6a28:	18801936 	bltu	r3,r2,6a90 <_free_r+0x10c>
    6a2c:	1004d0fa 	srli	r2,r2,3
    6a30:	01c00044 	movi	r7,1
    6a34:	21400117 	ldw	r5,4(r4)
    6a38:	10c00044 	addi	r3,r2,1
    6a3c:	18c7883a 	add	r3,r3,r3
    6a40:	1005d0ba 	srai	r2,r2,2
    6a44:	18c7883a 	add	r3,r3,r3
    6a48:	18c7883a 	add	r3,r3,r3
    6a4c:	1907883a 	add	r3,r3,r4
    6a50:	3884983a 	sll	r2,r7,r2
    6a54:	19c00017 	ldw	r7,0(r3)
    6a58:	1a3ffe04 	addi	r8,r3,-8
    6a5c:	1144b03a 	or	r2,r2,r5
    6a60:	32000315 	stw	r8,12(r6)
    6a64:	31c00215 	stw	r7,8(r6)
    6a68:	20800115 	stw	r2,4(r4)
    6a6c:	19800015 	stw	r6,0(r3)
    6a70:	39800315 	stw	r6,12(r7)
    6a74:	8809883a 	mov	r4,r17
    6a78:	dfc00217 	ldw	ra,8(sp)
    6a7c:	dc400117 	ldw	r17,4(sp)
    6a80:	dc000017 	ldw	r16,0(sp)
    6a84:	dec00304 	addi	sp,sp,12
    6a88:	000f7781 	jmpi	f778 <__malloc_unlock>
    6a8c:	f800283a 	ret
    6a90:	100ad27a 	srli	r5,r2,9
    6a94:	00c00104 	movi	r3,4
    6a98:	19404a36 	bltu	r3,r5,6bc4 <_free_r+0x240>
    6a9c:	100ad1ba 	srli	r5,r2,6
    6aa0:	28c00e44 	addi	r3,r5,57
    6aa4:	18c7883a 	add	r3,r3,r3
    6aa8:	29400e04 	addi	r5,r5,56
    6aac:	18c7883a 	add	r3,r3,r3
    6ab0:	18c7883a 	add	r3,r3,r3
    6ab4:	1909883a 	add	r4,r3,r4
    6ab8:	20c00017 	ldw	r3,0(r4)
    6abc:	01c00074 	movhi	r7,1
    6ac0:	213ffe04 	addi	r4,r4,-8
    6ac4:	39ca3f04 	addi	r7,r7,10492
    6ac8:	20c04426 	beq	r4,r3,6bdc <_free_r+0x258>
    6acc:	01ffff04 	movi	r7,-4
    6ad0:	19400117 	ldw	r5,4(r3)
    6ad4:	29ca703a 	and	r5,r5,r7
    6ad8:	1140022e 	bgeu	r2,r5,6ae4 <_free_r+0x160>
    6adc:	18c00217 	ldw	r3,8(r3)
    6ae0:	20fffb1e 	bne	r4,r3,6ad0 <_free_r+0x14c>
    6ae4:	19000317 	ldw	r4,12(r3)
    6ae8:	31000315 	stw	r4,12(r6)
    6aec:	30c00215 	stw	r3,8(r6)
    6af0:	21800215 	stw	r6,8(r4)
    6af4:	19800315 	stw	r6,12(r3)
    6af8:	003fde06 	br	6a74 <_free_r+0xf0>
    6afc:	29c00217 	ldw	r7,8(r5)
    6b00:	10c5883a 	add	r2,r2,r3
    6b04:	00c00074 	movhi	r3,1
    6b08:	18ca4104 	addi	r3,r3,10500
    6b0c:	38c03b26 	beq	r7,r3,6bfc <_free_r+0x278>
    6b10:	2a000317 	ldw	r8,12(r5)
    6b14:	11400054 	ori	r5,r2,1
    6b18:	3087883a 	add	r3,r6,r2
    6b1c:	3a000315 	stw	r8,12(r7)
    6b20:	41c00215 	stw	r7,8(r8)
    6b24:	31400115 	stw	r5,4(r6)
    6b28:	18800015 	stw	r2,0(r3)
    6b2c:	003fbd06 	br	6a24 <_free_r+0xa0>
    6b30:	39c0004c 	andi	r7,r7,1
    6b34:	10c5883a 	add	r2,r2,r3
    6b38:	3800071e 	bne	r7,zero,6b58 <_free_r+0x1d4>
    6b3c:	81fffe17 	ldw	r7,-8(r16)
    6b40:	31cdc83a 	sub	r6,r6,r7
    6b44:	30c00317 	ldw	r3,12(r6)
    6b48:	31400217 	ldw	r5,8(r6)
    6b4c:	11c5883a 	add	r2,r2,r7
    6b50:	28c00315 	stw	r3,12(r5)
    6b54:	19400215 	stw	r5,8(r3)
    6b58:	10c00054 	ori	r3,r2,1
    6b5c:	30c00115 	stw	r3,4(r6)
    6b60:	00c00074 	movhi	r3,1
    6b64:	18cfc704 	addi	r3,r3,16156
    6b68:	18c00017 	ldw	r3,0(r3)
    6b6c:	21800215 	stw	r6,8(r4)
    6b70:	10ffc036 	bltu	r2,r3,6a74 <_free_r+0xf0>
    6b74:	00800074 	movhi	r2,1
    6b78:	10969404 	addi	r2,r2,23120
    6b7c:	11400017 	ldw	r5,0(r2)
    6b80:	8809883a 	mov	r4,r17
    6b84:	00068600 	call	6860 <_malloc_trim_r>
    6b88:	003fba06 	br	6a74 <_free_r+0xf0>
    6b8c:	28c9883a 	add	r4,r5,r3
    6b90:	21000117 	ldw	r4,4(r4)
    6b94:	2100004c 	andi	r4,r4,1
    6b98:	2000391e 	bne	r4,zero,6c80 <_free_r+0x2fc>
    6b9c:	29c00217 	ldw	r7,8(r5)
    6ba0:	29000317 	ldw	r4,12(r5)
    6ba4:	1885883a 	add	r2,r3,r2
    6ba8:	10c00054 	ori	r3,r2,1
    6bac:	39000315 	stw	r4,12(r7)
    6bb0:	21c00215 	stw	r7,8(r4)
    6bb4:	30c00115 	stw	r3,4(r6)
    6bb8:	308d883a 	add	r6,r6,r2
    6bbc:	30800015 	stw	r2,0(r6)
    6bc0:	003fac06 	br	6a74 <_free_r+0xf0>
    6bc4:	00c00504 	movi	r3,20
    6bc8:	19401536 	bltu	r3,r5,6c20 <_free_r+0x29c>
    6bcc:	28c01704 	addi	r3,r5,92
    6bd0:	18c7883a 	add	r3,r3,r3
    6bd4:	294016c4 	addi	r5,r5,91
    6bd8:	003fb406 	br	6aac <_free_r+0x128>
    6bdc:	280bd0ba 	srai	r5,r5,2
    6be0:	00c00044 	movi	r3,1
    6be4:	38800117 	ldw	r2,4(r7)
    6be8:	194a983a 	sll	r5,r3,r5
    6bec:	2007883a 	mov	r3,r4
    6bf0:	2884b03a 	or	r2,r5,r2
    6bf4:	38800115 	stw	r2,4(r7)
    6bf8:	003fbb06 	br	6ae8 <_free_r+0x164>
    6bfc:	21800515 	stw	r6,20(r4)
    6c00:	21800415 	stw	r6,16(r4)
    6c04:	10c00054 	ori	r3,r2,1
    6c08:	31c00315 	stw	r7,12(r6)
    6c0c:	31c00215 	stw	r7,8(r6)
    6c10:	30c00115 	stw	r3,4(r6)
    6c14:	308d883a 	add	r6,r6,r2
    6c18:	30800015 	stw	r2,0(r6)
    6c1c:	003f9506 	br	6a74 <_free_r+0xf0>
    6c20:	00c01504 	movi	r3,84
    6c24:	19400536 	bltu	r3,r5,6c3c <_free_r+0x2b8>
    6c28:	100ad33a 	srli	r5,r2,12
    6c2c:	28c01bc4 	addi	r3,r5,111
    6c30:	18c7883a 	add	r3,r3,r3
    6c34:	29401b84 	addi	r5,r5,110
    6c38:	003f9c06 	br	6aac <_free_r+0x128>
    6c3c:	00c05504 	movi	r3,340
    6c40:	19400536 	bltu	r3,r5,6c58 <_free_r+0x2d4>
    6c44:	100ad3fa 	srli	r5,r2,15
    6c48:	28c01e04 	addi	r3,r5,120
    6c4c:	18c7883a 	add	r3,r3,r3
    6c50:	29401dc4 	addi	r5,r5,119
    6c54:	003f9506 	br	6aac <_free_r+0x128>
    6c58:	00c15504 	movi	r3,1364
    6c5c:	19400536 	bltu	r3,r5,6c74 <_free_r+0x2f0>
    6c60:	100ad4ba 	srli	r5,r2,18
    6c64:	28c01f44 	addi	r3,r5,125
    6c68:	18c7883a 	add	r3,r3,r3
    6c6c:	29401f04 	addi	r5,r5,124
    6c70:	003f8e06 	br	6aac <_free_r+0x128>
    6c74:	00c03f84 	movi	r3,254
    6c78:	01401f84 	movi	r5,126
    6c7c:	003f8b06 	br	6aac <_free_r+0x128>
    6c80:	10c00054 	ori	r3,r2,1
    6c84:	30c00115 	stw	r3,4(r6)
    6c88:	308d883a 	add	r6,r6,r2
    6c8c:	30800015 	stw	r2,0(r6)
    6c90:	003f7806 	br	6a74 <_free_r+0xf0>

00006c94 <__sfvwrite_r>:
    6c94:	30800217 	ldw	r2,8(r6)
    6c98:	10006726 	beq	r2,zero,6e38 <__sfvwrite_r+0x1a4>
    6c9c:	28c0030b 	ldhu	r3,12(r5)
    6ca0:	defff404 	addi	sp,sp,-48
    6ca4:	dd400715 	stw	r21,28(sp)
    6ca8:	dd000615 	stw	r20,24(sp)
    6cac:	dc000215 	stw	r16,8(sp)
    6cb0:	dfc00b15 	stw	ra,44(sp)
    6cb4:	df000a15 	stw	fp,40(sp)
    6cb8:	ddc00915 	stw	r23,36(sp)
    6cbc:	dd800815 	stw	r22,32(sp)
    6cc0:	dcc00515 	stw	r19,20(sp)
    6cc4:	dc800415 	stw	r18,16(sp)
    6cc8:	dc400315 	stw	r17,12(sp)
    6ccc:	1880020c 	andi	r2,r3,8
    6cd0:	2821883a 	mov	r16,r5
    6cd4:	202b883a 	mov	r21,r4
    6cd8:	3029883a 	mov	r20,r6
    6cdc:	10002726 	beq	r2,zero,6d7c <__sfvwrite_r+0xe8>
    6ce0:	28800417 	ldw	r2,16(r5)
    6ce4:	10002526 	beq	r2,zero,6d7c <__sfvwrite_r+0xe8>
    6ce8:	1880008c 	andi	r2,r3,2
    6cec:	a4400017 	ldw	r17,0(r20)
    6cf0:	10002a26 	beq	r2,zero,6d9c <__sfvwrite_r+0x108>
    6cf4:	05a00034 	movhi	r22,32768
    6cf8:	0027883a 	mov	r19,zero
    6cfc:	0025883a 	mov	r18,zero
    6d00:	b5bf0004 	addi	r22,r22,-1024
    6d04:	980d883a 	mov	r6,r19
    6d08:	a809883a 	mov	r4,r21
    6d0c:	90004626 	beq	r18,zero,6e28 <__sfvwrite_r+0x194>
    6d10:	900f883a 	mov	r7,r18
    6d14:	b480022e 	bgeu	r22,r18,6d20 <__sfvwrite_r+0x8c>
    6d18:	01e00034 	movhi	r7,32768
    6d1c:	39ff0004 	addi	r7,r7,-1024
    6d20:	80800917 	ldw	r2,36(r16)
    6d24:	81400717 	ldw	r5,28(r16)
    6d28:	103ee83a 	callr	r2
    6d2c:	00805a0e 	bge	zero,r2,6e98 <__sfvwrite_r+0x204>
    6d30:	a0c00217 	ldw	r3,8(r20)
    6d34:	98a7883a 	add	r19,r19,r2
    6d38:	90a5c83a 	sub	r18,r18,r2
    6d3c:	1885c83a 	sub	r2,r3,r2
    6d40:	a0800215 	stw	r2,8(r20)
    6d44:	103fef1e 	bne	r2,zero,6d04 <__sfvwrite_r+0x70>
    6d48:	0005883a 	mov	r2,zero
    6d4c:	dfc00b17 	ldw	ra,44(sp)
    6d50:	df000a17 	ldw	fp,40(sp)
    6d54:	ddc00917 	ldw	r23,36(sp)
    6d58:	dd800817 	ldw	r22,32(sp)
    6d5c:	dd400717 	ldw	r21,28(sp)
    6d60:	dd000617 	ldw	r20,24(sp)
    6d64:	dcc00517 	ldw	r19,20(sp)
    6d68:	dc800417 	ldw	r18,16(sp)
    6d6c:	dc400317 	ldw	r17,12(sp)
    6d70:	dc000217 	ldw	r16,8(sp)
    6d74:	dec00c04 	addi	sp,sp,48
    6d78:	f800283a 	ret
    6d7c:	800b883a 	mov	r5,r16
    6d80:	a809883a 	mov	r4,r21
    6d84:	00048040 	call	4804 <__swsetup_r>
    6d88:	1000ee1e 	bne	r2,zero,7144 <__sfvwrite_r+0x4b0>
    6d8c:	80c0030b 	ldhu	r3,12(r16)
    6d90:	a4400017 	ldw	r17,0(r20)
    6d94:	1880008c 	andi	r2,r3,2
    6d98:	103fd61e 	bne	r2,zero,6cf4 <__sfvwrite_r+0x60>
    6d9c:	1880004c 	andi	r2,r3,1
    6da0:	1000421e 	bne	r2,zero,6eac <__sfvwrite_r+0x218>
    6da4:	0039883a 	mov	fp,zero
    6da8:	0025883a 	mov	r18,zero
    6dac:	90001a26 	beq	r18,zero,6e18 <__sfvwrite_r+0x184>
    6db0:	1880800c 	andi	r2,r3,512
    6db4:	84c00217 	ldw	r19,8(r16)
    6db8:	10002126 	beq	r2,zero,6e40 <__sfvwrite_r+0x1ac>
    6dbc:	982f883a 	mov	r23,r19
    6dc0:	94c09636 	bltu	r18,r19,701c <__sfvwrite_r+0x388>
    6dc4:	1881200c 	andi	r2,r3,1152
    6dc8:	1000a11e 	bne	r2,zero,7050 <__sfvwrite_r+0x3bc>
    6dcc:	81000017 	ldw	r4,0(r16)
    6dd0:	b80d883a 	mov	r6,r23
    6dd4:	e00b883a 	mov	r5,fp
    6dd8:	0007fb40 	call	7fb4 <memmove>
    6ddc:	80c00217 	ldw	r3,8(r16)
    6de0:	81000017 	ldw	r4,0(r16)
    6de4:	9005883a 	mov	r2,r18
    6de8:	1ce7c83a 	sub	r19,r3,r19
    6dec:	25cf883a 	add	r7,r4,r23
    6df0:	84c00215 	stw	r19,8(r16)
    6df4:	81c00015 	stw	r7,0(r16)
    6df8:	a0c00217 	ldw	r3,8(r20)
    6dfc:	e0b9883a 	add	fp,fp,r2
    6e00:	90a5c83a 	sub	r18,r18,r2
    6e04:	18a7c83a 	sub	r19,r3,r2
    6e08:	a4c00215 	stw	r19,8(r20)
    6e0c:	983fce26 	beq	r19,zero,6d48 <__sfvwrite_r+0xb4>
    6e10:	80c0030b 	ldhu	r3,12(r16)
    6e14:	903fe61e 	bne	r18,zero,6db0 <__sfvwrite_r+0x11c>
    6e18:	8f000017 	ldw	fp,0(r17)
    6e1c:	8c800117 	ldw	r18,4(r17)
    6e20:	8c400204 	addi	r17,r17,8
    6e24:	003fe106 	br	6dac <__sfvwrite_r+0x118>
    6e28:	8cc00017 	ldw	r19,0(r17)
    6e2c:	8c800117 	ldw	r18,4(r17)
    6e30:	8c400204 	addi	r17,r17,8
    6e34:	003fb306 	br	6d04 <__sfvwrite_r+0x70>
    6e38:	0005883a 	mov	r2,zero
    6e3c:	f800283a 	ret
    6e40:	81000017 	ldw	r4,0(r16)
    6e44:	80800417 	ldw	r2,16(r16)
    6e48:	11005a36 	bltu	r2,r4,6fb4 <__sfvwrite_r+0x320>
    6e4c:	85c00517 	ldw	r23,20(r16)
    6e50:	95c05836 	bltu	r18,r23,6fb4 <__sfvwrite_r+0x320>
    6e54:	00a00034 	movhi	r2,32768
    6e58:	10bfffc4 	addi	r2,r2,-1
    6e5c:	9009883a 	mov	r4,r18
    6e60:	1480012e 	bgeu	r2,r18,6e68 <__sfvwrite_r+0x1d4>
    6e64:	1009883a 	mov	r4,r2
    6e68:	b80b883a 	mov	r5,r23
    6e6c:	000c7380 	call	c738 <__divsi3>
    6e70:	b80b883a 	mov	r5,r23
    6e74:	1009883a 	mov	r4,r2
    6e78:	000c8ec0 	call	c8ec <__mulsi3>
    6e7c:	81400717 	ldw	r5,28(r16)
    6e80:	80c00917 	ldw	r3,36(r16)
    6e84:	100f883a 	mov	r7,r2
    6e88:	e00d883a 	mov	r6,fp
    6e8c:	a809883a 	mov	r4,r21
    6e90:	183ee83a 	callr	r3
    6e94:	00bfd816 	blt	zero,r2,6df8 <__sfvwrite_r+0x164>
    6e98:	8080030b 	ldhu	r2,12(r16)
    6e9c:	10801014 	ori	r2,r2,64
    6ea0:	8080030d 	sth	r2,12(r16)
    6ea4:	00bfffc4 	movi	r2,-1
    6ea8:	003fa806 	br	6d4c <__sfvwrite_r+0xb8>
    6eac:	0027883a 	mov	r19,zero
    6eb0:	0011883a 	mov	r8,zero
    6eb4:	0039883a 	mov	fp,zero
    6eb8:	0025883a 	mov	r18,zero
    6ebc:	90001f26 	beq	r18,zero,6f3c <__sfvwrite_r+0x2a8>
    6ec0:	40005a26 	beq	r8,zero,702c <__sfvwrite_r+0x398>
    6ec4:	982d883a 	mov	r22,r19
    6ec8:	94c0012e 	bgeu	r18,r19,6ed0 <__sfvwrite_r+0x23c>
    6ecc:	902d883a 	mov	r22,r18
    6ed0:	81000017 	ldw	r4,0(r16)
    6ed4:	80800417 	ldw	r2,16(r16)
    6ed8:	b02f883a 	mov	r23,r22
    6edc:	81c00517 	ldw	r7,20(r16)
    6ee0:	1100032e 	bgeu	r2,r4,6ef0 <__sfvwrite_r+0x25c>
    6ee4:	80c00217 	ldw	r3,8(r16)
    6ee8:	38c7883a 	add	r3,r7,r3
    6eec:	1d801816 	blt	r3,r22,6f50 <__sfvwrite_r+0x2bc>
    6ef0:	b1c03e16 	blt	r22,r7,6fec <__sfvwrite_r+0x358>
    6ef4:	80800917 	ldw	r2,36(r16)
    6ef8:	81400717 	ldw	r5,28(r16)
    6efc:	e00d883a 	mov	r6,fp
    6f00:	da000115 	stw	r8,4(sp)
    6f04:	a809883a 	mov	r4,r21
    6f08:	103ee83a 	callr	r2
    6f0c:	102f883a 	mov	r23,r2
    6f10:	da000117 	ldw	r8,4(sp)
    6f14:	00bfe00e 	bge	zero,r2,6e98 <__sfvwrite_r+0x204>
    6f18:	9de7c83a 	sub	r19,r19,r23
    6f1c:	98001f26 	beq	r19,zero,6f9c <__sfvwrite_r+0x308>
    6f20:	a0800217 	ldw	r2,8(r20)
    6f24:	e5f9883a 	add	fp,fp,r23
    6f28:	95e5c83a 	sub	r18,r18,r23
    6f2c:	15efc83a 	sub	r23,r2,r23
    6f30:	a5c00215 	stw	r23,8(r20)
    6f34:	b83f8426 	beq	r23,zero,6d48 <__sfvwrite_r+0xb4>
    6f38:	903fe11e 	bne	r18,zero,6ec0 <__sfvwrite_r+0x22c>
    6f3c:	8f000017 	ldw	fp,0(r17)
    6f40:	8c800117 	ldw	r18,4(r17)
    6f44:	0011883a 	mov	r8,zero
    6f48:	8c400204 	addi	r17,r17,8
    6f4c:	003fdb06 	br	6ebc <__sfvwrite_r+0x228>
    6f50:	180d883a 	mov	r6,r3
    6f54:	e00b883a 	mov	r5,fp
    6f58:	da000115 	stw	r8,4(sp)
    6f5c:	d8c00015 	stw	r3,0(sp)
    6f60:	0007fb40 	call	7fb4 <memmove>
    6f64:	d8c00017 	ldw	r3,0(sp)
    6f68:	80800017 	ldw	r2,0(r16)
    6f6c:	800b883a 	mov	r5,r16
    6f70:	a809883a 	mov	r4,r21
    6f74:	10c5883a 	add	r2,r2,r3
    6f78:	80800015 	stw	r2,0(r16)
    6f7c:	d8c00015 	stw	r3,0(sp)
    6f80:	00064240 	call	6424 <_fflush_r>
    6f84:	d8c00017 	ldw	r3,0(sp)
    6f88:	da000117 	ldw	r8,4(sp)
    6f8c:	103fc21e 	bne	r2,zero,6e98 <__sfvwrite_r+0x204>
    6f90:	182f883a 	mov	r23,r3
    6f94:	9de7c83a 	sub	r19,r19,r23
    6f98:	983fe11e 	bne	r19,zero,6f20 <__sfvwrite_r+0x28c>
    6f9c:	800b883a 	mov	r5,r16
    6fa0:	a809883a 	mov	r4,r21
    6fa4:	00064240 	call	6424 <_fflush_r>
    6fa8:	103fbb1e 	bne	r2,zero,6e98 <__sfvwrite_r+0x204>
    6fac:	0011883a 	mov	r8,zero
    6fb0:	003fdb06 	br	6f20 <__sfvwrite_r+0x28c>
    6fb4:	94c0012e 	bgeu	r18,r19,6fbc <__sfvwrite_r+0x328>
    6fb8:	9027883a 	mov	r19,r18
    6fbc:	980d883a 	mov	r6,r19
    6fc0:	e00b883a 	mov	r5,fp
    6fc4:	0007fb40 	call	7fb4 <memmove>
    6fc8:	80800217 	ldw	r2,8(r16)
    6fcc:	80c00017 	ldw	r3,0(r16)
    6fd0:	14c5c83a 	sub	r2,r2,r19
    6fd4:	1cc7883a 	add	r3,r3,r19
    6fd8:	80800215 	stw	r2,8(r16)
    6fdc:	80c00015 	stw	r3,0(r16)
    6fe0:	10004326 	beq	r2,zero,70f0 <__sfvwrite_r+0x45c>
    6fe4:	9805883a 	mov	r2,r19
    6fe8:	003f8306 	br	6df8 <__sfvwrite_r+0x164>
    6fec:	b00d883a 	mov	r6,r22
    6ff0:	e00b883a 	mov	r5,fp
    6ff4:	da000115 	stw	r8,4(sp)
    6ff8:	0007fb40 	call	7fb4 <memmove>
    6ffc:	80800217 	ldw	r2,8(r16)
    7000:	80c00017 	ldw	r3,0(r16)
    7004:	da000117 	ldw	r8,4(sp)
    7008:	1585c83a 	sub	r2,r2,r22
    700c:	1dad883a 	add	r22,r3,r22
    7010:	80800215 	stw	r2,8(r16)
    7014:	85800015 	stw	r22,0(r16)
    7018:	003fbf06 	br	6f18 <__sfvwrite_r+0x284>
    701c:	81000017 	ldw	r4,0(r16)
    7020:	9027883a 	mov	r19,r18
    7024:	902f883a 	mov	r23,r18
    7028:	003f6906 	br	6dd0 <__sfvwrite_r+0x13c>
    702c:	900d883a 	mov	r6,r18
    7030:	01400284 	movi	r5,10
    7034:	e009883a 	mov	r4,fp
    7038:	0007d880 	call	7d88 <memchr>
    703c:	10003e26 	beq	r2,zero,7138 <__sfvwrite_r+0x4a4>
    7040:	10800044 	addi	r2,r2,1
    7044:	1727c83a 	sub	r19,r2,fp
    7048:	02000044 	movi	r8,1
    704c:	003f9d06 	br	6ec4 <__sfvwrite_r+0x230>
    7050:	80800517 	ldw	r2,20(r16)
    7054:	81400417 	ldw	r5,16(r16)
    7058:	81c00017 	ldw	r7,0(r16)
    705c:	10a7883a 	add	r19,r2,r2
    7060:	9885883a 	add	r2,r19,r2
    7064:	1026d7fa 	srli	r19,r2,31
    7068:	396dc83a 	sub	r22,r7,r5
    706c:	b1000044 	addi	r4,r22,1
    7070:	9885883a 	add	r2,r19,r2
    7074:	1027d07a 	srai	r19,r2,1
    7078:	2485883a 	add	r2,r4,r18
    707c:	980d883a 	mov	r6,r19
    7080:	9880022e 	bgeu	r19,r2,708c <__sfvwrite_r+0x3f8>
    7084:	1027883a 	mov	r19,r2
    7088:	100d883a 	mov	r6,r2
    708c:	18c1000c 	andi	r3,r3,1024
    7090:	18001c26 	beq	r3,zero,7104 <__sfvwrite_r+0x470>
    7094:	300b883a 	mov	r5,r6
    7098:	a809883a 	mov	r4,r21
    709c:	000757c0 	call	757c <_malloc_r>
    70a0:	102f883a 	mov	r23,r2
    70a4:	10002926 	beq	r2,zero,714c <__sfvwrite_r+0x4b8>
    70a8:	81400417 	ldw	r5,16(r16)
    70ac:	b00d883a 	mov	r6,r22
    70b0:	1009883a 	mov	r4,r2
    70b4:	0007e6c0 	call	7e6c <memcpy>
    70b8:	8080030b 	ldhu	r2,12(r16)
    70bc:	00fedfc4 	movi	r3,-1153
    70c0:	10c4703a 	and	r2,r2,r3
    70c4:	10802014 	ori	r2,r2,128
    70c8:	8080030d 	sth	r2,12(r16)
    70cc:	bd89883a 	add	r4,r23,r22
    70d0:	9d8fc83a 	sub	r7,r19,r22
    70d4:	85c00415 	stw	r23,16(r16)
    70d8:	84c00515 	stw	r19,20(r16)
    70dc:	81000015 	stw	r4,0(r16)
    70e0:	9027883a 	mov	r19,r18
    70e4:	81c00215 	stw	r7,8(r16)
    70e8:	902f883a 	mov	r23,r18
    70ec:	003f3806 	br	6dd0 <__sfvwrite_r+0x13c>
    70f0:	800b883a 	mov	r5,r16
    70f4:	a809883a 	mov	r4,r21
    70f8:	00064240 	call	6424 <_fflush_r>
    70fc:	103fb926 	beq	r2,zero,6fe4 <__sfvwrite_r+0x350>
    7100:	003f6506 	br	6e98 <__sfvwrite_r+0x204>
    7104:	a809883a 	mov	r4,r21
    7108:	00092f00 	call	92f0 <_realloc_r>
    710c:	102f883a 	mov	r23,r2
    7110:	103fee1e 	bne	r2,zero,70cc <__sfvwrite_r+0x438>
    7114:	81400417 	ldw	r5,16(r16)
    7118:	a809883a 	mov	r4,r21
    711c:	00069840 	call	6984 <_free_r>
    7120:	8080030b 	ldhu	r2,12(r16)
    7124:	00ffdfc4 	movi	r3,-129
    7128:	1884703a 	and	r2,r3,r2
    712c:	00c00304 	movi	r3,12
    7130:	a8c00015 	stw	r3,0(r21)
    7134:	003f5906 	br	6e9c <__sfvwrite_r+0x208>
    7138:	94c00044 	addi	r19,r18,1
    713c:	02000044 	movi	r8,1
    7140:	003f6006 	br	6ec4 <__sfvwrite_r+0x230>
    7144:	00bfffc4 	movi	r2,-1
    7148:	003f0006 	br	6d4c <__sfvwrite_r+0xb8>
    714c:	00800304 	movi	r2,12
    7150:	a8800015 	stw	r2,0(r21)
    7154:	8080030b 	ldhu	r2,12(r16)
    7158:	003f5006 	br	6e9c <__sfvwrite_r+0x208>

0000715c <_fwalk>:
    715c:	defff704 	addi	sp,sp,-36
    7160:	dd000415 	stw	r20,16(sp)
    7164:	dfc00815 	stw	ra,32(sp)
    7168:	ddc00715 	stw	r23,28(sp)
    716c:	dd800615 	stw	r22,24(sp)
    7170:	dd400515 	stw	r21,20(sp)
    7174:	dcc00315 	stw	r19,12(sp)
    7178:	dc800215 	stw	r18,8(sp)
    717c:	dc400115 	stw	r17,4(sp)
    7180:	dc000015 	stw	r16,0(sp)
    7184:	2500b804 	addi	r20,r4,736
    7188:	a0002326 	beq	r20,zero,7218 <_fwalk+0xbc>
    718c:	282b883a 	mov	r21,r5
    7190:	002f883a 	mov	r23,zero
    7194:	05800044 	movi	r22,1
    7198:	04ffffc4 	movi	r19,-1
    719c:	a4400117 	ldw	r17,4(r20)
    71a0:	a4800217 	ldw	r18,8(r20)
    71a4:	8c7fffc4 	addi	r17,r17,-1
    71a8:	88000d16 	blt	r17,zero,71e0 <_fwalk+0x84>
    71ac:	94000304 	addi	r16,r18,12
    71b0:	94800384 	addi	r18,r18,14
    71b4:	8080000b 	ldhu	r2,0(r16)
    71b8:	8c7fffc4 	addi	r17,r17,-1
    71bc:	813ffd04 	addi	r4,r16,-12
    71c0:	b080042e 	bgeu	r22,r2,71d4 <_fwalk+0x78>
    71c4:	9080000f 	ldh	r2,0(r18)
    71c8:	14c00226 	beq	r2,r19,71d4 <_fwalk+0x78>
    71cc:	a83ee83a 	callr	r21
    71d0:	b8aeb03a 	or	r23,r23,r2
    71d4:	84001a04 	addi	r16,r16,104
    71d8:	94801a04 	addi	r18,r18,104
    71dc:	8cfff51e 	bne	r17,r19,71b4 <_fwalk+0x58>
    71e0:	a5000017 	ldw	r20,0(r20)
    71e4:	a03fed1e 	bne	r20,zero,719c <_fwalk+0x40>
    71e8:	b805883a 	mov	r2,r23
    71ec:	dfc00817 	ldw	ra,32(sp)
    71f0:	ddc00717 	ldw	r23,28(sp)
    71f4:	dd800617 	ldw	r22,24(sp)
    71f8:	dd400517 	ldw	r21,20(sp)
    71fc:	dd000417 	ldw	r20,16(sp)
    7200:	dcc00317 	ldw	r19,12(sp)
    7204:	dc800217 	ldw	r18,8(sp)
    7208:	dc400117 	ldw	r17,4(sp)
    720c:	dc000017 	ldw	r16,0(sp)
    7210:	dec00904 	addi	sp,sp,36
    7214:	f800283a 	ret
    7218:	002f883a 	mov	r23,zero
    721c:	003ff206 	br	71e8 <_fwalk+0x8c>

00007220 <_fwalk_reent>:
    7220:	defff704 	addi	sp,sp,-36
    7224:	dd000415 	stw	r20,16(sp)
    7228:	dfc00815 	stw	ra,32(sp)
    722c:	ddc00715 	stw	r23,28(sp)
    7230:	dd800615 	stw	r22,24(sp)
    7234:	dd400515 	stw	r21,20(sp)
    7238:	dcc00315 	stw	r19,12(sp)
    723c:	dc800215 	stw	r18,8(sp)
    7240:	dc400115 	stw	r17,4(sp)
    7244:	dc000015 	stw	r16,0(sp)
    7248:	2500b804 	addi	r20,r4,736
    724c:	a0002326 	beq	r20,zero,72dc <_fwalk_reent+0xbc>
    7250:	282b883a 	mov	r21,r5
    7254:	2027883a 	mov	r19,r4
    7258:	002f883a 	mov	r23,zero
    725c:	05800044 	movi	r22,1
    7260:	04bfffc4 	movi	r18,-1
    7264:	a4400117 	ldw	r17,4(r20)
    7268:	a4000217 	ldw	r16,8(r20)
    726c:	8c7fffc4 	addi	r17,r17,-1
    7270:	88000c16 	blt	r17,zero,72a4 <_fwalk_reent+0x84>
    7274:	84000304 	addi	r16,r16,12
    7278:	8080000b 	ldhu	r2,0(r16)
    727c:	8c7fffc4 	addi	r17,r17,-1
    7280:	817ffd04 	addi	r5,r16,-12
    7284:	b080052e 	bgeu	r22,r2,729c <_fwalk_reent+0x7c>
    7288:	8080008f 	ldh	r2,2(r16)
    728c:	9809883a 	mov	r4,r19
    7290:	14800226 	beq	r2,r18,729c <_fwalk_reent+0x7c>
    7294:	a83ee83a 	callr	r21
    7298:	b8aeb03a 	or	r23,r23,r2
    729c:	84001a04 	addi	r16,r16,104
    72a0:	8cbff51e 	bne	r17,r18,7278 <_fwalk_reent+0x58>
    72a4:	a5000017 	ldw	r20,0(r20)
    72a8:	a03fee1e 	bne	r20,zero,7264 <_fwalk_reent+0x44>
    72ac:	b805883a 	mov	r2,r23
    72b0:	dfc00817 	ldw	ra,32(sp)
    72b4:	ddc00717 	ldw	r23,28(sp)
    72b8:	dd800617 	ldw	r22,24(sp)
    72bc:	dd400517 	ldw	r21,20(sp)
    72c0:	dd000417 	ldw	r20,16(sp)
    72c4:	dcc00317 	ldw	r19,12(sp)
    72c8:	dc800217 	ldw	r18,8(sp)
    72cc:	dc400117 	ldw	r17,4(sp)
    72d0:	dc000017 	ldw	r16,0(sp)
    72d4:	dec00904 	addi	sp,sp,36
    72d8:	f800283a 	ret
    72dc:	002f883a 	mov	r23,zero
    72e0:	003ff206 	br	72ac <_fwalk_reent+0x8c>

000072e4 <_setlocale_r>:
    72e4:	30001b26 	beq	r6,zero,7354 <_setlocale_r+0x70>
    72e8:	01400074 	movhi	r5,1
    72ec:	defffe04 	addi	sp,sp,-8
    72f0:	29487704 	addi	r5,r5,8668
    72f4:	3009883a 	mov	r4,r6
    72f8:	dc000015 	stw	r16,0(sp)
    72fc:	dfc00115 	stw	ra,4(sp)
    7300:	3021883a 	mov	r16,r6
    7304:	0009a580 	call	9a58 <strcmp>
    7308:	1000061e 	bne	r2,zero,7324 <_setlocale_r+0x40>
    730c:	00800074 	movhi	r2,1
    7310:	10887604 	addi	r2,r2,8664
    7314:	dfc00117 	ldw	ra,4(sp)
    7318:	dc000017 	ldw	r16,0(sp)
    731c:	dec00204 	addi	sp,sp,8
    7320:	f800283a 	ret
    7324:	01400074 	movhi	r5,1
    7328:	29487604 	addi	r5,r5,8664
    732c:	8009883a 	mov	r4,r16
    7330:	0009a580 	call	9a58 <strcmp>
    7334:	103ff526 	beq	r2,zero,730c <_setlocale_r+0x28>
    7338:	01400074 	movhi	r5,1
    733c:	29486104 	addi	r5,r5,8580
    7340:	8009883a 	mov	r4,r16
    7344:	0009a580 	call	9a58 <strcmp>
    7348:	103ff026 	beq	r2,zero,730c <_setlocale_r+0x28>
    734c:	0005883a 	mov	r2,zero
    7350:	003ff006 	br	7314 <_setlocale_r+0x30>
    7354:	00800074 	movhi	r2,1
    7358:	10887604 	addi	r2,r2,8664
    735c:	f800283a 	ret

00007360 <__locale_charset>:
    7360:	00800074 	movhi	r2,1
    7364:	108a2904 	addi	r2,r2,10404
    7368:	f800283a 	ret

0000736c <__locale_mb_cur_max>:
    736c:	00800074 	movhi	r2,1
    7370:	108fc504 	addi	r2,r2,16148
    7374:	10800017 	ldw	r2,0(r2)
    7378:	f800283a 	ret

0000737c <__locale_msgcharset>:
    737c:	00800074 	movhi	r2,1
    7380:	108a2104 	addi	r2,r2,10372
    7384:	f800283a 	ret

00007388 <__locale_cjk_lang>:
    7388:	0005883a 	mov	r2,zero
    738c:	f800283a 	ret

00007390 <_localeconv_r>:
    7390:	00800074 	movhi	r2,1
    7394:	108a3104 	addi	r2,r2,10436
    7398:	f800283a 	ret

0000739c <setlocale>:
    739c:	00800074 	movhi	r2,1
    73a0:	108fc404 	addi	r2,r2,16144
    73a4:	280d883a 	mov	r6,r5
    73a8:	200b883a 	mov	r5,r4
    73ac:	11000017 	ldw	r4,0(r2)
    73b0:	00072e41 	jmpi	72e4 <_setlocale_r>

000073b4 <localeconv>:
    73b4:	00800074 	movhi	r2,1
    73b8:	108a3104 	addi	r2,r2,10436
    73bc:	f800283a 	ret

000073c0 <__smakebuf_r>:
    73c0:	2880030b 	ldhu	r2,12(r5)
    73c4:	10c0008c 	andi	r3,r2,2
    73c8:	1800411e 	bne	r3,zero,74d0 <__smakebuf_r+0x110>
    73cc:	deffec04 	addi	sp,sp,-80
    73d0:	dc000f15 	stw	r16,60(sp)
    73d4:	2821883a 	mov	r16,r5
    73d8:	2940038f 	ldh	r5,14(r5)
    73dc:	dc401015 	stw	r17,64(sp)
    73e0:	dfc01315 	stw	ra,76(sp)
    73e4:	dcc01215 	stw	r19,72(sp)
    73e8:	dc801115 	stw	r18,68(sp)
    73ec:	2023883a 	mov	r17,r4
    73f0:	28001c16 	blt	r5,zero,7464 <__smakebuf_r+0xa4>
    73f4:	d80d883a 	mov	r6,sp
    73f8:	000b6c80 	call	b6c8 <_fstat_r>
    73fc:	10001816 	blt	r2,zero,7460 <__smakebuf_r+0xa0>
    7400:	d8800117 	ldw	r2,4(sp)
    7404:	00e00014 	movui	r3,32768
    7408:	10bc000c 	andi	r2,r2,61440
    740c:	14c80020 	cmpeqi	r19,r2,8192
    7410:	10c03726 	beq	r2,r3,74f0 <__smakebuf_r+0x130>
    7414:	80c0030b 	ldhu	r3,12(r16)
    7418:	18c20014 	ori	r3,r3,2048
    741c:	80c0030d 	sth	r3,12(r16)
    7420:	00c80004 	movi	r3,8192
    7424:	10c0521e 	bne	r2,r3,7570 <__smakebuf_r+0x1b0>
    7428:	8140038f 	ldh	r5,14(r16)
    742c:	8809883a 	mov	r4,r17
    7430:	000b7240 	call	b724 <_isatty_r>
    7434:	10004c26 	beq	r2,zero,7568 <__smakebuf_r+0x1a8>
    7438:	8080030b 	ldhu	r2,12(r16)
    743c:	80c010c4 	addi	r3,r16,67
    7440:	80c00015 	stw	r3,0(r16)
    7444:	10800054 	ori	r2,r2,1
    7448:	8080030d 	sth	r2,12(r16)
    744c:	00800044 	movi	r2,1
    7450:	80c00415 	stw	r3,16(r16)
    7454:	80800515 	stw	r2,20(r16)
    7458:	04810004 	movi	r18,1024
    745c:	00000706 	br	747c <__smakebuf_r+0xbc>
    7460:	8080030b 	ldhu	r2,12(r16)
    7464:	10c0200c 	andi	r3,r2,128
    7468:	18001f1e 	bne	r3,zero,74e8 <__smakebuf_r+0x128>
    746c:	04810004 	movi	r18,1024
    7470:	10820014 	ori	r2,r2,2048
    7474:	8080030d 	sth	r2,12(r16)
    7478:	0027883a 	mov	r19,zero
    747c:	900b883a 	mov	r5,r18
    7480:	8809883a 	mov	r4,r17
    7484:	000757c0 	call	757c <_malloc_r>
    7488:	10002c26 	beq	r2,zero,753c <__smakebuf_r+0x17c>
    748c:	80c0030b 	ldhu	r3,12(r16)
    7490:	01000034 	movhi	r4,0
    7494:	21192e04 	addi	r4,r4,25784
    7498:	89000f15 	stw	r4,60(r17)
    749c:	18c02014 	ori	r3,r3,128
    74a0:	80c0030d 	sth	r3,12(r16)
    74a4:	80800015 	stw	r2,0(r16)
    74a8:	80800415 	stw	r2,16(r16)
    74ac:	84800515 	stw	r18,20(r16)
    74b0:	98001a1e 	bne	r19,zero,751c <__smakebuf_r+0x15c>
    74b4:	dfc01317 	ldw	ra,76(sp)
    74b8:	dcc01217 	ldw	r19,72(sp)
    74bc:	dc801117 	ldw	r18,68(sp)
    74c0:	dc401017 	ldw	r17,64(sp)
    74c4:	dc000f17 	ldw	r16,60(sp)
    74c8:	dec01404 	addi	sp,sp,80
    74cc:	f800283a 	ret
    74d0:	288010c4 	addi	r2,r5,67
    74d4:	28800015 	stw	r2,0(r5)
    74d8:	28800415 	stw	r2,16(r5)
    74dc:	00800044 	movi	r2,1
    74e0:	28800515 	stw	r2,20(r5)
    74e4:	f800283a 	ret
    74e8:	04801004 	movi	r18,64
    74ec:	003fe006 	br	7470 <__smakebuf_r+0xb0>
    74f0:	81000a17 	ldw	r4,40(r16)
    74f4:	00c00074 	movhi	r3,1
    74f8:	18e67d04 	addi	r3,r3,-26124
    74fc:	20ffc51e 	bne	r4,r3,7414 <__smakebuf_r+0x54>
    7500:	8080030b 	ldhu	r2,12(r16)
    7504:	04810004 	movi	r18,1024
    7508:	84801315 	stw	r18,76(r16)
    750c:	1484b03a 	or	r2,r2,r18
    7510:	8080030d 	sth	r2,12(r16)
    7514:	0027883a 	mov	r19,zero
    7518:	003fd806 	br	747c <__smakebuf_r+0xbc>
    751c:	8140038f 	ldh	r5,14(r16)
    7520:	8809883a 	mov	r4,r17
    7524:	000b7240 	call	b724 <_isatty_r>
    7528:	103fe226 	beq	r2,zero,74b4 <__smakebuf_r+0xf4>
    752c:	8080030b 	ldhu	r2,12(r16)
    7530:	10800054 	ori	r2,r2,1
    7534:	8080030d 	sth	r2,12(r16)
    7538:	003fde06 	br	74b4 <__smakebuf_r+0xf4>
    753c:	8080030b 	ldhu	r2,12(r16)
    7540:	10c0800c 	andi	r3,r2,512
    7544:	183fdb1e 	bne	r3,zero,74b4 <__smakebuf_r+0xf4>
    7548:	10800094 	ori	r2,r2,2
    754c:	80c010c4 	addi	r3,r16,67
    7550:	8080030d 	sth	r2,12(r16)
    7554:	00800044 	movi	r2,1
    7558:	80c00015 	stw	r3,0(r16)
    755c:	80c00415 	stw	r3,16(r16)
    7560:	80800515 	stw	r2,20(r16)
    7564:	003fd306 	br	74b4 <__smakebuf_r+0xf4>
    7568:	04810004 	movi	r18,1024
    756c:	003fc306 	br	747c <__smakebuf_r+0xbc>
    7570:	0027883a 	mov	r19,zero
    7574:	04810004 	movi	r18,1024
    7578:	003fc006 	br	747c <__smakebuf_r+0xbc>

0000757c <_malloc_r>:
    757c:	defff504 	addi	sp,sp,-44
    7580:	dc800315 	stw	r18,12(sp)
    7584:	dfc00a15 	stw	ra,40(sp)
    7588:	df000915 	stw	fp,36(sp)
    758c:	ddc00815 	stw	r23,32(sp)
    7590:	dd800715 	stw	r22,28(sp)
    7594:	dd400615 	stw	r21,24(sp)
    7598:	dd000515 	stw	r20,20(sp)
    759c:	dcc00415 	stw	r19,16(sp)
    75a0:	dc400215 	stw	r17,8(sp)
    75a4:	dc000115 	stw	r16,4(sp)
    75a8:	288002c4 	addi	r2,r5,11
    75ac:	00c00584 	movi	r3,22
    75b0:	2025883a 	mov	r18,r4
    75b4:	18807f2e 	bgeu	r3,r2,77b4 <_malloc_r+0x238>
    75b8:	047ffe04 	movi	r17,-8
    75bc:	1462703a 	and	r17,r2,r17
    75c0:	8800a316 	blt	r17,zero,7850 <_malloc_r+0x2d4>
    75c4:	8940a236 	bltu	r17,r5,7850 <_malloc_r+0x2d4>
    75c8:	000f7540 	call	f754 <__malloc_lock>
    75cc:	00807dc4 	movi	r2,503
    75d0:	1441e92e 	bgeu	r2,r17,7d78 <_malloc_r+0x7fc>
    75d4:	8804d27a 	srli	r2,r17,9
    75d8:	1000a126 	beq	r2,zero,7860 <_malloc_r+0x2e4>
    75dc:	00c00104 	movi	r3,4
    75e0:	18811e36 	bltu	r3,r2,7a5c <_malloc_r+0x4e0>
    75e4:	8804d1ba 	srli	r2,r17,6
    75e8:	12000e44 	addi	r8,r2,57
    75ec:	11c00e04 	addi	r7,r2,56
    75f0:	4209883a 	add	r4,r8,r8
    75f4:	04c00074 	movhi	r19,1
    75f8:	2109883a 	add	r4,r4,r4
    75fc:	9cca3f04 	addi	r19,r19,10492
    7600:	2109883a 	add	r4,r4,r4
    7604:	9909883a 	add	r4,r19,r4
    7608:	24000117 	ldw	r16,4(r4)
    760c:	213ffe04 	addi	r4,r4,-8
    7610:	24009726 	beq	r4,r16,7870 <_malloc_r+0x2f4>
    7614:	80800117 	ldw	r2,4(r16)
    7618:	01bfff04 	movi	r6,-4
    761c:	014003c4 	movi	r5,15
    7620:	1184703a 	and	r2,r2,r6
    7624:	1447c83a 	sub	r3,r2,r17
    7628:	28c00716 	blt	r5,r3,7648 <_malloc_r+0xcc>
    762c:	1800920e 	bge	r3,zero,7878 <_malloc_r+0x2fc>
    7630:	84000317 	ldw	r16,12(r16)
    7634:	24008e26 	beq	r4,r16,7870 <_malloc_r+0x2f4>
    7638:	80800117 	ldw	r2,4(r16)
    763c:	1184703a 	and	r2,r2,r6
    7640:	1447c83a 	sub	r3,r2,r17
    7644:	28fff90e 	bge	r5,r3,762c <_malloc_r+0xb0>
    7648:	3809883a 	mov	r4,r7
    764c:	01800074 	movhi	r6,1
    7650:	9c000417 	ldw	r16,16(r19)
    7654:	318a3f04 	addi	r6,r6,10492
    7658:	32000204 	addi	r8,r6,8
    765c:	82013426 	beq	r16,r8,7b30 <_malloc_r+0x5b4>
    7660:	80c00117 	ldw	r3,4(r16)
    7664:	00bfff04 	movi	r2,-4
    7668:	188e703a 	and	r7,r3,r2
    766c:	3c45c83a 	sub	r2,r7,r17
    7670:	00c003c4 	movi	r3,15
    7674:	18811f16 	blt	r3,r2,7af4 <_malloc_r+0x578>
    7678:	32000515 	stw	r8,20(r6)
    767c:	32000415 	stw	r8,16(r6)
    7680:	10007f0e 	bge	r2,zero,7880 <_malloc_r+0x304>
    7684:	00807fc4 	movi	r2,511
    7688:	11c0fd36 	bltu	r2,r7,7a80 <_malloc_r+0x504>
    768c:	3806d0fa 	srli	r3,r7,3
    7690:	01c00044 	movi	r7,1
    7694:	30800117 	ldw	r2,4(r6)
    7698:	19400044 	addi	r5,r3,1
    769c:	294b883a 	add	r5,r5,r5
    76a0:	1807d0ba 	srai	r3,r3,2
    76a4:	294b883a 	add	r5,r5,r5
    76a8:	294b883a 	add	r5,r5,r5
    76ac:	298b883a 	add	r5,r5,r6
    76b0:	38c6983a 	sll	r3,r7,r3
    76b4:	29c00017 	ldw	r7,0(r5)
    76b8:	2a7ffe04 	addi	r9,r5,-8
    76bc:	1886b03a 	or	r3,r3,r2
    76c0:	82400315 	stw	r9,12(r16)
    76c4:	81c00215 	stw	r7,8(r16)
    76c8:	30c00115 	stw	r3,4(r6)
    76cc:	2c000015 	stw	r16,0(r5)
    76d0:	3c000315 	stw	r16,12(r7)
    76d4:	2005d0ba 	srai	r2,r4,2
    76d8:	01400044 	movi	r5,1
    76dc:	288a983a 	sll	r5,r5,r2
    76e0:	19406f36 	bltu	r3,r5,78a0 <_malloc_r+0x324>
    76e4:	28c4703a 	and	r2,r5,r3
    76e8:	10000a1e 	bne	r2,zero,7714 <_malloc_r+0x198>
    76ec:	00bfff04 	movi	r2,-4
    76f0:	294b883a 	add	r5,r5,r5
    76f4:	2088703a 	and	r4,r4,r2
    76f8:	28c4703a 	and	r2,r5,r3
    76fc:	21000104 	addi	r4,r4,4
    7700:	1000041e 	bne	r2,zero,7714 <_malloc_r+0x198>
    7704:	294b883a 	add	r5,r5,r5
    7708:	28c4703a 	and	r2,r5,r3
    770c:	21000104 	addi	r4,r4,4
    7710:	103ffc26 	beq	r2,zero,7704 <_malloc_r+0x188>
    7714:	02bfff04 	movi	r10,-4
    7718:	024003c4 	movi	r9,15
    771c:	21800044 	addi	r6,r4,1
    7720:	318d883a 	add	r6,r6,r6
    7724:	318d883a 	add	r6,r6,r6
    7728:	318d883a 	add	r6,r6,r6
    772c:	998d883a 	add	r6,r19,r6
    7730:	333ffe04 	addi	r12,r6,-8
    7734:	2017883a 	mov	r11,r4
    7738:	31800104 	addi	r6,r6,4
    773c:	34000017 	ldw	r16,0(r6)
    7740:	31fffd04 	addi	r7,r6,-12
    7744:	81c0041e 	bne	r16,r7,7758 <_malloc_r+0x1dc>
    7748:	0000fb06 	br	7b38 <_malloc_r+0x5bc>
    774c:	1801030e 	bge	r3,zero,7b5c <_malloc_r+0x5e0>
    7750:	84000317 	ldw	r16,12(r16)
    7754:	81c0f826 	beq	r16,r7,7b38 <_malloc_r+0x5bc>
    7758:	80800117 	ldw	r2,4(r16)
    775c:	1284703a 	and	r2,r2,r10
    7760:	1447c83a 	sub	r3,r2,r17
    7764:	48fff90e 	bge	r9,r3,774c <_malloc_r+0x1d0>
    7768:	80800317 	ldw	r2,12(r16)
    776c:	81000217 	ldw	r4,8(r16)
    7770:	89400054 	ori	r5,r17,1
    7774:	81400115 	stw	r5,4(r16)
    7778:	20800315 	stw	r2,12(r4)
    777c:	11000215 	stw	r4,8(r2)
    7780:	8463883a 	add	r17,r16,r17
    7784:	9c400515 	stw	r17,20(r19)
    7788:	9c400415 	stw	r17,16(r19)
    778c:	18800054 	ori	r2,r3,1
    7790:	88800115 	stw	r2,4(r17)
    7794:	8a000315 	stw	r8,12(r17)
    7798:	8a000215 	stw	r8,8(r17)
    779c:	88e3883a 	add	r17,r17,r3
    77a0:	88c00015 	stw	r3,0(r17)
    77a4:	9009883a 	mov	r4,r18
    77a8:	000f7780 	call	f778 <__malloc_unlock>
    77ac:	80800204 	addi	r2,r16,8
    77b0:	00001b06 	br	7820 <_malloc_r+0x2a4>
    77b4:	04400404 	movi	r17,16
    77b8:	89402536 	bltu	r17,r5,7850 <_malloc_r+0x2d4>
    77bc:	000f7540 	call	f754 <__malloc_lock>
    77c0:	00800184 	movi	r2,6
    77c4:	01000084 	movi	r4,2
    77c8:	04c00074 	movhi	r19,1
    77cc:	1085883a 	add	r2,r2,r2
    77d0:	9cca3f04 	addi	r19,r19,10492
    77d4:	1085883a 	add	r2,r2,r2
    77d8:	9885883a 	add	r2,r19,r2
    77dc:	14000117 	ldw	r16,4(r2)
    77e0:	10fffe04 	addi	r3,r2,-8
    77e4:	80c0d926 	beq	r16,r3,7b4c <_malloc_r+0x5d0>
    77e8:	80c00117 	ldw	r3,4(r16)
    77ec:	81000317 	ldw	r4,12(r16)
    77f0:	00bfff04 	movi	r2,-4
    77f4:	1884703a 	and	r2,r3,r2
    77f8:	81400217 	ldw	r5,8(r16)
    77fc:	8085883a 	add	r2,r16,r2
    7800:	10c00117 	ldw	r3,4(r2)
    7804:	29000315 	stw	r4,12(r5)
    7808:	21400215 	stw	r5,8(r4)
    780c:	18c00054 	ori	r3,r3,1
    7810:	10c00115 	stw	r3,4(r2)
    7814:	9009883a 	mov	r4,r18
    7818:	000f7780 	call	f778 <__malloc_unlock>
    781c:	80800204 	addi	r2,r16,8
    7820:	dfc00a17 	ldw	ra,40(sp)
    7824:	df000917 	ldw	fp,36(sp)
    7828:	ddc00817 	ldw	r23,32(sp)
    782c:	dd800717 	ldw	r22,28(sp)
    7830:	dd400617 	ldw	r21,24(sp)
    7834:	dd000517 	ldw	r20,20(sp)
    7838:	dcc00417 	ldw	r19,16(sp)
    783c:	dc800317 	ldw	r18,12(sp)
    7840:	dc400217 	ldw	r17,8(sp)
    7844:	dc000117 	ldw	r16,4(sp)
    7848:	dec00b04 	addi	sp,sp,44
    784c:	f800283a 	ret
    7850:	00800304 	movi	r2,12
    7854:	90800015 	stw	r2,0(r18)
    7858:	0005883a 	mov	r2,zero
    785c:	003ff006 	br	7820 <_malloc_r+0x2a4>
    7860:	01002004 	movi	r4,128
    7864:	02001004 	movi	r8,64
    7868:	01c00fc4 	movi	r7,63
    786c:	003f6106 	br	75f4 <_malloc_r+0x78>
    7870:	4009883a 	mov	r4,r8
    7874:	003f7506 	br	764c <_malloc_r+0xd0>
    7878:	81000317 	ldw	r4,12(r16)
    787c:	003fde06 	br	77f8 <_malloc_r+0x27c>
    7880:	81c5883a 	add	r2,r16,r7
    7884:	11400117 	ldw	r5,4(r2)
    7888:	9009883a 	mov	r4,r18
    788c:	29400054 	ori	r5,r5,1
    7890:	11400115 	stw	r5,4(r2)
    7894:	000f7780 	call	f778 <__malloc_unlock>
    7898:	80800204 	addi	r2,r16,8
    789c:	003fe006 	br	7820 <_malloc_r+0x2a4>
    78a0:	9c000217 	ldw	r16,8(r19)
    78a4:	00bfff04 	movi	r2,-4
    78a8:	85800117 	ldw	r22,4(r16)
    78ac:	b0ac703a 	and	r22,r22,r2
    78b0:	b4400336 	bltu	r22,r17,78c0 <_malloc_r+0x344>
    78b4:	b445c83a 	sub	r2,r22,r17
    78b8:	00c003c4 	movi	r3,15
    78bc:	18805d16 	blt	r3,r2,7a34 <_malloc_r+0x4b8>
    78c0:	05c00074 	movhi	r23,1
    78c4:	00800074 	movhi	r2,1
    78c8:	10969404 	addi	r2,r2,23120
    78cc:	bdcfc604 	addi	r23,r23,16152
    78d0:	15400017 	ldw	r21,0(r2)
    78d4:	b8c00017 	ldw	r3,0(r23)
    78d8:	00bfffc4 	movi	r2,-1
    78dc:	858d883a 	add	r6,r16,r22
    78e0:	8d6b883a 	add	r21,r17,r21
    78e4:	1880ea26 	beq	r3,r2,7c90 <_malloc_r+0x714>
    78e8:	ad4403c4 	addi	r21,r21,4111
    78ec:	00bc0004 	movi	r2,-4096
    78f0:	a8aa703a 	and	r21,r21,r2
    78f4:	a80b883a 	mov	r5,r21
    78f8:	9009883a 	mov	r4,r18
    78fc:	d9800015 	stw	r6,0(sp)
    7900:	00098c80 	call	98c8 <_sbrk_r>
    7904:	1029883a 	mov	r20,r2
    7908:	00bfffc4 	movi	r2,-1
    790c:	d9800017 	ldw	r6,0(sp)
    7910:	a080e826 	beq	r20,r2,7cb4 <_malloc_r+0x738>
    7914:	a180a636 	bltu	r20,r6,7bb0 <_malloc_r+0x634>
    7918:	07000074 	movhi	fp,1
    791c:	e7169d04 	addi	fp,fp,23156
    7920:	e0800017 	ldw	r2,0(fp)
    7924:	a887883a 	add	r3,r21,r2
    7928:	e0c00015 	stw	r3,0(fp)
    792c:	3500e626 	beq	r6,r20,7cc8 <_malloc_r+0x74c>
    7930:	b9000017 	ldw	r4,0(r23)
    7934:	00bfffc4 	movi	r2,-1
    7938:	2080ee26 	beq	r4,r2,7cf4 <_malloc_r+0x778>
    793c:	a185c83a 	sub	r2,r20,r6
    7940:	10c5883a 	add	r2,r2,r3
    7944:	e0800015 	stw	r2,0(fp)
    7948:	a0c001cc 	andi	r3,r20,7
    794c:	1800bc26 	beq	r3,zero,7c40 <_malloc_r+0x6c4>
    7950:	a0e9c83a 	sub	r20,r20,r3
    7954:	00840204 	movi	r2,4104
    7958:	a5000204 	addi	r20,r20,8
    795c:	10c7c83a 	sub	r3,r2,r3
    7960:	a545883a 	add	r2,r20,r21
    7964:	1083ffcc 	andi	r2,r2,4095
    7968:	18abc83a 	sub	r21,r3,r2
    796c:	a80b883a 	mov	r5,r21
    7970:	9009883a 	mov	r4,r18
    7974:	00098c80 	call	98c8 <_sbrk_r>
    7978:	00ffffc4 	movi	r3,-1
    797c:	10c0e126 	beq	r2,r3,7d04 <_malloc_r+0x788>
    7980:	1505c83a 	sub	r2,r2,r20
    7984:	1545883a 	add	r2,r2,r21
    7988:	10800054 	ori	r2,r2,1
    798c:	e0c00017 	ldw	r3,0(fp)
    7990:	9d000215 	stw	r20,8(r19)
    7994:	a0800115 	stw	r2,4(r20)
    7998:	a8c7883a 	add	r3,r21,r3
    799c:	e0c00015 	stw	r3,0(fp)
    79a0:	84c00e26 	beq	r16,r19,79dc <_malloc_r+0x460>
    79a4:	018003c4 	movi	r6,15
    79a8:	3580a72e 	bgeu	r6,r22,7c48 <_malloc_r+0x6cc>
    79ac:	81400117 	ldw	r5,4(r16)
    79b0:	013ffe04 	movi	r4,-8
    79b4:	b0bffd04 	addi	r2,r22,-12
    79b8:	1104703a 	and	r2,r2,r4
    79bc:	2900004c 	andi	r4,r5,1
    79c0:	2088b03a 	or	r4,r4,r2
    79c4:	81000115 	stw	r4,4(r16)
    79c8:	01400144 	movi	r5,5
    79cc:	8089883a 	add	r4,r16,r2
    79d0:	21400115 	stw	r5,4(r4)
    79d4:	21400215 	stw	r5,8(r4)
    79d8:	3080cd36 	bltu	r6,r2,7d10 <_malloc_r+0x794>
    79dc:	00800074 	movhi	r2,1
    79e0:	10969304 	addi	r2,r2,23116
    79e4:	11000017 	ldw	r4,0(r2)
    79e8:	20c0012e 	bgeu	r4,r3,79f0 <_malloc_r+0x474>
    79ec:	10c00015 	stw	r3,0(r2)
    79f0:	00800074 	movhi	r2,1
    79f4:	10969204 	addi	r2,r2,23112
    79f8:	11000017 	ldw	r4,0(r2)
    79fc:	9c000217 	ldw	r16,8(r19)
    7a00:	20c0012e 	bgeu	r4,r3,7a08 <_malloc_r+0x48c>
    7a04:	10c00015 	stw	r3,0(r2)
    7a08:	80c00117 	ldw	r3,4(r16)
    7a0c:	00bfff04 	movi	r2,-4
    7a10:	1886703a 	and	r3,r3,r2
    7a14:	1c45c83a 	sub	r2,r3,r17
    7a18:	1c400236 	bltu	r3,r17,7a24 <_malloc_r+0x4a8>
    7a1c:	00c003c4 	movi	r3,15
    7a20:	18800416 	blt	r3,r2,7a34 <_malloc_r+0x4b8>
    7a24:	9009883a 	mov	r4,r18
    7a28:	000f7780 	call	f778 <__malloc_unlock>
    7a2c:	0005883a 	mov	r2,zero
    7a30:	003f7b06 	br	7820 <_malloc_r+0x2a4>
    7a34:	88c00054 	ori	r3,r17,1
    7a38:	80c00115 	stw	r3,4(r16)
    7a3c:	8463883a 	add	r17,r16,r17
    7a40:	10800054 	ori	r2,r2,1
    7a44:	9c400215 	stw	r17,8(r19)
    7a48:	88800115 	stw	r2,4(r17)
    7a4c:	9009883a 	mov	r4,r18
    7a50:	000f7780 	call	f778 <__malloc_unlock>
    7a54:	80800204 	addi	r2,r16,8
    7a58:	003f7106 	br	7820 <_malloc_r+0x2a4>
    7a5c:	00c00504 	movi	r3,20
    7a60:	18804a2e 	bgeu	r3,r2,7b8c <_malloc_r+0x610>
    7a64:	00c01504 	movi	r3,84
    7a68:	18806e36 	bltu	r3,r2,7c24 <_malloc_r+0x6a8>
    7a6c:	8804d33a 	srli	r2,r17,12
    7a70:	12001bc4 	addi	r8,r2,111
    7a74:	11c01b84 	addi	r7,r2,110
    7a78:	4209883a 	add	r4,r8,r8
    7a7c:	003edd06 	br	75f4 <_malloc_r+0x78>
    7a80:	3804d27a 	srli	r2,r7,9
    7a84:	00c00104 	movi	r3,4
    7a88:	1880442e 	bgeu	r3,r2,7b9c <_malloc_r+0x620>
    7a8c:	00c00504 	movi	r3,20
    7a90:	18808136 	bltu	r3,r2,7c98 <_malloc_r+0x71c>
    7a94:	11401704 	addi	r5,r2,92
    7a98:	10c016c4 	addi	r3,r2,91
    7a9c:	294b883a 	add	r5,r5,r5
    7aa0:	294b883a 	add	r5,r5,r5
    7aa4:	294b883a 	add	r5,r5,r5
    7aa8:	994b883a 	add	r5,r19,r5
    7aac:	28800017 	ldw	r2,0(r5)
    7ab0:	01800074 	movhi	r6,1
    7ab4:	297ffe04 	addi	r5,r5,-8
    7ab8:	318a3f04 	addi	r6,r6,10492
    7abc:	28806526 	beq	r5,r2,7c54 <_malloc_r+0x6d8>
    7ac0:	01bfff04 	movi	r6,-4
    7ac4:	10c00117 	ldw	r3,4(r2)
    7ac8:	1986703a 	and	r3,r3,r6
    7acc:	38c0022e 	bgeu	r7,r3,7ad8 <_malloc_r+0x55c>
    7ad0:	10800217 	ldw	r2,8(r2)
    7ad4:	28bffb1e 	bne	r5,r2,7ac4 <_malloc_r+0x548>
    7ad8:	11400317 	ldw	r5,12(r2)
    7adc:	98c00117 	ldw	r3,4(r19)
    7ae0:	81400315 	stw	r5,12(r16)
    7ae4:	80800215 	stw	r2,8(r16)
    7ae8:	2c000215 	stw	r16,8(r5)
    7aec:	14000315 	stw	r16,12(r2)
    7af0:	003ef806 	br	76d4 <_malloc_r+0x158>
    7af4:	88c00054 	ori	r3,r17,1
    7af8:	80c00115 	stw	r3,4(r16)
    7afc:	8463883a 	add	r17,r16,r17
    7b00:	34400515 	stw	r17,20(r6)
    7b04:	34400415 	stw	r17,16(r6)
    7b08:	10c00054 	ori	r3,r2,1
    7b0c:	8a000315 	stw	r8,12(r17)
    7b10:	8a000215 	stw	r8,8(r17)
    7b14:	88c00115 	stw	r3,4(r17)
    7b18:	88a3883a 	add	r17,r17,r2
    7b1c:	88800015 	stw	r2,0(r17)
    7b20:	9009883a 	mov	r4,r18
    7b24:	000f7780 	call	f778 <__malloc_unlock>
    7b28:	80800204 	addi	r2,r16,8
    7b2c:	003f3c06 	br	7820 <_malloc_r+0x2a4>
    7b30:	30c00117 	ldw	r3,4(r6)
    7b34:	003ee706 	br	76d4 <_malloc_r+0x158>
    7b38:	5ac00044 	addi	r11,r11,1
    7b3c:	588000cc 	andi	r2,r11,3
    7b40:	31800204 	addi	r6,r6,8
    7b44:	103efd1e 	bne	r2,zero,773c <_malloc_r+0x1c0>
    7b48:	00002406 	br	7bdc <_malloc_r+0x660>
    7b4c:	14000317 	ldw	r16,12(r2)
    7b50:	143f251e 	bne	r2,r16,77e8 <_malloc_r+0x26c>
    7b54:	21000084 	addi	r4,r4,2
    7b58:	003ebc06 	br	764c <_malloc_r+0xd0>
    7b5c:	8085883a 	add	r2,r16,r2
    7b60:	10c00117 	ldw	r3,4(r2)
    7b64:	81000317 	ldw	r4,12(r16)
    7b68:	81400217 	ldw	r5,8(r16)
    7b6c:	18c00054 	ori	r3,r3,1
    7b70:	10c00115 	stw	r3,4(r2)
    7b74:	29000315 	stw	r4,12(r5)
    7b78:	21400215 	stw	r5,8(r4)
    7b7c:	9009883a 	mov	r4,r18
    7b80:	000f7780 	call	f778 <__malloc_unlock>
    7b84:	80800204 	addi	r2,r16,8
    7b88:	003f2506 	br	7820 <_malloc_r+0x2a4>
    7b8c:	12001704 	addi	r8,r2,92
    7b90:	11c016c4 	addi	r7,r2,91
    7b94:	4209883a 	add	r4,r8,r8
    7b98:	003e9606 	br	75f4 <_malloc_r+0x78>
    7b9c:	3804d1ba 	srli	r2,r7,6
    7ba0:	11400e44 	addi	r5,r2,57
    7ba4:	10c00e04 	addi	r3,r2,56
    7ba8:	294b883a 	add	r5,r5,r5
    7bac:	003fbc06 	br	7aa0 <_malloc_r+0x524>
    7bb0:	84ff5926 	beq	r16,r19,7918 <_malloc_r+0x39c>
    7bb4:	00800074 	movhi	r2,1
    7bb8:	108a3f04 	addi	r2,r2,10492
    7bbc:	14000217 	ldw	r16,8(r2)
    7bc0:	00bfff04 	movi	r2,-4
    7bc4:	80c00117 	ldw	r3,4(r16)
    7bc8:	1886703a 	and	r3,r3,r2
    7bcc:	003f9106 	br	7a14 <_malloc_r+0x498>
    7bd0:	60800217 	ldw	r2,8(r12)
    7bd4:	213fffc4 	addi	r4,r4,-1
    7bd8:	1300651e 	bne	r2,r12,7d70 <_malloc_r+0x7f4>
    7bdc:	208000cc 	andi	r2,r4,3
    7be0:	633ffe04 	addi	r12,r12,-8
    7be4:	103ffa1e 	bne	r2,zero,7bd0 <_malloc_r+0x654>
    7be8:	98800117 	ldw	r2,4(r19)
    7bec:	0146303a 	nor	r3,zero,r5
    7bf0:	1884703a 	and	r2,r3,r2
    7bf4:	98800115 	stw	r2,4(r19)
    7bf8:	294b883a 	add	r5,r5,r5
    7bfc:	117f2836 	bltu	r2,r5,78a0 <_malloc_r+0x324>
    7c00:	283f2726 	beq	r5,zero,78a0 <_malloc_r+0x324>
    7c04:	2886703a 	and	r3,r5,r2
    7c08:	5809883a 	mov	r4,r11
    7c0c:	183ec31e 	bne	r3,zero,771c <_malloc_r+0x1a0>
    7c10:	294b883a 	add	r5,r5,r5
    7c14:	2886703a 	and	r3,r5,r2
    7c18:	21000104 	addi	r4,r4,4
    7c1c:	183ffc26 	beq	r3,zero,7c10 <_malloc_r+0x694>
    7c20:	003ebe06 	br	771c <_malloc_r+0x1a0>
    7c24:	00c05504 	movi	r3,340
    7c28:	18801236 	bltu	r3,r2,7c74 <_malloc_r+0x6f8>
    7c2c:	8804d3fa 	srli	r2,r17,15
    7c30:	12001e04 	addi	r8,r2,120
    7c34:	11c01dc4 	addi	r7,r2,119
    7c38:	4209883a 	add	r4,r8,r8
    7c3c:	003e6d06 	br	75f4 <_malloc_r+0x78>
    7c40:	00c40004 	movi	r3,4096
    7c44:	003f4606 	br	7960 <_malloc_r+0x3e4>
    7c48:	00800044 	movi	r2,1
    7c4c:	a0800115 	stw	r2,4(r20)
    7c50:	003f7406 	br	7a24 <_malloc_r+0x4a8>
    7c54:	1805d0ba 	srai	r2,r3,2
    7c58:	01c00044 	movi	r7,1
    7c5c:	30c00117 	ldw	r3,4(r6)
    7c60:	388e983a 	sll	r7,r7,r2
    7c64:	2805883a 	mov	r2,r5
    7c68:	38c6b03a 	or	r3,r7,r3
    7c6c:	30c00115 	stw	r3,4(r6)
    7c70:	003f9b06 	br	7ae0 <_malloc_r+0x564>
    7c74:	00c15504 	movi	r3,1364
    7c78:	18801a36 	bltu	r3,r2,7ce4 <_malloc_r+0x768>
    7c7c:	8804d4ba 	srli	r2,r17,18
    7c80:	12001f44 	addi	r8,r2,125
    7c84:	11c01f04 	addi	r7,r2,124
    7c88:	4209883a 	add	r4,r8,r8
    7c8c:	003e5906 	br	75f4 <_malloc_r+0x78>
    7c90:	ad400404 	addi	r21,r21,16
    7c94:	003f1706 	br	78f4 <_malloc_r+0x378>
    7c98:	00c01504 	movi	r3,84
    7c9c:	18802336 	bltu	r3,r2,7d2c <_malloc_r+0x7b0>
    7ca0:	3804d33a 	srli	r2,r7,12
    7ca4:	11401bc4 	addi	r5,r2,111
    7ca8:	10c01b84 	addi	r3,r2,110
    7cac:	294b883a 	add	r5,r5,r5
    7cb0:	003f7b06 	br	7aa0 <_malloc_r+0x524>
    7cb4:	9c000217 	ldw	r16,8(r19)
    7cb8:	00bfff04 	movi	r2,-4
    7cbc:	80c00117 	ldw	r3,4(r16)
    7cc0:	1886703a 	and	r3,r3,r2
    7cc4:	003f5306 	br	7a14 <_malloc_r+0x498>
    7cc8:	3083ffcc 	andi	r2,r6,4095
    7ccc:	103f181e 	bne	r2,zero,7930 <_malloc_r+0x3b4>
    7cd0:	99000217 	ldw	r4,8(r19)
    7cd4:	b545883a 	add	r2,r22,r21
    7cd8:	10800054 	ori	r2,r2,1
    7cdc:	20800115 	stw	r2,4(r4)
    7ce0:	003f3e06 	br	79dc <_malloc_r+0x460>
    7ce4:	01003f84 	movi	r4,254
    7ce8:	02001fc4 	movi	r8,127
    7cec:	01c01f84 	movi	r7,126
    7cf0:	003e4006 	br	75f4 <_malloc_r+0x78>
    7cf4:	00800074 	movhi	r2,1
    7cf8:	108fc604 	addi	r2,r2,16152
    7cfc:	15000015 	stw	r20,0(r2)
    7d00:	003f1106 	br	7948 <_malloc_r+0x3cc>
    7d04:	00800044 	movi	r2,1
    7d08:	002b883a 	mov	r21,zero
    7d0c:	003f1f06 	br	798c <_malloc_r+0x410>
    7d10:	81400204 	addi	r5,r16,8
    7d14:	9009883a 	mov	r4,r18
    7d18:	00069840 	call	6984 <_free_r>
    7d1c:	00800074 	movhi	r2,1
    7d20:	10969d04 	addi	r2,r2,23156
    7d24:	10c00017 	ldw	r3,0(r2)
    7d28:	003f2c06 	br	79dc <_malloc_r+0x460>
    7d2c:	00c05504 	movi	r3,340
    7d30:	18800536 	bltu	r3,r2,7d48 <_malloc_r+0x7cc>
    7d34:	3804d3fa 	srli	r2,r7,15
    7d38:	11401e04 	addi	r5,r2,120
    7d3c:	10c01dc4 	addi	r3,r2,119
    7d40:	294b883a 	add	r5,r5,r5
    7d44:	003f5606 	br	7aa0 <_malloc_r+0x524>
    7d48:	00c15504 	movi	r3,1364
    7d4c:	18800536 	bltu	r3,r2,7d64 <_malloc_r+0x7e8>
    7d50:	3804d4ba 	srli	r2,r7,18
    7d54:	11401f44 	addi	r5,r2,125
    7d58:	10c01f04 	addi	r3,r2,124
    7d5c:	294b883a 	add	r5,r5,r5
    7d60:	003f4f06 	br	7aa0 <_malloc_r+0x524>
    7d64:	01403f84 	movi	r5,254
    7d68:	00c01f84 	movi	r3,126
    7d6c:	003f4c06 	br	7aa0 <_malloc_r+0x524>
    7d70:	98800117 	ldw	r2,4(r19)
    7d74:	003fa006 	br	7bf8 <_malloc_r+0x67c>
    7d78:	8808d0fa 	srli	r4,r17,3
    7d7c:	20800044 	addi	r2,r4,1
    7d80:	1085883a 	add	r2,r2,r2
    7d84:	003e9006 	br	77c8 <_malloc_r+0x24c>

00007d88 <memchr>:
    7d88:	208000cc 	andi	r2,r4,3
    7d8c:	280f883a 	mov	r7,r5
    7d90:	10003426 	beq	r2,zero,7e64 <memchr+0xdc>
    7d94:	30bfffc4 	addi	r2,r6,-1
    7d98:	30001a26 	beq	r6,zero,7e04 <memchr+0x7c>
    7d9c:	20c00003 	ldbu	r3,0(r4)
    7da0:	29803fcc 	andi	r6,r5,255
    7da4:	30c0051e 	bne	r6,r3,7dbc <memchr+0x34>
    7da8:	00001806 	br	7e0c <memchr+0x84>
    7dac:	10001526 	beq	r2,zero,7e04 <memchr+0x7c>
    7db0:	20c00003 	ldbu	r3,0(r4)
    7db4:	10bfffc4 	addi	r2,r2,-1
    7db8:	30c01426 	beq	r6,r3,7e0c <memchr+0x84>
    7dbc:	21000044 	addi	r4,r4,1
    7dc0:	20c000cc 	andi	r3,r4,3
    7dc4:	183ff91e 	bne	r3,zero,7dac <memchr+0x24>
    7dc8:	020000c4 	movi	r8,3
    7dcc:	40801136 	bltu	r8,r2,7e14 <memchr+0x8c>
    7dd0:	10000c26 	beq	r2,zero,7e04 <memchr+0x7c>
    7dd4:	20c00003 	ldbu	r3,0(r4)
    7dd8:	29403fcc 	andi	r5,r5,255
    7ddc:	28c00b26 	beq	r5,r3,7e0c <memchr+0x84>
    7de0:	20c00044 	addi	r3,r4,1
    7de4:	39803fcc 	andi	r6,r7,255
    7de8:	2089883a 	add	r4,r4,r2
    7dec:	00000306 	br	7dfc <memchr+0x74>
    7df0:	18c00044 	addi	r3,r3,1
    7df4:	197fffc3 	ldbu	r5,-1(r3)
    7df8:	31400526 	beq	r6,r5,7e10 <memchr+0x88>
    7dfc:	1805883a 	mov	r2,r3
    7e00:	20fffb1e 	bne	r4,r3,7df0 <memchr+0x68>
    7e04:	0005883a 	mov	r2,zero
    7e08:	f800283a 	ret
    7e0c:	2005883a 	mov	r2,r4
    7e10:	f800283a 	ret
    7e14:	28c03fcc 	andi	r3,r5,255
    7e18:	1812923a 	slli	r9,r3,8
    7e1c:	02ffbff4 	movhi	r11,65279
    7e20:	02a02074 	movhi	r10,32897
    7e24:	48d2b03a 	or	r9,r9,r3
    7e28:	4806943a 	slli	r3,r9,16
    7e2c:	5affbfc4 	addi	r11,r11,-257
    7e30:	52a02004 	addi	r10,r10,-32640
    7e34:	48d2b03a 	or	r9,r9,r3
    7e38:	20c00017 	ldw	r3,0(r4)
    7e3c:	48c6f03a 	xor	r3,r9,r3
    7e40:	1acd883a 	add	r6,r3,r11
    7e44:	00c6303a 	nor	r3,zero,r3
    7e48:	30c6703a 	and	r3,r6,r3
    7e4c:	1a86703a 	and	r3,r3,r10
    7e50:	183fe01e 	bne	r3,zero,7dd4 <memchr+0x4c>
    7e54:	10bfff04 	addi	r2,r2,-4
    7e58:	21000104 	addi	r4,r4,4
    7e5c:	40bff636 	bltu	r8,r2,7e38 <memchr+0xb0>
    7e60:	003fdb06 	br	7dd0 <memchr+0x48>
    7e64:	3005883a 	mov	r2,r6
    7e68:	003fd706 	br	7dc8 <memchr+0x40>

00007e6c <memcpy>:
    7e6c:	defffd04 	addi	sp,sp,-12
    7e70:	dfc00215 	stw	ra,8(sp)
    7e74:	dc400115 	stw	r17,4(sp)
    7e78:	dc000015 	stw	r16,0(sp)
    7e7c:	00c003c4 	movi	r3,15
    7e80:	2005883a 	mov	r2,r4
    7e84:	1980452e 	bgeu	r3,r6,7f9c <memcpy+0x130>
    7e88:	2906b03a 	or	r3,r5,r4
    7e8c:	18c000cc 	andi	r3,r3,3
    7e90:	1800441e 	bne	r3,zero,7fa4 <memcpy+0x138>
    7e94:	347ffc04 	addi	r17,r6,-16
    7e98:	8822d13a 	srli	r17,r17,4
    7e9c:	28c00104 	addi	r3,r5,4
    7ea0:	23400104 	addi	r13,r4,4
    7ea4:	8820913a 	slli	r16,r17,4
    7ea8:	2b000204 	addi	r12,r5,8
    7eac:	22c00204 	addi	r11,r4,8
    7eb0:	84000504 	addi	r16,r16,20
    7eb4:	2a800304 	addi	r10,r5,12
    7eb8:	22400304 	addi	r9,r4,12
    7ebc:	2c21883a 	add	r16,r5,r16
    7ec0:	2811883a 	mov	r8,r5
    7ec4:	200f883a 	mov	r7,r4
    7ec8:	41000017 	ldw	r4,0(r8)
    7ecc:	1fc00017 	ldw	ra,0(r3)
    7ed0:	63c00017 	ldw	r15,0(r12)
    7ed4:	39000015 	stw	r4,0(r7)
    7ed8:	53800017 	ldw	r14,0(r10)
    7edc:	6fc00015 	stw	ra,0(r13)
    7ee0:	5bc00015 	stw	r15,0(r11)
    7ee4:	4b800015 	stw	r14,0(r9)
    7ee8:	18c00404 	addi	r3,r3,16
    7eec:	39c00404 	addi	r7,r7,16
    7ef0:	42000404 	addi	r8,r8,16
    7ef4:	6b400404 	addi	r13,r13,16
    7ef8:	63000404 	addi	r12,r12,16
    7efc:	5ac00404 	addi	r11,r11,16
    7f00:	52800404 	addi	r10,r10,16
    7f04:	4a400404 	addi	r9,r9,16
    7f08:	1c3fef1e 	bne	r3,r16,7ec8 <memcpy+0x5c>
    7f0c:	89c00044 	addi	r7,r17,1
    7f10:	380e913a 	slli	r7,r7,4
    7f14:	310003cc 	andi	r4,r6,15
    7f18:	02c000c4 	movi	r11,3
    7f1c:	11c7883a 	add	r3,r2,r7
    7f20:	29cb883a 	add	r5,r5,r7
    7f24:	5900212e 	bgeu	r11,r4,7fac <memcpy+0x140>
    7f28:	1813883a 	mov	r9,r3
    7f2c:	2811883a 	mov	r8,r5
    7f30:	200f883a 	mov	r7,r4
    7f34:	42800017 	ldw	r10,0(r8)
    7f38:	4a400104 	addi	r9,r9,4
    7f3c:	39ffff04 	addi	r7,r7,-4
    7f40:	4abfff15 	stw	r10,-4(r9)
    7f44:	42000104 	addi	r8,r8,4
    7f48:	59fffa36 	bltu	r11,r7,7f34 <memcpy+0xc8>
    7f4c:	213fff04 	addi	r4,r4,-4
    7f50:	2008d0ba 	srli	r4,r4,2
    7f54:	318000cc 	andi	r6,r6,3
    7f58:	21000044 	addi	r4,r4,1
    7f5c:	2109883a 	add	r4,r4,r4
    7f60:	2109883a 	add	r4,r4,r4
    7f64:	1907883a 	add	r3,r3,r4
    7f68:	290b883a 	add	r5,r5,r4
    7f6c:	30000626 	beq	r6,zero,7f88 <memcpy+0x11c>
    7f70:	198d883a 	add	r6,r3,r6
    7f74:	29c00003 	ldbu	r7,0(r5)
    7f78:	18c00044 	addi	r3,r3,1
    7f7c:	29400044 	addi	r5,r5,1
    7f80:	19ffffc5 	stb	r7,-1(r3)
    7f84:	19bffb1e 	bne	r3,r6,7f74 <memcpy+0x108>
    7f88:	dfc00217 	ldw	ra,8(sp)
    7f8c:	dc400117 	ldw	r17,4(sp)
    7f90:	dc000017 	ldw	r16,0(sp)
    7f94:	dec00304 	addi	sp,sp,12
    7f98:	f800283a 	ret
    7f9c:	2007883a 	mov	r3,r4
    7fa0:	003ff206 	br	7f6c <memcpy+0x100>
    7fa4:	2007883a 	mov	r3,r4
    7fa8:	003ff106 	br	7f70 <memcpy+0x104>
    7fac:	200d883a 	mov	r6,r4
    7fb0:	003fee06 	br	7f6c <memcpy+0x100>

00007fb4 <memmove>:
    7fb4:	2005883a 	mov	r2,r4
    7fb8:	29000b2e 	bgeu	r5,r4,7fe8 <memmove+0x34>
    7fbc:	298f883a 	add	r7,r5,r6
    7fc0:	21c0092e 	bgeu	r4,r7,7fe8 <memmove+0x34>
    7fc4:	2187883a 	add	r3,r4,r6
    7fc8:	198bc83a 	sub	r5,r3,r6
    7fcc:	30004826 	beq	r6,zero,80f0 <memmove+0x13c>
    7fd0:	39ffffc4 	addi	r7,r7,-1
    7fd4:	39000003 	ldbu	r4,0(r7)
    7fd8:	18ffffc4 	addi	r3,r3,-1
    7fdc:	19000005 	stb	r4,0(r3)
    7fe0:	28fffb1e 	bne	r5,r3,7fd0 <memmove+0x1c>
    7fe4:	f800283a 	ret
    7fe8:	00c003c4 	movi	r3,15
    7fec:	1980412e 	bgeu	r3,r6,80f4 <memmove+0x140>
    7ff0:	2886b03a 	or	r3,r5,r2
    7ff4:	18c000cc 	andi	r3,r3,3
    7ff8:	1800401e 	bne	r3,zero,80fc <memmove+0x148>
    7ffc:	33fffc04 	addi	r15,r6,-16
    8000:	781ed13a 	srli	r15,r15,4
    8004:	28c00104 	addi	r3,r5,4
    8008:	13400104 	addi	r13,r2,4
    800c:	781c913a 	slli	r14,r15,4
    8010:	2b000204 	addi	r12,r5,8
    8014:	12c00204 	addi	r11,r2,8
    8018:	73800504 	addi	r14,r14,20
    801c:	2a800304 	addi	r10,r5,12
    8020:	12400304 	addi	r9,r2,12
    8024:	2b9d883a 	add	r14,r5,r14
    8028:	2811883a 	mov	r8,r5
    802c:	100f883a 	mov	r7,r2
    8030:	41000017 	ldw	r4,0(r8)
    8034:	39c00404 	addi	r7,r7,16
    8038:	18c00404 	addi	r3,r3,16
    803c:	393ffc15 	stw	r4,-16(r7)
    8040:	193ffc17 	ldw	r4,-16(r3)
    8044:	6b400404 	addi	r13,r13,16
    8048:	5ac00404 	addi	r11,r11,16
    804c:	693ffc15 	stw	r4,-16(r13)
    8050:	61000017 	ldw	r4,0(r12)
    8054:	4a400404 	addi	r9,r9,16
    8058:	42000404 	addi	r8,r8,16
    805c:	593ffc15 	stw	r4,-16(r11)
    8060:	51000017 	ldw	r4,0(r10)
    8064:	63000404 	addi	r12,r12,16
    8068:	52800404 	addi	r10,r10,16
    806c:	493ffc15 	stw	r4,-16(r9)
    8070:	1bbfef1e 	bne	r3,r14,8030 <memmove+0x7c>
    8074:	79000044 	addi	r4,r15,1
    8078:	2008913a 	slli	r4,r4,4
    807c:	328003cc 	andi	r10,r6,15
    8080:	02c000c4 	movi	r11,3
    8084:	1107883a 	add	r3,r2,r4
    8088:	290b883a 	add	r5,r5,r4
    808c:	5a801e2e 	bgeu	r11,r10,8108 <memmove+0x154>
    8090:	1813883a 	mov	r9,r3
    8094:	2811883a 	mov	r8,r5
    8098:	500f883a 	mov	r7,r10
    809c:	41000017 	ldw	r4,0(r8)
    80a0:	4a400104 	addi	r9,r9,4
    80a4:	39ffff04 	addi	r7,r7,-4
    80a8:	493fff15 	stw	r4,-4(r9)
    80ac:	42000104 	addi	r8,r8,4
    80b0:	59fffa36 	bltu	r11,r7,809c <memmove+0xe8>
    80b4:	513fff04 	addi	r4,r10,-4
    80b8:	2008d0ba 	srli	r4,r4,2
    80bc:	318000cc 	andi	r6,r6,3
    80c0:	21000044 	addi	r4,r4,1
    80c4:	2109883a 	add	r4,r4,r4
    80c8:	2109883a 	add	r4,r4,r4
    80cc:	1907883a 	add	r3,r3,r4
    80d0:	290b883a 	add	r5,r5,r4
    80d4:	30000b26 	beq	r6,zero,8104 <memmove+0x150>
    80d8:	198d883a 	add	r6,r3,r6
    80dc:	29c00003 	ldbu	r7,0(r5)
    80e0:	18c00044 	addi	r3,r3,1
    80e4:	29400044 	addi	r5,r5,1
    80e8:	19ffffc5 	stb	r7,-1(r3)
    80ec:	19bffb1e 	bne	r3,r6,80dc <memmove+0x128>
    80f0:	f800283a 	ret
    80f4:	1007883a 	mov	r3,r2
    80f8:	003ff606 	br	80d4 <memmove+0x120>
    80fc:	1007883a 	mov	r3,r2
    8100:	003ff506 	br	80d8 <memmove+0x124>
    8104:	f800283a 	ret
    8108:	500d883a 	mov	r6,r10
    810c:	003ff106 	br	80d4 <memmove+0x120>

00008110 <memset>:
    8110:	20c000cc 	andi	r3,r4,3
    8114:	2005883a 	mov	r2,r4
    8118:	18004426 	beq	r3,zero,822c <memset+0x11c>
    811c:	31ffffc4 	addi	r7,r6,-1
    8120:	30004026 	beq	r6,zero,8224 <memset+0x114>
    8124:	2813883a 	mov	r9,r5
    8128:	200d883a 	mov	r6,r4
    812c:	2007883a 	mov	r3,r4
    8130:	00000406 	br	8144 <memset+0x34>
    8134:	3a3fffc4 	addi	r8,r7,-1
    8138:	31800044 	addi	r6,r6,1
    813c:	38003926 	beq	r7,zero,8224 <memset+0x114>
    8140:	400f883a 	mov	r7,r8
    8144:	18c00044 	addi	r3,r3,1
    8148:	32400005 	stb	r9,0(r6)
    814c:	1a0000cc 	andi	r8,r3,3
    8150:	403ff81e 	bne	r8,zero,8134 <memset+0x24>
    8154:	010000c4 	movi	r4,3
    8158:	21c02d2e 	bgeu	r4,r7,8210 <memset+0x100>
    815c:	29003fcc 	andi	r4,r5,255
    8160:	200c923a 	slli	r6,r4,8
    8164:	3108b03a 	or	r4,r6,r4
    8168:	200c943a 	slli	r6,r4,16
    816c:	218cb03a 	or	r6,r4,r6
    8170:	010003c4 	movi	r4,15
    8174:	21c0182e 	bgeu	r4,r7,81d8 <memset+0xc8>
    8178:	3b3ffc04 	addi	r12,r7,-16
    817c:	6018d13a 	srli	r12,r12,4
    8180:	1a000104 	addi	r8,r3,4
    8184:	1ac00204 	addi	r11,r3,8
    8188:	6008913a 	slli	r4,r12,4
    818c:	1a800304 	addi	r10,r3,12
    8190:	1813883a 	mov	r9,r3
    8194:	21000504 	addi	r4,r4,20
    8198:	1909883a 	add	r4,r3,r4
    819c:	49800015 	stw	r6,0(r9)
    81a0:	41800015 	stw	r6,0(r8)
    81a4:	59800015 	stw	r6,0(r11)
    81a8:	51800015 	stw	r6,0(r10)
    81ac:	42000404 	addi	r8,r8,16
    81b0:	4a400404 	addi	r9,r9,16
    81b4:	5ac00404 	addi	r11,r11,16
    81b8:	52800404 	addi	r10,r10,16
    81bc:	413ff71e 	bne	r8,r4,819c <memset+0x8c>
    81c0:	63000044 	addi	r12,r12,1
    81c4:	6018913a 	slli	r12,r12,4
    81c8:	39c003cc 	andi	r7,r7,15
    81cc:	010000c4 	movi	r4,3
    81d0:	1b07883a 	add	r3,r3,r12
    81d4:	21c00e2e 	bgeu	r4,r7,8210 <memset+0x100>
    81d8:	1813883a 	mov	r9,r3
    81dc:	3811883a 	mov	r8,r7
    81e0:	010000c4 	movi	r4,3
    81e4:	49800015 	stw	r6,0(r9)
    81e8:	423fff04 	addi	r8,r8,-4
    81ec:	4a400104 	addi	r9,r9,4
    81f0:	223ffc36 	bltu	r4,r8,81e4 <memset+0xd4>
    81f4:	393fff04 	addi	r4,r7,-4
    81f8:	2008d0ba 	srli	r4,r4,2
    81fc:	39c000cc 	andi	r7,r7,3
    8200:	21000044 	addi	r4,r4,1
    8204:	2109883a 	add	r4,r4,r4
    8208:	2109883a 	add	r4,r4,r4
    820c:	1907883a 	add	r3,r3,r4
    8210:	38000526 	beq	r7,zero,8228 <memset+0x118>
    8214:	19cf883a 	add	r7,r3,r7
    8218:	19400005 	stb	r5,0(r3)
    821c:	18c00044 	addi	r3,r3,1
    8220:	38fffd1e 	bne	r7,r3,8218 <memset+0x108>
    8224:	f800283a 	ret
    8228:	f800283a 	ret
    822c:	2007883a 	mov	r3,r4
    8230:	300f883a 	mov	r7,r6
    8234:	003fc706 	br	8154 <memset+0x44>

00008238 <_Balloc>:
    8238:	20801317 	ldw	r2,76(r4)
    823c:	defffc04 	addi	sp,sp,-16
    8240:	dc400115 	stw	r17,4(sp)
    8244:	dc000015 	stw	r16,0(sp)
    8248:	dfc00315 	stw	ra,12(sp)
    824c:	dc800215 	stw	r18,8(sp)
    8250:	2023883a 	mov	r17,r4
    8254:	2821883a 	mov	r16,r5
    8258:	10000f26 	beq	r2,zero,8298 <_Balloc+0x60>
    825c:	8407883a 	add	r3,r16,r16
    8260:	18c7883a 	add	r3,r3,r3
    8264:	10c7883a 	add	r3,r2,r3
    8268:	18800017 	ldw	r2,0(r3)
    826c:	10001126 	beq	r2,zero,82b4 <_Balloc+0x7c>
    8270:	11000017 	ldw	r4,0(r2)
    8274:	19000015 	stw	r4,0(r3)
    8278:	10000415 	stw	zero,16(r2)
    827c:	10000315 	stw	zero,12(r2)
    8280:	dfc00317 	ldw	ra,12(sp)
    8284:	dc800217 	ldw	r18,8(sp)
    8288:	dc400117 	ldw	r17,4(sp)
    828c:	dc000017 	ldw	r16,0(sp)
    8290:	dec00404 	addi	sp,sp,16
    8294:	f800283a 	ret
    8298:	01800844 	movi	r6,33
    829c:	01400104 	movi	r5,4
    82a0:	000b2e00 	call	b2e0 <_calloc_r>
    82a4:	88801315 	stw	r2,76(r17)
    82a8:	103fec1e 	bne	r2,zero,825c <_Balloc+0x24>
    82ac:	0005883a 	mov	r2,zero
    82b0:	003ff306 	br	8280 <_Balloc+0x48>
    82b4:	01400044 	movi	r5,1
    82b8:	2c24983a 	sll	r18,r5,r16
    82bc:	8809883a 	mov	r4,r17
    82c0:	91800144 	addi	r6,r18,5
    82c4:	318d883a 	add	r6,r6,r6
    82c8:	318d883a 	add	r6,r6,r6
    82cc:	000b2e00 	call	b2e0 <_calloc_r>
    82d0:	103ff626 	beq	r2,zero,82ac <_Balloc+0x74>
    82d4:	14000115 	stw	r16,4(r2)
    82d8:	14800215 	stw	r18,8(r2)
    82dc:	003fe606 	br	8278 <_Balloc+0x40>

000082e0 <_Bfree>:
    82e0:	28000826 	beq	r5,zero,8304 <_Bfree+0x24>
    82e4:	28c00117 	ldw	r3,4(r5)
    82e8:	20801317 	ldw	r2,76(r4)
    82ec:	18c7883a 	add	r3,r3,r3
    82f0:	18c7883a 	add	r3,r3,r3
    82f4:	10c5883a 	add	r2,r2,r3
    82f8:	10c00017 	ldw	r3,0(r2)
    82fc:	28c00015 	stw	r3,0(r5)
    8300:	11400015 	stw	r5,0(r2)
    8304:	f800283a 	ret

00008308 <__multadd>:
    8308:	defff704 	addi	sp,sp,-36
    830c:	dc800215 	stw	r18,8(sp)
    8310:	2c800417 	ldw	r18,16(r5)
    8314:	dd800615 	stw	r22,24(sp)
    8318:	dd400515 	stw	r21,20(sp)
    831c:	dd000415 	stw	r20,16(sp)
    8320:	dcc00315 	stw	r19,12(sp)
    8324:	dc400115 	stw	r17,4(sp)
    8328:	dc000015 	stw	r16,0(sp)
    832c:	dfc00815 	stw	ra,32(sp)
    8330:	ddc00715 	stw	r23,28(sp)
    8334:	2827883a 	mov	r19,r5
    8338:	2029883a 	mov	r20,r4
    833c:	3023883a 	mov	r17,r6
    8340:	3821883a 	mov	r16,r7
    8344:	2d400504 	addi	r21,r5,20
    8348:	002d883a 	mov	r22,zero
    834c:	adc00017 	ldw	r23,0(r21)
    8350:	880b883a 	mov	r5,r17
    8354:	ad400104 	addi	r21,r21,4
    8358:	b93fffcc 	andi	r4,r23,65535
    835c:	000c8ec0 	call	c8ec <__mulsi3>
    8360:	b808d43a 	srli	r4,r23,16
    8364:	880b883a 	mov	r5,r17
    8368:	1421883a 	add	r16,r2,r16
    836c:	000c8ec0 	call	c8ec <__mulsi3>
    8370:	800ed43a 	srli	r7,r16,16
    8374:	80ffffcc 	andi	r3,r16,65535
    8378:	b5800044 	addi	r22,r22,1
    837c:	11c5883a 	add	r2,r2,r7
    8380:	100e943a 	slli	r7,r2,16
    8384:	1020d43a 	srli	r16,r2,16
    8388:	38c7883a 	add	r3,r7,r3
    838c:	a8ffff15 	stw	r3,-4(r21)
    8390:	b4bfee16 	blt	r22,r18,834c <__multadd+0x44>
    8394:	80000926 	beq	r16,zero,83bc <__multadd+0xb4>
    8398:	98800217 	ldw	r2,8(r19)
    839c:	9080130e 	bge	r18,r2,83ec <__multadd+0xe4>
    83a0:	90800144 	addi	r2,r18,5
    83a4:	1085883a 	add	r2,r2,r2
    83a8:	1085883a 	add	r2,r2,r2
    83ac:	9885883a 	add	r2,r19,r2
    83b0:	14000015 	stw	r16,0(r2)
    83b4:	94800044 	addi	r18,r18,1
    83b8:	9c800415 	stw	r18,16(r19)
    83bc:	9805883a 	mov	r2,r19
    83c0:	dfc00817 	ldw	ra,32(sp)
    83c4:	ddc00717 	ldw	r23,28(sp)
    83c8:	dd800617 	ldw	r22,24(sp)
    83cc:	dd400517 	ldw	r21,20(sp)
    83d0:	dd000417 	ldw	r20,16(sp)
    83d4:	dcc00317 	ldw	r19,12(sp)
    83d8:	dc800217 	ldw	r18,8(sp)
    83dc:	dc400117 	ldw	r17,4(sp)
    83e0:	dc000017 	ldw	r16,0(sp)
    83e4:	dec00904 	addi	sp,sp,36
    83e8:	f800283a 	ret
    83ec:	99400117 	ldw	r5,4(r19)
    83f0:	a009883a 	mov	r4,r20
    83f4:	29400044 	addi	r5,r5,1
    83f8:	00082380 	call	8238 <_Balloc>
    83fc:	99800417 	ldw	r6,16(r19)
    8400:	99400304 	addi	r5,r19,12
    8404:	11000304 	addi	r4,r2,12
    8408:	31800084 	addi	r6,r6,2
    840c:	318d883a 	add	r6,r6,r6
    8410:	318d883a 	add	r6,r6,r6
    8414:	1023883a 	mov	r17,r2
    8418:	0007e6c0 	call	7e6c <memcpy>
    841c:	98000a26 	beq	r19,zero,8448 <__multadd+0x140>
    8420:	98c00117 	ldw	r3,4(r19)
    8424:	a0801317 	ldw	r2,76(r20)
    8428:	18c7883a 	add	r3,r3,r3
    842c:	18c7883a 	add	r3,r3,r3
    8430:	10c5883a 	add	r2,r2,r3
    8434:	10c00017 	ldw	r3,0(r2)
    8438:	98c00015 	stw	r3,0(r19)
    843c:	14c00015 	stw	r19,0(r2)
    8440:	8827883a 	mov	r19,r17
    8444:	003fd606 	br	83a0 <__multadd+0x98>
    8448:	8827883a 	mov	r19,r17
    844c:	003fd406 	br	83a0 <__multadd+0x98>

00008450 <__s2b>:
    8450:	defff904 	addi	sp,sp,-28
    8454:	dc400115 	stw	r17,4(sp)
    8458:	dc000015 	stw	r16,0(sp)
    845c:	2023883a 	mov	r17,r4
    8460:	2821883a 	mov	r16,r5
    8464:	39000204 	addi	r4,r7,8
    8468:	01400244 	movi	r5,9
    846c:	dcc00315 	stw	r19,12(sp)
    8470:	dc800215 	stw	r18,8(sp)
    8474:	dfc00615 	stw	ra,24(sp)
    8478:	dd400515 	stw	r21,20(sp)
    847c:	dd000415 	stw	r20,16(sp)
    8480:	3825883a 	mov	r18,r7
    8484:	3027883a 	mov	r19,r6
    8488:	000c7380 	call	c738 <__divsi3>
    848c:	00c00044 	movi	r3,1
    8490:	000b883a 	mov	r5,zero
    8494:	1880030e 	bge	r3,r2,84a4 <__s2b+0x54>
    8498:	18c7883a 	add	r3,r3,r3
    849c:	29400044 	addi	r5,r5,1
    84a0:	18bffd16 	blt	r3,r2,8498 <__s2b+0x48>
    84a4:	8809883a 	mov	r4,r17
    84a8:	00082380 	call	8238 <_Balloc>
    84ac:	d8c00717 	ldw	r3,28(sp)
    84b0:	10c00515 	stw	r3,20(r2)
    84b4:	00c00044 	movi	r3,1
    84b8:	10c00415 	stw	r3,16(r2)
    84bc:	00c00244 	movi	r3,9
    84c0:	1cc0210e 	bge	r3,r19,8548 <__s2b+0xf8>
    84c4:	80eb883a 	add	r21,r16,r3
    84c8:	a829883a 	mov	r20,r21
    84cc:	84e1883a 	add	r16,r16,r19
    84d0:	a1c00007 	ldb	r7,0(r20)
    84d4:	01800284 	movi	r6,10
    84d8:	a5000044 	addi	r20,r20,1
    84dc:	100b883a 	mov	r5,r2
    84e0:	39fff404 	addi	r7,r7,-48
    84e4:	8809883a 	mov	r4,r17
    84e8:	00083080 	call	8308 <__multadd>
    84ec:	a43ff81e 	bne	r20,r16,84d0 <__s2b+0x80>
    84f0:	ace1883a 	add	r16,r21,r19
    84f4:	843ffe04 	addi	r16,r16,-8
    84f8:	9c800a0e 	bge	r19,r18,8524 <__s2b+0xd4>
    84fc:	94e5c83a 	sub	r18,r18,r19
    8500:	84a5883a 	add	r18,r16,r18
    8504:	81c00007 	ldb	r7,0(r16)
    8508:	01800284 	movi	r6,10
    850c:	84000044 	addi	r16,r16,1
    8510:	100b883a 	mov	r5,r2
    8514:	39fff404 	addi	r7,r7,-48
    8518:	8809883a 	mov	r4,r17
    851c:	00083080 	call	8308 <__multadd>
    8520:	84bff81e 	bne	r16,r18,8504 <__s2b+0xb4>
    8524:	dfc00617 	ldw	ra,24(sp)
    8528:	dd400517 	ldw	r21,20(sp)
    852c:	dd000417 	ldw	r20,16(sp)
    8530:	dcc00317 	ldw	r19,12(sp)
    8534:	dc800217 	ldw	r18,8(sp)
    8538:	dc400117 	ldw	r17,4(sp)
    853c:	dc000017 	ldw	r16,0(sp)
    8540:	dec00704 	addi	sp,sp,28
    8544:	f800283a 	ret
    8548:	84000284 	addi	r16,r16,10
    854c:	1827883a 	mov	r19,r3
    8550:	003fe906 	br	84f8 <__s2b+0xa8>

00008554 <__hi0bits>:
    8554:	20bfffec 	andhi	r2,r4,65535
    8558:	1000141e 	bne	r2,zero,85ac <__hi0bits+0x58>
    855c:	2008943a 	slli	r4,r4,16
    8560:	00800404 	movi	r2,16
    8564:	20ffc02c 	andhi	r3,r4,65280
    8568:	1800021e 	bne	r3,zero,8574 <__hi0bits+0x20>
    856c:	2008923a 	slli	r4,r4,8
    8570:	10800204 	addi	r2,r2,8
    8574:	20fc002c 	andhi	r3,r4,61440
    8578:	1800021e 	bne	r3,zero,8584 <__hi0bits+0x30>
    857c:	2008913a 	slli	r4,r4,4
    8580:	10800104 	addi	r2,r2,4
    8584:	20f0002c 	andhi	r3,r4,49152
    8588:	1800031e 	bne	r3,zero,8598 <__hi0bits+0x44>
    858c:	2109883a 	add	r4,r4,r4
    8590:	10800084 	addi	r2,r2,2
    8594:	2109883a 	add	r4,r4,r4
    8598:	20000316 	blt	r4,zero,85a8 <__hi0bits+0x54>
    859c:	2110002c 	andhi	r4,r4,16384
    85a0:	2000041e 	bne	r4,zero,85b4 <__hi0bits+0x60>
    85a4:	00800804 	movi	r2,32
    85a8:	f800283a 	ret
    85ac:	0005883a 	mov	r2,zero
    85b0:	003fec06 	br	8564 <__hi0bits+0x10>
    85b4:	10800044 	addi	r2,r2,1
    85b8:	f800283a 	ret

000085bc <__lo0bits>:
    85bc:	20c00017 	ldw	r3,0(r4)
    85c0:	188001cc 	andi	r2,r3,7
    85c4:	10000826 	beq	r2,zero,85e8 <__lo0bits+0x2c>
    85c8:	1880004c 	andi	r2,r3,1
    85cc:	1000211e 	bne	r2,zero,8654 <__lo0bits+0x98>
    85d0:	1880008c 	andi	r2,r3,2
    85d4:	1000211e 	bne	r2,zero,865c <__lo0bits+0xa0>
    85d8:	1806d0ba 	srli	r3,r3,2
    85dc:	00800084 	movi	r2,2
    85e0:	20c00015 	stw	r3,0(r4)
    85e4:	f800283a 	ret
    85e8:	18bfffcc 	andi	r2,r3,65535
    85ec:	10001326 	beq	r2,zero,863c <__lo0bits+0x80>
    85f0:	0005883a 	mov	r2,zero
    85f4:	19403fcc 	andi	r5,r3,255
    85f8:	2800021e 	bne	r5,zero,8604 <__lo0bits+0x48>
    85fc:	1806d23a 	srli	r3,r3,8
    8600:	10800204 	addi	r2,r2,8
    8604:	194003cc 	andi	r5,r3,15
    8608:	2800021e 	bne	r5,zero,8614 <__lo0bits+0x58>
    860c:	1806d13a 	srli	r3,r3,4
    8610:	10800104 	addi	r2,r2,4
    8614:	194000cc 	andi	r5,r3,3
    8618:	2800021e 	bne	r5,zero,8624 <__lo0bits+0x68>
    861c:	1806d0ba 	srli	r3,r3,2
    8620:	10800084 	addi	r2,r2,2
    8624:	1940004c 	andi	r5,r3,1
    8628:	2800081e 	bne	r5,zero,864c <__lo0bits+0x90>
    862c:	1806d07a 	srli	r3,r3,1
    8630:	1800051e 	bne	r3,zero,8648 <__lo0bits+0x8c>
    8634:	00800804 	movi	r2,32
    8638:	f800283a 	ret
    863c:	1806d43a 	srli	r3,r3,16
    8640:	00800404 	movi	r2,16
    8644:	003feb06 	br	85f4 <__lo0bits+0x38>
    8648:	10800044 	addi	r2,r2,1
    864c:	20c00015 	stw	r3,0(r4)
    8650:	f800283a 	ret
    8654:	0005883a 	mov	r2,zero
    8658:	f800283a 	ret
    865c:	1806d07a 	srli	r3,r3,1
    8660:	00800044 	movi	r2,1
    8664:	20c00015 	stw	r3,0(r4)
    8668:	f800283a 	ret

0000866c <__i2b>:
    866c:	defffd04 	addi	sp,sp,-12
    8670:	dc000015 	stw	r16,0(sp)
    8674:	04000044 	movi	r16,1
    8678:	dc400115 	stw	r17,4(sp)
    867c:	2823883a 	mov	r17,r5
    8680:	800b883a 	mov	r5,r16
    8684:	dfc00215 	stw	ra,8(sp)
    8688:	00082380 	call	8238 <_Balloc>
    868c:	14400515 	stw	r17,20(r2)
    8690:	14000415 	stw	r16,16(r2)
    8694:	dfc00217 	ldw	ra,8(sp)
    8698:	dc400117 	ldw	r17,4(sp)
    869c:	dc000017 	ldw	r16,0(sp)
    86a0:	dec00304 	addi	sp,sp,12
    86a4:	f800283a 	ret

000086a8 <__multiply>:
    86a8:	deffef04 	addi	sp,sp,-68
    86ac:	dc400815 	stw	r17,32(sp)
    86b0:	dc000715 	stw	r16,28(sp)
    86b4:	34400417 	ldw	r17,16(r6)
    86b8:	2c000417 	ldw	r16,16(r5)
    86bc:	dd800d15 	stw	r22,52(sp)
    86c0:	dc800915 	stw	r18,36(sp)
    86c4:	dfc01015 	stw	ra,64(sp)
    86c8:	df000f15 	stw	fp,60(sp)
    86cc:	ddc00e15 	stw	r23,56(sp)
    86d0:	dd400c15 	stw	r21,48(sp)
    86d4:	dd000b15 	stw	r20,44(sp)
    86d8:	dcc00a15 	stw	r19,40(sp)
    86dc:	2825883a 	mov	r18,r5
    86e0:	302d883a 	mov	r22,r6
    86e4:	8440050e 	bge	r16,r17,86fc <__multiply+0x54>
    86e8:	8007883a 	mov	r3,r16
    86ec:	3025883a 	mov	r18,r6
    86f0:	8821883a 	mov	r16,r17
    86f4:	282d883a 	mov	r22,r5
    86f8:	1823883a 	mov	r17,r3
    86fc:	90800217 	ldw	r2,8(r18)
    8700:	8447883a 	add	r3,r16,r17
    8704:	d8c00215 	stw	r3,8(sp)
    8708:	91400117 	ldw	r5,4(r18)
    870c:	10c0010e 	bge	r2,r3,8714 <__multiply+0x6c>
    8710:	29400044 	addi	r5,r5,1
    8714:	00082380 	call	8238 <_Balloc>
    8718:	d8c00217 	ldw	r3,8(sp)
    871c:	d8800615 	stw	r2,24(sp)
    8720:	18eb883a 	add	r21,r3,r3
    8724:	ad6b883a 	add	r21,r21,r21
    8728:	10c00504 	addi	r3,r2,20
    872c:	1d6b883a 	add	r21,r3,r21
    8730:	d8c00115 	stw	r3,4(sp)
    8734:	dd400315 	stw	r21,12(sp)
    8738:	1805883a 	mov	r2,r3
    873c:	1d40042e 	bgeu	r3,r21,8750 <__multiply+0xa8>
    8740:	d8c00317 	ldw	r3,12(sp)
    8744:	10000015 	stw	zero,0(r2)
    8748:	10800104 	addi	r2,r2,4
    874c:	10fffc36 	bltu	r2,r3,8740 <__multiply+0x98>
    8750:	8c63883a 	add	r17,r17,r17
    8754:	b5800504 	addi	r22,r22,20
    8758:	8c63883a 	add	r17,r17,r17
    875c:	94800504 	addi	r18,r18,20
    8760:	8421883a 	add	r16,r16,r16
    8764:	b463883a 	add	r17,r22,r17
    8768:	8421883a 	add	r16,r16,r16
    876c:	dd800015 	stw	r22,0(sp)
    8770:	dc800415 	stw	r18,16(sp)
    8774:	dc400515 	stw	r17,20(sp)
    8778:	9429883a 	add	r20,r18,r16
    877c:	b4404f2e 	bgeu	r22,r17,88bc <__multiply+0x214>
    8780:	d8c00017 	ldw	r3,0(sp)
    8784:	1c800017 	ldw	r18,0(r3)
    8788:	947fffcc 	andi	r17,r18,65535
    878c:	88001e26 	beq	r17,zero,8808 <__multiply+0x160>
    8790:	dd800117 	ldw	r22,4(sp)
    8794:	dd400417 	ldw	r21,16(sp)
    8798:	0027883a 	mov	r19,zero
    879c:	ac800017 	ldw	r18,0(r21)
    87a0:	b4000017 	ldw	r16,0(r22)
    87a4:	880b883a 	mov	r5,r17
    87a8:	913fffcc 	andi	r4,r18,65535
    87ac:	000c8ec0 	call	c8ec <__mulsi3>
    87b0:	9008d43a 	srli	r4,r18,16
    87b4:	84bfffcc 	andi	r18,r16,65535
    87b8:	1485883a 	add	r2,r2,r18
    87bc:	14e5883a 	add	r18,r2,r19
    87c0:	8020d43a 	srli	r16,r16,16
    87c4:	9026d43a 	srli	r19,r18,16
    87c8:	880b883a 	mov	r5,r17
    87cc:	000c8ec0 	call	c8ec <__mulsi3>
    87d0:	1405883a 	add	r2,r2,r16
    87d4:	14e1883a 	add	r16,r2,r19
    87d8:	90ffffcc 	andi	r3,r18,65535
    87dc:	8024943a 	slli	r18,r16,16
    87e0:	ad400104 	addi	r21,r21,4
    87e4:	b005883a 	mov	r2,r22
    87e8:	90c6b03a 	or	r3,r18,r3
    87ec:	b0c00015 	stw	r3,0(r22)
    87f0:	8026d43a 	srli	r19,r16,16
    87f4:	b5800104 	addi	r22,r22,4
    87f8:	ad3fe836 	bltu	r21,r20,879c <__multiply+0xf4>
    87fc:	d8c00017 	ldw	r3,0(sp)
    8800:	14c00115 	stw	r19,4(r2)
    8804:	1c800017 	ldw	r18,0(r3)
    8808:	9024d43a 	srli	r18,r18,16
    880c:	90002226 	beq	r18,zero,8898 <__multiply+0x1f0>
    8810:	d8c00117 	ldw	r3,4(sp)
    8814:	dd800417 	ldw	r22,16(sp)
    8818:	002f883a 	mov	r23,zero
    881c:	1f000017 	ldw	fp,0(r3)
    8820:	1823883a 	mov	r17,r3
    8824:	182b883a 	mov	r21,r3
    8828:	e021883a 	mov	r16,fp
    882c:	00000106 	br	8834 <__multiply+0x18c>
    8830:	982b883a 	mov	r21,r19
    8834:	b100000b 	ldhu	r4,0(r22)
    8838:	8020d43a 	srli	r16,r16,16
    883c:	900b883a 	mov	r5,r18
    8840:	000c8ec0 	call	c8ec <__mulsi3>
    8844:	1405883a 	add	r2,r2,r16
    8848:	15ef883a 	add	r23,r2,r23
    884c:	b804943a 	slli	r2,r23,16
    8850:	e0ffffcc 	andi	r3,fp,65535
    8854:	8c400104 	addi	r17,r17,4
    8858:	10c6b03a 	or	r3,r2,r3
    885c:	88ffff15 	stw	r3,-4(r17)
    8860:	b5800104 	addi	r22,r22,4
    8864:	b13fff17 	ldw	r4,-4(r22)
    8868:	acc00104 	addi	r19,r21,4
    886c:	900b883a 	mov	r5,r18
    8870:	2008d43a 	srli	r4,r4,16
    8874:	9c000017 	ldw	r16,0(r19)
    8878:	000c8ec0 	call	c8ec <__mulsi3>
    887c:	b806d43a 	srli	r3,r23,16
    8880:	813fffcc 	andi	r4,r16,65535
    8884:	1105883a 	add	r2,r2,r4
    8888:	10f9883a 	add	fp,r2,r3
    888c:	e02ed43a 	srli	r23,fp,16
    8890:	b53fe736 	bltu	r22,r20,8830 <__multiply+0x188>
    8894:	af000115 	stw	fp,4(r21)
    8898:	d8c00017 	ldw	r3,0(sp)
    889c:	d9000517 	ldw	r4,20(sp)
    88a0:	18c00104 	addi	r3,r3,4
    88a4:	d8c00015 	stw	r3,0(sp)
    88a8:	d8c00117 	ldw	r3,4(sp)
    88ac:	18c00104 	addi	r3,r3,4
    88b0:	d8c00115 	stw	r3,4(sp)
    88b4:	d8c00017 	ldw	r3,0(sp)
    88b8:	193fb136 	bltu	r3,r4,8780 <__multiply+0xd8>
    88bc:	d8c00217 	ldw	r3,8(sp)
    88c0:	00c00c0e 	bge	zero,r3,88f4 <__multiply+0x24c>
    88c4:	d8c00317 	ldw	r3,12(sp)
    88c8:	18bfff17 	ldw	r2,-4(r3)
    88cc:	1d7fff04 	addi	r21,r3,-4
    88d0:	10000326 	beq	r2,zero,88e0 <__multiply+0x238>
    88d4:	00000706 	br	88f4 <__multiply+0x24c>
    88d8:	a8800017 	ldw	r2,0(r21)
    88dc:	1000051e 	bne	r2,zero,88f4 <__multiply+0x24c>
    88e0:	d8c00217 	ldw	r3,8(sp)
    88e4:	ad7fff04 	addi	r21,r21,-4
    88e8:	18ffffc4 	addi	r3,r3,-1
    88ec:	d8c00215 	stw	r3,8(sp)
    88f0:	183ff91e 	bne	r3,zero,88d8 <__multiply+0x230>
    88f4:	d8c00617 	ldw	r3,24(sp)
    88f8:	d9000217 	ldw	r4,8(sp)
    88fc:	1805883a 	mov	r2,r3
    8900:	19000415 	stw	r4,16(r3)
    8904:	dfc01017 	ldw	ra,64(sp)
    8908:	df000f17 	ldw	fp,60(sp)
    890c:	ddc00e17 	ldw	r23,56(sp)
    8910:	dd800d17 	ldw	r22,52(sp)
    8914:	dd400c17 	ldw	r21,48(sp)
    8918:	dd000b17 	ldw	r20,44(sp)
    891c:	dcc00a17 	ldw	r19,40(sp)
    8920:	dc800917 	ldw	r18,36(sp)
    8924:	dc400817 	ldw	r17,32(sp)
    8928:	dc000717 	ldw	r16,28(sp)
    892c:	dec01104 	addi	sp,sp,68
    8930:	f800283a 	ret

00008934 <__pow5mult>:
    8934:	defffa04 	addi	sp,sp,-24
    8938:	dcc00315 	stw	r19,12(sp)
    893c:	dc000015 	stw	r16,0(sp)
    8940:	dfc00515 	stw	ra,20(sp)
    8944:	dd000415 	stw	r20,16(sp)
    8948:	dc800215 	stw	r18,8(sp)
    894c:	dc400115 	stw	r17,4(sp)
    8950:	308000cc 	andi	r2,r6,3
    8954:	3021883a 	mov	r16,r6
    8958:	2027883a 	mov	r19,r4
    895c:	10002f1e 	bne	r2,zero,8a1c <__pow5mult+0xe8>
    8960:	2825883a 	mov	r18,r5
    8964:	8021d0ba 	srai	r16,r16,2
    8968:	80001a26 	beq	r16,zero,89d4 <__pow5mult+0xa0>
    896c:	9c401217 	ldw	r17,72(r19)
    8970:	8800061e 	bne	r17,zero,898c <__pow5mult+0x58>
    8974:	00003406 	br	8a48 <__pow5mult+0x114>
    8978:	8021d07a 	srai	r16,r16,1
    897c:	80001526 	beq	r16,zero,89d4 <__pow5mult+0xa0>
    8980:	88800017 	ldw	r2,0(r17)
    8984:	10001c26 	beq	r2,zero,89f8 <__pow5mult+0xc4>
    8988:	1023883a 	mov	r17,r2
    898c:	8080004c 	andi	r2,r16,1
    8990:	103ff926 	beq	r2,zero,8978 <__pow5mult+0x44>
    8994:	880d883a 	mov	r6,r17
    8998:	900b883a 	mov	r5,r18
    899c:	9809883a 	mov	r4,r19
    89a0:	00086a80 	call	86a8 <__multiply>
    89a4:	90001b26 	beq	r18,zero,8a14 <__pow5mult+0xe0>
    89a8:	91000117 	ldw	r4,4(r18)
    89ac:	98c01317 	ldw	r3,76(r19)
    89b0:	8021d07a 	srai	r16,r16,1
    89b4:	2109883a 	add	r4,r4,r4
    89b8:	2109883a 	add	r4,r4,r4
    89bc:	1907883a 	add	r3,r3,r4
    89c0:	19000017 	ldw	r4,0(r3)
    89c4:	91000015 	stw	r4,0(r18)
    89c8:	1c800015 	stw	r18,0(r3)
    89cc:	1025883a 	mov	r18,r2
    89d0:	803feb1e 	bne	r16,zero,8980 <__pow5mult+0x4c>
    89d4:	9005883a 	mov	r2,r18
    89d8:	dfc00517 	ldw	ra,20(sp)
    89dc:	dd000417 	ldw	r20,16(sp)
    89e0:	dcc00317 	ldw	r19,12(sp)
    89e4:	dc800217 	ldw	r18,8(sp)
    89e8:	dc400117 	ldw	r17,4(sp)
    89ec:	dc000017 	ldw	r16,0(sp)
    89f0:	dec00604 	addi	sp,sp,24
    89f4:	f800283a 	ret
    89f8:	880d883a 	mov	r6,r17
    89fc:	880b883a 	mov	r5,r17
    8a00:	9809883a 	mov	r4,r19
    8a04:	00086a80 	call	86a8 <__multiply>
    8a08:	88800015 	stw	r2,0(r17)
    8a0c:	10000015 	stw	zero,0(r2)
    8a10:	003fdd06 	br	8988 <__pow5mult+0x54>
    8a14:	1025883a 	mov	r18,r2
    8a18:	003fd706 	br	8978 <__pow5mult+0x44>
    8a1c:	10bfffc4 	addi	r2,r2,-1
    8a20:	1085883a 	add	r2,r2,r2
    8a24:	00c00074 	movhi	r3,1
    8a28:	18c87a04 	addi	r3,r3,8680
    8a2c:	1085883a 	add	r2,r2,r2
    8a30:	1885883a 	add	r2,r3,r2
    8a34:	11800017 	ldw	r6,0(r2)
    8a38:	000f883a 	mov	r7,zero
    8a3c:	00083080 	call	8308 <__multadd>
    8a40:	1025883a 	mov	r18,r2
    8a44:	003fc706 	br	8964 <__pow5mult+0x30>
    8a48:	05000044 	movi	r20,1
    8a4c:	a00b883a 	mov	r5,r20
    8a50:	9809883a 	mov	r4,r19
    8a54:	00082380 	call	8238 <_Balloc>
    8a58:	1023883a 	mov	r17,r2
    8a5c:	00809c44 	movi	r2,625
    8a60:	88800515 	stw	r2,20(r17)
    8a64:	8d000415 	stw	r20,16(r17)
    8a68:	9c401215 	stw	r17,72(r19)
    8a6c:	88000015 	stw	zero,0(r17)
    8a70:	003fc606 	br	898c <__pow5mult+0x58>

00008a74 <__lshift>:
    8a74:	defff904 	addi	sp,sp,-28
    8a78:	dd400515 	stw	r21,20(sp)
    8a7c:	dcc00315 	stw	r19,12(sp)
    8a80:	302bd17a 	srai	r21,r6,5
    8a84:	2cc00417 	ldw	r19,16(r5)
    8a88:	28800217 	ldw	r2,8(r5)
    8a8c:	dd000415 	stw	r20,16(sp)
    8a90:	ace7883a 	add	r19,r21,r19
    8a94:	dc800215 	stw	r18,8(sp)
    8a98:	dc400115 	stw	r17,4(sp)
    8a9c:	dc000015 	stw	r16,0(sp)
    8aa0:	dfc00615 	stw	ra,24(sp)
    8aa4:	9c000044 	addi	r16,r19,1
    8aa8:	2823883a 	mov	r17,r5
    8aac:	3029883a 	mov	r20,r6
    8ab0:	2025883a 	mov	r18,r4
    8ab4:	29400117 	ldw	r5,4(r5)
    8ab8:	1400030e 	bge	r2,r16,8ac8 <__lshift+0x54>
    8abc:	1085883a 	add	r2,r2,r2
    8ac0:	29400044 	addi	r5,r5,1
    8ac4:	143ffd16 	blt	r2,r16,8abc <__lshift+0x48>
    8ac8:	9009883a 	mov	r4,r18
    8acc:	00082380 	call	8238 <_Balloc>
    8ad0:	10c00504 	addi	r3,r2,20
    8ad4:	0540070e 	bge	zero,r21,8af4 <__lshift+0x80>
    8ad8:	ad6b883a 	add	r21,r21,r21
    8adc:	ad6b883a 	add	r21,r21,r21
    8ae0:	1809883a 	mov	r4,r3
    8ae4:	1d47883a 	add	r3,r3,r21
    8ae8:	20000015 	stw	zero,0(r4)
    8aec:	21000104 	addi	r4,r4,4
    8af0:	193ffd1e 	bne	r3,r4,8ae8 <__lshift+0x74>
    8af4:	8a000417 	ldw	r8,16(r17)
    8af8:	89000504 	addi	r4,r17,20
    8afc:	a18007cc 	andi	r6,r20,31
    8b00:	4211883a 	add	r8,r8,r8
    8b04:	4211883a 	add	r8,r8,r8
    8b08:	2211883a 	add	r8,r4,r8
    8b0c:	30002326 	beq	r6,zero,8b9c <__lshift+0x128>
    8b10:	02400804 	movi	r9,32
    8b14:	4993c83a 	sub	r9,r9,r6
    8b18:	000b883a 	mov	r5,zero
    8b1c:	21c00017 	ldw	r7,0(r4)
    8b20:	1815883a 	mov	r10,r3
    8b24:	18c00104 	addi	r3,r3,4
    8b28:	398e983a 	sll	r7,r7,r6
    8b2c:	21000104 	addi	r4,r4,4
    8b30:	394ab03a 	or	r5,r7,r5
    8b34:	197fff15 	stw	r5,-4(r3)
    8b38:	217fff17 	ldw	r5,-4(r4)
    8b3c:	2a4ad83a 	srl	r5,r5,r9
    8b40:	223ff636 	bltu	r4,r8,8b1c <__lshift+0xa8>
    8b44:	51400115 	stw	r5,4(r10)
    8b48:	28001a1e 	bne	r5,zero,8bb4 <__lshift+0x140>
    8b4c:	843fffc4 	addi	r16,r16,-1
    8b50:	14000415 	stw	r16,16(r2)
    8b54:	88000826 	beq	r17,zero,8b78 <__lshift+0x104>
    8b58:	89000117 	ldw	r4,4(r17)
    8b5c:	90c01317 	ldw	r3,76(r18)
    8b60:	2109883a 	add	r4,r4,r4
    8b64:	2109883a 	add	r4,r4,r4
    8b68:	1907883a 	add	r3,r3,r4
    8b6c:	19000017 	ldw	r4,0(r3)
    8b70:	89000015 	stw	r4,0(r17)
    8b74:	1c400015 	stw	r17,0(r3)
    8b78:	dfc00617 	ldw	ra,24(sp)
    8b7c:	dd400517 	ldw	r21,20(sp)
    8b80:	dd000417 	ldw	r20,16(sp)
    8b84:	dcc00317 	ldw	r19,12(sp)
    8b88:	dc800217 	ldw	r18,8(sp)
    8b8c:	dc400117 	ldw	r17,4(sp)
    8b90:	dc000017 	ldw	r16,0(sp)
    8b94:	dec00704 	addi	sp,sp,28
    8b98:	f800283a 	ret
    8b9c:	21400017 	ldw	r5,0(r4)
    8ba0:	18c00104 	addi	r3,r3,4
    8ba4:	21000104 	addi	r4,r4,4
    8ba8:	197fff15 	stw	r5,-4(r3)
    8bac:	223ffb36 	bltu	r4,r8,8b9c <__lshift+0x128>
    8bb0:	003fe606 	br	8b4c <__lshift+0xd8>
    8bb4:	9c000084 	addi	r16,r19,2
    8bb8:	003fe406 	br	8b4c <__lshift+0xd8>

00008bbc <__mcmp>:
    8bbc:	20800417 	ldw	r2,16(r4)
    8bc0:	28c00417 	ldw	r3,16(r5)
    8bc4:	10c5c83a 	sub	r2,r2,r3
    8bc8:	1000111e 	bne	r2,zero,8c10 <__mcmp+0x54>
    8bcc:	18c7883a 	add	r3,r3,r3
    8bd0:	18c7883a 	add	r3,r3,r3
    8bd4:	21000504 	addi	r4,r4,20
    8bd8:	29400504 	addi	r5,r5,20
    8bdc:	20c5883a 	add	r2,r4,r3
    8be0:	28cb883a 	add	r5,r5,r3
    8be4:	00000106 	br	8bec <__mcmp+0x30>
    8be8:	20800a2e 	bgeu	r4,r2,8c14 <__mcmp+0x58>
    8bec:	10bfff04 	addi	r2,r2,-4
    8bf0:	297fff04 	addi	r5,r5,-4
    8bf4:	11800017 	ldw	r6,0(r2)
    8bf8:	28c00017 	ldw	r3,0(r5)
    8bfc:	30fffa26 	beq	r6,r3,8be8 <__mcmp+0x2c>
    8c00:	30c00236 	bltu	r6,r3,8c0c <__mcmp+0x50>
    8c04:	00800044 	movi	r2,1
    8c08:	f800283a 	ret
    8c0c:	00bfffc4 	movi	r2,-1
    8c10:	f800283a 	ret
    8c14:	0005883a 	mov	r2,zero
    8c18:	f800283a 	ret

00008c1c <__mdiff>:
    8c1c:	28c00417 	ldw	r3,16(r5)
    8c20:	30800417 	ldw	r2,16(r6)
    8c24:	defffa04 	addi	sp,sp,-24
    8c28:	dcc00315 	stw	r19,12(sp)
    8c2c:	dc800215 	stw	r18,8(sp)
    8c30:	dfc00515 	stw	ra,20(sp)
    8c34:	dd000415 	stw	r20,16(sp)
    8c38:	dc400115 	stw	r17,4(sp)
    8c3c:	dc000015 	stw	r16,0(sp)
    8c40:	1887c83a 	sub	r3,r3,r2
    8c44:	2825883a 	mov	r18,r5
    8c48:	3027883a 	mov	r19,r6
    8c4c:	1800141e 	bne	r3,zero,8ca0 <__mdiff+0x84>
    8c50:	1085883a 	add	r2,r2,r2
    8c54:	1085883a 	add	r2,r2,r2
    8c58:	2a000504 	addi	r8,r5,20
    8c5c:	34000504 	addi	r16,r6,20
    8c60:	4087883a 	add	r3,r8,r2
    8c64:	8085883a 	add	r2,r16,r2
    8c68:	00000106 	br	8c70 <__mdiff+0x54>
    8c6c:	40c0592e 	bgeu	r8,r3,8dd4 <__mdiff+0x1b8>
    8c70:	18ffff04 	addi	r3,r3,-4
    8c74:	10bfff04 	addi	r2,r2,-4
    8c78:	19c00017 	ldw	r7,0(r3)
    8c7c:	11400017 	ldw	r5,0(r2)
    8c80:	397ffa26 	beq	r7,r5,8c6c <__mdiff+0x50>
    8c84:	3940592e 	bgeu	r7,r5,8dec <__mdiff+0x1d0>
    8c88:	9005883a 	mov	r2,r18
    8c8c:	4023883a 	mov	r17,r8
    8c90:	9825883a 	mov	r18,r19
    8c94:	05000044 	movi	r20,1
    8c98:	1027883a 	mov	r19,r2
    8c9c:	00000406 	br	8cb0 <__mdiff+0x94>
    8ca0:	18005616 	blt	r3,zero,8dfc <__mdiff+0x1e0>
    8ca4:	34400504 	addi	r17,r6,20
    8ca8:	2c000504 	addi	r16,r5,20
    8cac:	0029883a 	mov	r20,zero
    8cb0:	91400117 	ldw	r5,4(r18)
    8cb4:	00082380 	call	8238 <_Balloc>
    8cb8:	92400417 	ldw	r9,16(r18)
    8cbc:	9b000417 	ldw	r12,16(r19)
    8cc0:	12c00504 	addi	r11,r2,20
    8cc4:	4a51883a 	add	r8,r9,r9
    8cc8:	6319883a 	add	r12,r12,r12
    8ccc:	4211883a 	add	r8,r8,r8
    8cd0:	6319883a 	add	r12,r12,r12
    8cd4:	15000315 	stw	r20,12(r2)
    8cd8:	8211883a 	add	r8,r16,r8
    8cdc:	8b19883a 	add	r12,r17,r12
    8ce0:	0007883a 	mov	r3,zero
    8ce4:	81400017 	ldw	r5,0(r16)
    8ce8:	89c00017 	ldw	r7,0(r17)
    8cec:	59800104 	addi	r6,r11,4
    8cf0:	293fffcc 	andi	r4,r5,65535
    8cf4:	20c7883a 	add	r3,r4,r3
    8cf8:	393fffcc 	andi	r4,r7,65535
    8cfc:	1909c83a 	sub	r4,r3,r4
    8d00:	280ad43a 	srli	r5,r5,16
    8d04:	380ed43a 	srli	r7,r7,16
    8d08:	2007d43a 	srai	r3,r4,16
    8d0c:	213fffcc 	andi	r4,r4,65535
    8d10:	29cbc83a 	sub	r5,r5,r7
    8d14:	28c7883a 	add	r3,r5,r3
    8d18:	180a943a 	slli	r5,r3,16
    8d1c:	8c400104 	addi	r17,r17,4
    8d20:	84000104 	addi	r16,r16,4
    8d24:	2908b03a 	or	r4,r5,r4
    8d28:	59000015 	stw	r4,0(r11)
    8d2c:	1807d43a 	srai	r3,r3,16
    8d30:	3015883a 	mov	r10,r6
    8d34:	3017883a 	mov	r11,r6
    8d38:	8b3fea36 	bltu	r17,r12,8ce4 <__mdiff+0xc8>
    8d3c:	8200162e 	bgeu	r16,r8,8d98 <__mdiff+0x17c>
    8d40:	8017883a 	mov	r11,r16
    8d44:	59400017 	ldw	r5,0(r11)
    8d48:	31800104 	addi	r6,r6,4
    8d4c:	5ac00104 	addi	r11,r11,4
    8d50:	293fffcc 	andi	r4,r5,65535
    8d54:	20c7883a 	add	r3,r4,r3
    8d58:	280ed43a 	srli	r7,r5,16
    8d5c:	180bd43a 	srai	r5,r3,16
    8d60:	193fffcc 	andi	r4,r3,65535
    8d64:	3947883a 	add	r3,r7,r5
    8d68:	180a943a 	slli	r5,r3,16
    8d6c:	1807d43a 	srai	r3,r3,16
    8d70:	2908b03a 	or	r4,r5,r4
    8d74:	313fff15 	stw	r4,-4(r6)
    8d78:	5a3ff236 	bltu	r11,r8,8d44 <__mdiff+0x128>
    8d7c:	0406303a 	nor	r3,zero,r16
    8d80:	1a07883a 	add	r3,r3,r8
    8d84:	1806d0ba 	srli	r3,r3,2
    8d88:	18c00044 	addi	r3,r3,1
    8d8c:	18c7883a 	add	r3,r3,r3
    8d90:	18c7883a 	add	r3,r3,r3
    8d94:	50d5883a 	add	r10,r10,r3
    8d98:	50ffff04 	addi	r3,r10,-4
    8d9c:	2000041e 	bne	r4,zero,8db0 <__mdiff+0x194>
    8da0:	18ffff04 	addi	r3,r3,-4
    8da4:	19000017 	ldw	r4,0(r3)
    8da8:	4a7fffc4 	addi	r9,r9,-1
    8dac:	203ffc26 	beq	r4,zero,8da0 <__mdiff+0x184>
    8db0:	12400415 	stw	r9,16(r2)
    8db4:	dfc00517 	ldw	ra,20(sp)
    8db8:	dd000417 	ldw	r20,16(sp)
    8dbc:	dcc00317 	ldw	r19,12(sp)
    8dc0:	dc800217 	ldw	r18,8(sp)
    8dc4:	dc400117 	ldw	r17,4(sp)
    8dc8:	dc000017 	ldw	r16,0(sp)
    8dcc:	dec00604 	addi	sp,sp,24
    8dd0:	f800283a 	ret
    8dd4:	000b883a 	mov	r5,zero
    8dd8:	00082380 	call	8238 <_Balloc>
    8ddc:	00c00044 	movi	r3,1
    8de0:	10c00415 	stw	r3,16(r2)
    8de4:	10000515 	stw	zero,20(r2)
    8de8:	003ff206 	br	8db4 <__mdiff+0x198>
    8dec:	8023883a 	mov	r17,r16
    8df0:	0029883a 	mov	r20,zero
    8df4:	4021883a 	mov	r16,r8
    8df8:	003fad06 	br	8cb0 <__mdiff+0x94>
    8dfc:	9005883a 	mov	r2,r18
    8e00:	94400504 	addi	r17,r18,20
    8e04:	9c000504 	addi	r16,r19,20
    8e08:	9825883a 	mov	r18,r19
    8e0c:	05000044 	movi	r20,1
    8e10:	1027883a 	mov	r19,r2
    8e14:	003fa606 	br	8cb0 <__mdiff+0x94>

00008e18 <__ulp>:
    8e18:	295ffc2c 	andhi	r5,r5,32752
    8e1c:	00bf3034 	movhi	r2,64704
    8e20:	2887883a 	add	r3,r5,r2
    8e24:	00c0020e 	bge	zero,r3,8e30 <__ulp+0x18>
    8e28:	0005883a 	mov	r2,zero
    8e2c:	f800283a 	ret
    8e30:	00c7c83a 	sub	r3,zero,r3
    8e34:	1807d53a 	srai	r3,r3,20
    8e38:	008004c4 	movi	r2,19
    8e3c:	10c00b0e 	bge	r2,r3,8e6c <__ulp+0x54>
    8e40:	18bffb04 	addi	r2,r3,-20
    8e44:	01000784 	movi	r4,30
    8e48:	0007883a 	mov	r3,zero
    8e4c:	20800516 	blt	r4,r2,8e64 <__ulp+0x4c>
    8e50:	010007c4 	movi	r4,31
    8e54:	2089c83a 	sub	r4,r4,r2
    8e58:	00800044 	movi	r2,1
    8e5c:	1104983a 	sll	r2,r2,r4
    8e60:	f800283a 	ret
    8e64:	00800044 	movi	r2,1
    8e68:	f800283a 	ret
    8e6c:	01400234 	movhi	r5,8
    8e70:	28c7d83a 	sra	r3,r5,r3
    8e74:	0005883a 	mov	r2,zero
    8e78:	f800283a 	ret

00008e7c <__b2d>:
    8e7c:	defffa04 	addi	sp,sp,-24
    8e80:	dc000015 	stw	r16,0(sp)
    8e84:	24000417 	ldw	r16,16(r4)
    8e88:	dc400115 	stw	r17,4(sp)
    8e8c:	24400504 	addi	r17,r4,20
    8e90:	8421883a 	add	r16,r16,r16
    8e94:	8421883a 	add	r16,r16,r16
    8e98:	8c21883a 	add	r16,r17,r16
    8e9c:	dc800215 	stw	r18,8(sp)
    8ea0:	84bfff17 	ldw	r18,-4(r16)
    8ea4:	dd000415 	stw	r20,16(sp)
    8ea8:	dcc00315 	stw	r19,12(sp)
    8eac:	9009883a 	mov	r4,r18
    8eb0:	2829883a 	mov	r20,r5
    8eb4:	dfc00515 	stw	ra,20(sp)
    8eb8:	00085540 	call	8554 <__hi0bits>
    8ebc:	00c00804 	movi	r3,32
    8ec0:	1889c83a 	sub	r4,r3,r2
    8ec4:	a1000015 	stw	r4,0(r20)
    8ec8:	01000284 	movi	r4,10
    8ecc:	84ffff04 	addi	r19,r16,-4
    8ed0:	20801216 	blt	r4,r2,8f1c <__b2d+0xa0>
    8ed4:	018002c4 	movi	r6,11
    8ed8:	308dc83a 	sub	r6,r6,r2
    8edc:	9186d83a 	srl	r3,r18,r6
    8ee0:	18cffc34 	orhi	r3,r3,16368
    8ee4:	8cc0212e 	bgeu	r17,r19,8f6c <__b2d+0xf0>
    8ee8:	813ffe17 	ldw	r4,-8(r16)
    8eec:	218cd83a 	srl	r6,r4,r6
    8ef0:	10800544 	addi	r2,r2,21
    8ef4:	9084983a 	sll	r2,r18,r2
    8ef8:	1184b03a 	or	r2,r2,r6
    8efc:	dfc00517 	ldw	ra,20(sp)
    8f00:	dd000417 	ldw	r20,16(sp)
    8f04:	dcc00317 	ldw	r19,12(sp)
    8f08:	dc800217 	ldw	r18,8(sp)
    8f0c:	dc400117 	ldw	r17,4(sp)
    8f10:	dc000017 	ldw	r16,0(sp)
    8f14:	dec00604 	addi	sp,sp,24
    8f18:	f800283a 	ret
    8f1c:	8cc00f2e 	bgeu	r17,r19,8f5c <__b2d+0xe0>
    8f20:	117ffd44 	addi	r5,r2,-11
    8f24:	80bffe17 	ldw	r2,-8(r16)
    8f28:	28000e26 	beq	r5,zero,8f64 <__b2d+0xe8>
    8f2c:	1949c83a 	sub	r4,r3,r5
    8f30:	9164983a 	sll	r18,r18,r5
    8f34:	1106d83a 	srl	r3,r2,r4
    8f38:	81bffe04 	addi	r6,r16,-8
    8f3c:	948ffc34 	orhi	r18,r18,16368
    8f40:	90c6b03a 	or	r3,r18,r3
    8f44:	89800e2e 	bgeu	r17,r6,8f80 <__b2d+0x104>
    8f48:	81bffd17 	ldw	r6,-12(r16)
    8f4c:	1144983a 	sll	r2,r2,r5
    8f50:	310ad83a 	srl	r5,r6,r4
    8f54:	2884b03a 	or	r2,r5,r2
    8f58:	003fe806 	br	8efc <__b2d+0x80>
    8f5c:	10bffd44 	addi	r2,r2,-11
    8f60:	1000041e 	bne	r2,zero,8f74 <__b2d+0xf8>
    8f64:	90cffc34 	orhi	r3,r18,16368
    8f68:	003fe406 	br	8efc <__b2d+0x80>
    8f6c:	000d883a 	mov	r6,zero
    8f70:	003fdf06 	br	8ef0 <__b2d+0x74>
    8f74:	90a4983a 	sll	r18,r18,r2
    8f78:	0005883a 	mov	r2,zero
    8f7c:	003ff906 	br	8f64 <__b2d+0xe8>
    8f80:	1144983a 	sll	r2,r2,r5
    8f84:	003fdd06 	br	8efc <__b2d+0x80>

00008f88 <__d2b>:
    8f88:	defff804 	addi	sp,sp,-32
    8f8c:	dc000215 	stw	r16,8(sp)
    8f90:	3021883a 	mov	r16,r6
    8f94:	dc400315 	stw	r17,12(sp)
    8f98:	8022907a 	slli	r17,r16,1
    8f9c:	dd000615 	stw	r20,24(sp)
    8fa0:	2829883a 	mov	r20,r5
    8fa4:	01400044 	movi	r5,1
    8fa8:	dcc00515 	stw	r19,20(sp)
    8fac:	dc800415 	stw	r18,16(sp)
    8fb0:	dfc00715 	stw	ra,28(sp)
    8fb4:	3825883a 	mov	r18,r7
    8fb8:	8822d57a 	srli	r17,r17,21
    8fbc:	00082380 	call	8238 <_Balloc>
    8fc0:	1027883a 	mov	r19,r2
    8fc4:	00800434 	movhi	r2,16
    8fc8:	10bfffc4 	addi	r2,r2,-1
    8fcc:	808c703a 	and	r6,r16,r2
    8fd0:	88000126 	beq	r17,zero,8fd8 <__d2b+0x50>
    8fd4:	31800434 	orhi	r6,r6,16
    8fd8:	d9800015 	stw	r6,0(sp)
    8fdc:	a0002426 	beq	r20,zero,9070 <__d2b+0xe8>
    8fe0:	d9000104 	addi	r4,sp,4
    8fe4:	dd000115 	stw	r20,4(sp)
    8fe8:	00085bc0 	call	85bc <__lo0bits>
    8fec:	d8c00017 	ldw	r3,0(sp)
    8ff0:	10002f1e 	bne	r2,zero,90b0 <__d2b+0x128>
    8ff4:	d9000117 	ldw	r4,4(sp)
    8ff8:	99000515 	stw	r4,20(r19)
    8ffc:	1821003a 	cmpeq	r16,r3,zero
    9000:	01000084 	movi	r4,2
    9004:	2421c83a 	sub	r16,r4,r16
    9008:	98c00615 	stw	r3,24(r19)
    900c:	9c000415 	stw	r16,16(r19)
    9010:	88001f1e 	bne	r17,zero,9090 <__d2b+0x108>
    9014:	10bef384 	addi	r2,r2,-1074
    9018:	90800015 	stw	r2,0(r18)
    901c:	00900034 	movhi	r2,16384
    9020:	10bfffc4 	addi	r2,r2,-1
    9024:	8085883a 	add	r2,r16,r2
    9028:	1085883a 	add	r2,r2,r2
    902c:	1085883a 	add	r2,r2,r2
    9030:	9885883a 	add	r2,r19,r2
    9034:	11000517 	ldw	r4,20(r2)
    9038:	8020917a 	slli	r16,r16,5
    903c:	00085540 	call	8554 <__hi0bits>
    9040:	d8c00817 	ldw	r3,32(sp)
    9044:	8085c83a 	sub	r2,r16,r2
    9048:	18800015 	stw	r2,0(r3)
    904c:	9805883a 	mov	r2,r19
    9050:	dfc00717 	ldw	ra,28(sp)
    9054:	dd000617 	ldw	r20,24(sp)
    9058:	dcc00517 	ldw	r19,20(sp)
    905c:	dc800417 	ldw	r18,16(sp)
    9060:	dc400317 	ldw	r17,12(sp)
    9064:	dc000217 	ldw	r16,8(sp)
    9068:	dec00804 	addi	sp,sp,32
    906c:	f800283a 	ret
    9070:	d809883a 	mov	r4,sp
    9074:	00085bc0 	call	85bc <__lo0bits>
    9078:	d8c00017 	ldw	r3,0(sp)
    907c:	04000044 	movi	r16,1
    9080:	9c000415 	stw	r16,16(r19)
    9084:	98c00515 	stw	r3,20(r19)
    9088:	10800804 	addi	r2,r2,32
    908c:	883fe126 	beq	r17,zero,9014 <__d2b+0x8c>
    9090:	00c00d44 	movi	r3,53
    9094:	8c7ef344 	addi	r17,r17,-1075
    9098:	88a3883a 	add	r17,r17,r2
    909c:	1885c83a 	sub	r2,r3,r2
    90a0:	d8c00817 	ldw	r3,32(sp)
    90a4:	94400015 	stw	r17,0(r18)
    90a8:	18800015 	stw	r2,0(r3)
    90ac:	003fe706 	br	904c <__d2b+0xc4>
    90b0:	01000804 	movi	r4,32
    90b4:	2089c83a 	sub	r4,r4,r2
    90b8:	1908983a 	sll	r4,r3,r4
    90bc:	d9400117 	ldw	r5,4(sp)
    90c0:	1886d83a 	srl	r3,r3,r2
    90c4:	2148b03a 	or	r4,r4,r5
    90c8:	99000515 	stw	r4,20(r19)
    90cc:	d8c00015 	stw	r3,0(sp)
    90d0:	003fca06 	br	8ffc <__d2b+0x74>

000090d4 <__ratio>:
    90d4:	defff904 	addi	sp,sp,-28
    90d8:	dc400315 	stw	r17,12(sp)
    90dc:	2823883a 	mov	r17,r5
    90e0:	d9400104 	addi	r5,sp,4
    90e4:	dfc00615 	stw	ra,24(sp)
    90e8:	dcc00515 	stw	r19,20(sp)
    90ec:	dc800415 	stw	r18,16(sp)
    90f0:	2027883a 	mov	r19,r4
    90f4:	dc000215 	stw	r16,8(sp)
    90f8:	0008e7c0 	call	8e7c <__b2d>
    90fc:	d80b883a 	mov	r5,sp
    9100:	8809883a 	mov	r4,r17
    9104:	1025883a 	mov	r18,r2
    9108:	1821883a 	mov	r16,r3
    910c:	0008e7c0 	call	8e7c <__b2d>
    9110:	8a000417 	ldw	r8,16(r17)
    9114:	99000417 	ldw	r4,16(r19)
    9118:	d9400117 	ldw	r5,4(sp)
    911c:	2209c83a 	sub	r4,r4,r8
    9120:	2010917a 	slli	r8,r4,5
    9124:	d9000017 	ldw	r4,0(sp)
    9128:	2909c83a 	sub	r4,r5,r4
    912c:	4109883a 	add	r4,r8,r4
    9130:	01000e0e 	bge	zero,r4,916c <__ratio+0x98>
    9134:	2008953a 	slli	r4,r4,20
    9138:	2421883a 	add	r16,r4,r16
    913c:	100d883a 	mov	r6,r2
    9140:	180f883a 	mov	r7,r3
    9144:	9009883a 	mov	r4,r18
    9148:	800b883a 	mov	r5,r16
    914c:	000d1c00 	call	d1c0 <__divdf3>
    9150:	dfc00617 	ldw	ra,24(sp)
    9154:	dcc00517 	ldw	r19,20(sp)
    9158:	dc800417 	ldw	r18,16(sp)
    915c:	dc400317 	ldw	r17,12(sp)
    9160:	dc000217 	ldw	r16,8(sp)
    9164:	dec00704 	addi	sp,sp,28
    9168:	f800283a 	ret
    916c:	2008953a 	slli	r4,r4,20
    9170:	1907c83a 	sub	r3,r3,r4
    9174:	003ff106 	br	913c <__ratio+0x68>

00009178 <_mprec_log10>:
    9178:	defffe04 	addi	sp,sp,-8
    917c:	dc000015 	stw	r16,0(sp)
    9180:	dfc00115 	stw	ra,4(sp)
    9184:	008005c4 	movi	r2,23
    9188:	2021883a 	mov	r16,r4
    918c:	11000d0e 	bge	r2,r4,91c4 <_mprec_log10+0x4c>
    9190:	0005883a 	mov	r2,zero
    9194:	00cffc34 	movhi	r3,16368
    9198:	843fffc4 	addi	r16,r16,-1
    919c:	000d883a 	mov	r6,zero
    91a0:	01d00934 	movhi	r7,16420
    91a4:	1009883a 	mov	r4,r2
    91a8:	180b883a 	mov	r5,r3
    91ac:	000dde80 	call	dde8 <__muldf3>
    91b0:	803ff91e 	bne	r16,zero,9198 <_mprec_log10+0x20>
    91b4:	dfc00117 	ldw	ra,4(sp)
    91b8:	dc000017 	ldw	r16,0(sp)
    91bc:	dec00204 	addi	sp,sp,8
    91c0:	f800283a 	ret
    91c4:	202090fa 	slli	r16,r4,3
    91c8:	00800074 	movhi	r2,1
    91cc:	10889104 	addi	r2,r2,8772
    91d0:	1421883a 	add	r16,r2,r16
    91d4:	80800017 	ldw	r2,0(r16)
    91d8:	80c00117 	ldw	r3,4(r16)
    91dc:	dfc00117 	ldw	ra,4(sp)
    91e0:	dc000017 	ldw	r16,0(sp)
    91e4:	dec00204 	addi	sp,sp,8
    91e8:	f800283a 	ret

000091ec <__copybits>:
    91ec:	297fffc4 	addi	r5,r5,-1
    91f0:	280fd17a 	srai	r7,r5,5
    91f4:	30c00417 	ldw	r3,16(r6)
    91f8:	30800504 	addi	r2,r6,20
    91fc:	39c00044 	addi	r7,r7,1
    9200:	18c7883a 	add	r3,r3,r3
    9204:	39cf883a 	add	r7,r7,r7
    9208:	18c7883a 	add	r3,r3,r3
    920c:	39cf883a 	add	r7,r7,r7
    9210:	10c7883a 	add	r3,r2,r3
    9214:	21cf883a 	add	r7,r4,r7
    9218:	10c00d2e 	bgeu	r2,r3,9250 <__copybits+0x64>
    921c:	200b883a 	mov	r5,r4
    9220:	12000017 	ldw	r8,0(r2)
    9224:	29400104 	addi	r5,r5,4
    9228:	10800104 	addi	r2,r2,4
    922c:	2a3fff15 	stw	r8,-4(r5)
    9230:	10fffb36 	bltu	r2,r3,9220 <__copybits+0x34>
    9234:	1985c83a 	sub	r2,r3,r6
    9238:	10bffac4 	addi	r2,r2,-21
    923c:	1004d0ba 	srli	r2,r2,2
    9240:	10800044 	addi	r2,r2,1
    9244:	1085883a 	add	r2,r2,r2
    9248:	1085883a 	add	r2,r2,r2
    924c:	2089883a 	add	r4,r4,r2
    9250:	21c0032e 	bgeu	r4,r7,9260 <__copybits+0x74>
    9254:	20000015 	stw	zero,0(r4)
    9258:	21000104 	addi	r4,r4,4
    925c:	21fffd36 	bltu	r4,r7,9254 <__copybits+0x68>
    9260:	f800283a 	ret

00009264 <__any_on>:
    9264:	20c00417 	ldw	r3,16(r4)
    9268:	2805d17a 	srai	r2,r5,5
    926c:	21000504 	addi	r4,r4,20
    9270:	18800d0e 	bge	r3,r2,92a8 <__any_on+0x44>
    9274:	18c7883a 	add	r3,r3,r3
    9278:	18c7883a 	add	r3,r3,r3
    927c:	20c7883a 	add	r3,r4,r3
    9280:	20c0192e 	bgeu	r4,r3,92e8 <__any_on+0x84>
    9284:	18bfff17 	ldw	r2,-4(r3)
    9288:	18ffff04 	addi	r3,r3,-4
    928c:	1000041e 	bne	r2,zero,92a0 <__any_on+0x3c>
    9290:	20c0142e 	bgeu	r4,r3,92e4 <__any_on+0x80>
    9294:	18ffff04 	addi	r3,r3,-4
    9298:	19400017 	ldw	r5,0(r3)
    929c:	283ffc26 	beq	r5,zero,9290 <__any_on+0x2c>
    92a0:	00800044 	movi	r2,1
    92a4:	f800283a 	ret
    92a8:	10c00a0e 	bge	r2,r3,92d4 <__any_on+0x70>
    92ac:	1085883a 	add	r2,r2,r2
    92b0:	1085883a 	add	r2,r2,r2
    92b4:	294007cc 	andi	r5,r5,31
    92b8:	2087883a 	add	r3,r4,r2
    92bc:	283ff026 	beq	r5,zero,9280 <__any_on+0x1c>
    92c0:	19800017 	ldw	r6,0(r3)
    92c4:	3144d83a 	srl	r2,r6,r5
    92c8:	114a983a 	sll	r5,r2,r5
    92cc:	317ff41e 	bne	r6,r5,92a0 <__any_on+0x3c>
    92d0:	003feb06 	br	9280 <__any_on+0x1c>
    92d4:	1085883a 	add	r2,r2,r2
    92d8:	1085883a 	add	r2,r2,r2
    92dc:	2087883a 	add	r3,r4,r2
    92e0:	003fe706 	br	9280 <__any_on+0x1c>
    92e4:	f800283a 	ret
    92e8:	0005883a 	mov	r2,zero
    92ec:	f800283a 	ret

000092f0 <_realloc_r>:
    92f0:	defff604 	addi	sp,sp,-40
    92f4:	dc800215 	stw	r18,8(sp)
    92f8:	dfc00915 	stw	ra,36(sp)
    92fc:	df000815 	stw	fp,32(sp)
    9300:	ddc00715 	stw	r23,28(sp)
    9304:	dd800615 	stw	r22,24(sp)
    9308:	dd400515 	stw	r21,20(sp)
    930c:	dd000415 	stw	r20,16(sp)
    9310:	dcc00315 	stw	r19,12(sp)
    9314:	dc400115 	stw	r17,4(sp)
    9318:	dc000015 	stw	r16,0(sp)
    931c:	3025883a 	mov	r18,r6
    9320:	2800b726 	beq	r5,zero,9600 <_realloc_r+0x310>
    9324:	282b883a 	mov	r21,r5
    9328:	2029883a 	mov	r20,r4
    932c:	000f7540 	call	f754 <__malloc_lock>
    9330:	a8bfff17 	ldw	r2,-4(r21)
    9334:	043fff04 	movi	r16,-4
    9338:	90c002c4 	addi	r3,r18,11
    933c:	01000584 	movi	r4,22
    9340:	acfffe04 	addi	r19,r21,-8
    9344:	1420703a 	and	r16,r2,r16
    9348:	20c0332e 	bgeu	r4,r3,9418 <_realloc_r+0x128>
    934c:	047ffe04 	movi	r17,-8
    9350:	1c62703a 	and	r17,r3,r17
    9354:	8807883a 	mov	r3,r17
    9358:	88005816 	blt	r17,zero,94bc <_realloc_r+0x1cc>
    935c:	8c805736 	bltu	r17,r18,94bc <_realloc_r+0x1cc>
    9360:	80c0300e 	bge	r16,r3,9424 <_realloc_r+0x134>
    9364:	07000074 	movhi	fp,1
    9368:	e70a3f04 	addi	fp,fp,10492
    936c:	e1c00217 	ldw	r7,8(fp)
    9370:	9c09883a 	add	r4,r19,r16
    9374:	22000117 	ldw	r8,4(r4)
    9378:	21c06326 	beq	r4,r7,9508 <_realloc_r+0x218>
    937c:	017fff84 	movi	r5,-2
    9380:	414a703a 	and	r5,r8,r5
    9384:	214b883a 	add	r5,r4,r5
    9388:	29800117 	ldw	r6,4(r5)
    938c:	3180004c 	andi	r6,r6,1
    9390:	30003f26 	beq	r6,zero,9490 <_realloc_r+0x1a0>
    9394:	1080004c 	andi	r2,r2,1
    9398:	10008326 	beq	r2,zero,95a8 <_realloc_r+0x2b8>
    939c:	900b883a 	mov	r5,r18
    93a0:	a009883a 	mov	r4,r20
    93a4:	000757c0 	call	757c <_malloc_r>
    93a8:	1025883a 	mov	r18,r2
    93ac:	10011e26 	beq	r2,zero,9828 <_realloc_r+0x538>
    93b0:	a93fff17 	ldw	r4,-4(r21)
    93b4:	10fffe04 	addi	r3,r2,-8
    93b8:	00bfff84 	movi	r2,-2
    93bc:	2084703a 	and	r2,r4,r2
    93c0:	9885883a 	add	r2,r19,r2
    93c4:	1880ee26 	beq	r3,r2,9780 <_realloc_r+0x490>
    93c8:	81bfff04 	addi	r6,r16,-4
    93cc:	00800904 	movi	r2,36
    93d0:	1180b836 	bltu	r2,r6,96b4 <_realloc_r+0x3c4>
    93d4:	00c004c4 	movi	r3,19
    93d8:	19809636 	bltu	r3,r6,9634 <_realloc_r+0x344>
    93dc:	9005883a 	mov	r2,r18
    93e0:	a807883a 	mov	r3,r21
    93e4:	19000017 	ldw	r4,0(r3)
    93e8:	11000015 	stw	r4,0(r2)
    93ec:	19000117 	ldw	r4,4(r3)
    93f0:	11000115 	stw	r4,4(r2)
    93f4:	18c00217 	ldw	r3,8(r3)
    93f8:	10c00215 	stw	r3,8(r2)
    93fc:	a80b883a 	mov	r5,r21
    9400:	a009883a 	mov	r4,r20
    9404:	00069840 	call	6984 <_free_r>
    9408:	a009883a 	mov	r4,r20
    940c:	000f7780 	call	f778 <__malloc_unlock>
    9410:	9005883a 	mov	r2,r18
    9414:	00001206 	br	9460 <_realloc_r+0x170>
    9418:	00c00404 	movi	r3,16
    941c:	1823883a 	mov	r17,r3
    9420:	003fce06 	br	935c <_realloc_r+0x6c>
    9424:	a825883a 	mov	r18,r21
    9428:	8445c83a 	sub	r2,r16,r17
    942c:	00c003c4 	movi	r3,15
    9430:	18802636 	bltu	r3,r2,94cc <_realloc_r+0x1dc>
    9434:	99800117 	ldw	r6,4(r19)
    9438:	9c07883a 	add	r3,r19,r16
    943c:	3180004c 	andi	r6,r6,1
    9440:	3420b03a 	or	r16,r6,r16
    9444:	9c000115 	stw	r16,4(r19)
    9448:	18800117 	ldw	r2,4(r3)
    944c:	10800054 	ori	r2,r2,1
    9450:	18800115 	stw	r2,4(r3)
    9454:	a009883a 	mov	r4,r20
    9458:	000f7780 	call	f778 <__malloc_unlock>
    945c:	9005883a 	mov	r2,r18
    9460:	dfc00917 	ldw	ra,36(sp)
    9464:	df000817 	ldw	fp,32(sp)
    9468:	ddc00717 	ldw	r23,28(sp)
    946c:	dd800617 	ldw	r22,24(sp)
    9470:	dd400517 	ldw	r21,20(sp)
    9474:	dd000417 	ldw	r20,16(sp)
    9478:	dcc00317 	ldw	r19,12(sp)
    947c:	dc800217 	ldw	r18,8(sp)
    9480:	dc400117 	ldw	r17,4(sp)
    9484:	dc000017 	ldw	r16,0(sp)
    9488:	dec00a04 	addi	sp,sp,40
    948c:	f800283a 	ret
    9490:	017fff04 	movi	r5,-4
    9494:	414a703a 	and	r5,r8,r5
    9498:	814d883a 	add	r6,r16,r5
    949c:	30c01f16 	blt	r6,r3,951c <_realloc_r+0x22c>
    94a0:	20800317 	ldw	r2,12(r4)
    94a4:	20c00217 	ldw	r3,8(r4)
    94a8:	a825883a 	mov	r18,r21
    94ac:	3021883a 	mov	r16,r6
    94b0:	18800315 	stw	r2,12(r3)
    94b4:	10c00215 	stw	r3,8(r2)
    94b8:	003fdb06 	br	9428 <_realloc_r+0x138>
    94bc:	00800304 	movi	r2,12
    94c0:	a0800015 	stw	r2,0(r20)
    94c4:	0005883a 	mov	r2,zero
    94c8:	003fe506 	br	9460 <_realloc_r+0x170>
    94cc:	98c00117 	ldw	r3,4(r19)
    94d0:	9c4b883a 	add	r5,r19,r17
    94d4:	11000054 	ori	r4,r2,1
    94d8:	18c0004c 	andi	r3,r3,1
    94dc:	1c62b03a 	or	r17,r3,r17
    94e0:	9c400115 	stw	r17,4(r19)
    94e4:	29000115 	stw	r4,4(r5)
    94e8:	2885883a 	add	r2,r5,r2
    94ec:	10c00117 	ldw	r3,4(r2)
    94f0:	29400204 	addi	r5,r5,8
    94f4:	a009883a 	mov	r4,r20
    94f8:	18c00054 	ori	r3,r3,1
    94fc:	10c00115 	stw	r3,4(r2)
    9500:	00069840 	call	6984 <_free_r>
    9504:	003fd306 	br	9454 <_realloc_r+0x164>
    9508:	017fff04 	movi	r5,-4
    950c:	414a703a 	and	r5,r8,r5
    9510:	89800404 	addi	r6,r17,16
    9514:	8151883a 	add	r8,r16,r5
    9518:	4180590e 	bge	r8,r6,9680 <_realloc_r+0x390>
    951c:	1080004c 	andi	r2,r2,1
    9520:	103f9e1e 	bne	r2,zero,939c <_realloc_r+0xac>
    9524:	adbffe17 	ldw	r22,-8(r21)
    9528:	00bfff04 	movi	r2,-4
    952c:	9dadc83a 	sub	r22,r19,r22
    9530:	b1800117 	ldw	r6,4(r22)
    9534:	3084703a 	and	r2,r6,r2
    9538:	20002026 	beq	r4,zero,95bc <_realloc_r+0x2cc>
    953c:	80af883a 	add	r23,r16,r2
    9540:	b96f883a 	add	r23,r23,r5
    9544:	21c05f26 	beq	r4,r7,96c4 <_realloc_r+0x3d4>
    9548:	b8c01c16 	blt	r23,r3,95bc <_realloc_r+0x2cc>
    954c:	20800317 	ldw	r2,12(r4)
    9550:	20c00217 	ldw	r3,8(r4)
    9554:	81bfff04 	addi	r6,r16,-4
    9558:	01000904 	movi	r4,36
    955c:	18800315 	stw	r2,12(r3)
    9560:	10c00215 	stw	r3,8(r2)
    9564:	b0c00217 	ldw	r3,8(r22)
    9568:	b0800317 	ldw	r2,12(r22)
    956c:	b4800204 	addi	r18,r22,8
    9570:	18800315 	stw	r2,12(r3)
    9574:	10c00215 	stw	r3,8(r2)
    9578:	21801b36 	bltu	r4,r6,95e8 <_realloc_r+0x2f8>
    957c:	008004c4 	movi	r2,19
    9580:	1180352e 	bgeu	r2,r6,9658 <_realloc_r+0x368>
    9584:	a8800017 	ldw	r2,0(r21)
    9588:	b0800215 	stw	r2,8(r22)
    958c:	a8800117 	ldw	r2,4(r21)
    9590:	b0800315 	stw	r2,12(r22)
    9594:	008006c4 	movi	r2,27
    9598:	11807f36 	bltu	r2,r6,9798 <_realloc_r+0x4a8>
    959c:	b0800404 	addi	r2,r22,16
    95a0:	ad400204 	addi	r21,r21,8
    95a4:	00002d06 	br	965c <_realloc_r+0x36c>
    95a8:	adbffe17 	ldw	r22,-8(r21)
    95ac:	00bfff04 	movi	r2,-4
    95b0:	9dadc83a 	sub	r22,r19,r22
    95b4:	b1000117 	ldw	r4,4(r22)
    95b8:	2084703a 	and	r2,r4,r2
    95bc:	b03f7726 	beq	r22,zero,939c <_realloc_r+0xac>
    95c0:	80af883a 	add	r23,r16,r2
    95c4:	b8ff7516 	blt	r23,r3,939c <_realloc_r+0xac>
    95c8:	b0800317 	ldw	r2,12(r22)
    95cc:	b0c00217 	ldw	r3,8(r22)
    95d0:	81bfff04 	addi	r6,r16,-4
    95d4:	01000904 	movi	r4,36
    95d8:	18800315 	stw	r2,12(r3)
    95dc:	10c00215 	stw	r3,8(r2)
    95e0:	b4800204 	addi	r18,r22,8
    95e4:	21bfe52e 	bgeu	r4,r6,957c <_realloc_r+0x28c>
    95e8:	a80b883a 	mov	r5,r21
    95ec:	9009883a 	mov	r4,r18
    95f0:	0007fb40 	call	7fb4 <memmove>
    95f4:	b821883a 	mov	r16,r23
    95f8:	b027883a 	mov	r19,r22
    95fc:	003f8a06 	br	9428 <_realloc_r+0x138>
    9600:	300b883a 	mov	r5,r6
    9604:	dfc00917 	ldw	ra,36(sp)
    9608:	df000817 	ldw	fp,32(sp)
    960c:	ddc00717 	ldw	r23,28(sp)
    9610:	dd800617 	ldw	r22,24(sp)
    9614:	dd400517 	ldw	r21,20(sp)
    9618:	dd000417 	ldw	r20,16(sp)
    961c:	dcc00317 	ldw	r19,12(sp)
    9620:	dc800217 	ldw	r18,8(sp)
    9624:	dc400117 	ldw	r17,4(sp)
    9628:	dc000017 	ldw	r16,0(sp)
    962c:	dec00a04 	addi	sp,sp,40
    9630:	000757c1 	jmpi	757c <_malloc_r>
    9634:	a8c00017 	ldw	r3,0(r21)
    9638:	90c00015 	stw	r3,0(r18)
    963c:	a8c00117 	ldw	r3,4(r21)
    9640:	90c00115 	stw	r3,4(r18)
    9644:	00c006c4 	movi	r3,27
    9648:	19804536 	bltu	r3,r6,9760 <_realloc_r+0x470>
    964c:	90800204 	addi	r2,r18,8
    9650:	a8c00204 	addi	r3,r21,8
    9654:	003f6306 	br	93e4 <_realloc_r+0xf4>
    9658:	9005883a 	mov	r2,r18
    965c:	a8c00017 	ldw	r3,0(r21)
    9660:	b821883a 	mov	r16,r23
    9664:	b027883a 	mov	r19,r22
    9668:	10c00015 	stw	r3,0(r2)
    966c:	a8c00117 	ldw	r3,4(r21)
    9670:	10c00115 	stw	r3,4(r2)
    9674:	a8c00217 	ldw	r3,8(r21)
    9678:	10c00215 	stw	r3,8(r2)
    967c:	003f6a06 	br	9428 <_realloc_r+0x138>
    9680:	9c67883a 	add	r19,r19,r17
    9684:	4445c83a 	sub	r2,r8,r17
    9688:	e4c00215 	stw	r19,8(fp)
    968c:	10800054 	ori	r2,r2,1
    9690:	98800115 	stw	r2,4(r19)
    9694:	a8bfff17 	ldw	r2,-4(r21)
    9698:	a009883a 	mov	r4,r20
    969c:	1080004c 	andi	r2,r2,1
    96a0:	1462b03a 	or	r17,r2,r17
    96a4:	ac7fff15 	stw	r17,-4(r21)
    96a8:	000f7780 	call	f778 <__malloc_unlock>
    96ac:	a805883a 	mov	r2,r21
    96b0:	003f6b06 	br	9460 <_realloc_r+0x170>
    96b4:	a80b883a 	mov	r5,r21
    96b8:	9009883a 	mov	r4,r18
    96bc:	0007fb40 	call	7fb4 <memmove>
    96c0:	003f4e06 	br	93fc <_realloc_r+0x10c>
    96c4:	89000404 	addi	r4,r17,16
    96c8:	b93fbc16 	blt	r23,r4,95bc <_realloc_r+0x2cc>
    96cc:	b0800317 	ldw	r2,12(r22)
    96d0:	b0c00217 	ldw	r3,8(r22)
    96d4:	81bfff04 	addi	r6,r16,-4
    96d8:	01000904 	movi	r4,36
    96dc:	18800315 	stw	r2,12(r3)
    96e0:	10c00215 	stw	r3,8(r2)
    96e4:	b4800204 	addi	r18,r22,8
    96e8:	21804336 	bltu	r4,r6,97f8 <_realloc_r+0x508>
    96ec:	008004c4 	movi	r2,19
    96f0:	11803f2e 	bgeu	r2,r6,97f0 <_realloc_r+0x500>
    96f4:	a8800017 	ldw	r2,0(r21)
    96f8:	b0800215 	stw	r2,8(r22)
    96fc:	a8800117 	ldw	r2,4(r21)
    9700:	b0800315 	stw	r2,12(r22)
    9704:	008006c4 	movi	r2,27
    9708:	11803f36 	bltu	r2,r6,9808 <_realloc_r+0x518>
    970c:	b0800404 	addi	r2,r22,16
    9710:	ad400204 	addi	r21,r21,8
    9714:	a8c00017 	ldw	r3,0(r21)
    9718:	10c00015 	stw	r3,0(r2)
    971c:	a8c00117 	ldw	r3,4(r21)
    9720:	10c00115 	stw	r3,4(r2)
    9724:	a8c00217 	ldw	r3,8(r21)
    9728:	10c00215 	stw	r3,8(r2)
    972c:	b447883a 	add	r3,r22,r17
    9730:	bc45c83a 	sub	r2,r23,r17
    9734:	e0c00215 	stw	r3,8(fp)
    9738:	10800054 	ori	r2,r2,1
    973c:	18800115 	stw	r2,4(r3)
    9740:	b0800117 	ldw	r2,4(r22)
    9744:	a009883a 	mov	r4,r20
    9748:	1080004c 	andi	r2,r2,1
    974c:	1462b03a 	or	r17,r2,r17
    9750:	b4400115 	stw	r17,4(r22)
    9754:	000f7780 	call	f778 <__malloc_unlock>
    9758:	9005883a 	mov	r2,r18
    975c:	003f4006 	br	9460 <_realloc_r+0x170>
    9760:	a8c00217 	ldw	r3,8(r21)
    9764:	90c00215 	stw	r3,8(r18)
    9768:	a8c00317 	ldw	r3,12(r21)
    976c:	90c00315 	stw	r3,12(r18)
    9770:	30801126 	beq	r6,r2,97b8 <_realloc_r+0x4c8>
    9774:	90800404 	addi	r2,r18,16
    9778:	a8c00404 	addi	r3,r21,16
    977c:	003f1906 	br	93e4 <_realloc_r+0xf4>
    9780:	90ffff17 	ldw	r3,-4(r18)
    9784:	00bfff04 	movi	r2,-4
    9788:	a825883a 	mov	r18,r21
    978c:	1884703a 	and	r2,r3,r2
    9790:	80a1883a 	add	r16,r16,r2
    9794:	003f2406 	br	9428 <_realloc_r+0x138>
    9798:	a8800217 	ldw	r2,8(r21)
    979c:	b0800415 	stw	r2,16(r22)
    97a0:	a8800317 	ldw	r2,12(r21)
    97a4:	b0800515 	stw	r2,20(r22)
    97a8:	31000a26 	beq	r6,r4,97d4 <_realloc_r+0x4e4>
    97ac:	b0800604 	addi	r2,r22,24
    97b0:	ad400404 	addi	r21,r21,16
    97b4:	003fa906 	br	965c <_realloc_r+0x36c>
    97b8:	a9000417 	ldw	r4,16(r21)
    97bc:	90800604 	addi	r2,r18,24
    97c0:	a8c00604 	addi	r3,r21,24
    97c4:	91000415 	stw	r4,16(r18)
    97c8:	a9000517 	ldw	r4,20(r21)
    97cc:	91000515 	stw	r4,20(r18)
    97d0:	003f0406 	br	93e4 <_realloc_r+0xf4>
    97d4:	a8c00417 	ldw	r3,16(r21)
    97d8:	ad400604 	addi	r21,r21,24
    97dc:	b0800804 	addi	r2,r22,32
    97e0:	b0c00615 	stw	r3,24(r22)
    97e4:	a8ffff17 	ldw	r3,-4(r21)
    97e8:	b0c00715 	stw	r3,28(r22)
    97ec:	003f9b06 	br	965c <_realloc_r+0x36c>
    97f0:	9005883a 	mov	r2,r18
    97f4:	003fc706 	br	9714 <_realloc_r+0x424>
    97f8:	a80b883a 	mov	r5,r21
    97fc:	9009883a 	mov	r4,r18
    9800:	0007fb40 	call	7fb4 <memmove>
    9804:	003fc906 	br	972c <_realloc_r+0x43c>
    9808:	a8800217 	ldw	r2,8(r21)
    980c:	b0800415 	stw	r2,16(r22)
    9810:	a8800317 	ldw	r2,12(r21)
    9814:	b0800515 	stw	r2,20(r22)
    9818:	31000726 	beq	r6,r4,9838 <_realloc_r+0x548>
    981c:	b0800604 	addi	r2,r22,24
    9820:	ad400404 	addi	r21,r21,16
    9824:	003fbb06 	br	9714 <_realloc_r+0x424>
    9828:	a009883a 	mov	r4,r20
    982c:	000f7780 	call	f778 <__malloc_unlock>
    9830:	0005883a 	mov	r2,zero
    9834:	003f0a06 	br	9460 <_realloc_r+0x170>
    9838:	a8c00417 	ldw	r3,16(r21)
    983c:	ad400604 	addi	r21,r21,24
    9840:	b0800804 	addi	r2,r22,32
    9844:	b0c00615 	stw	r3,24(r22)
    9848:	a8ffff17 	ldw	r3,-4(r21)
    984c:	b0c00715 	stw	r3,28(r22)
    9850:	003fb006 	br	9714 <_realloc_r+0x424>

00009854 <__fpclassifyd>:
    9854:	00a00034 	movhi	r2,32768
    9858:	10bfffc4 	addi	r2,r2,-1
    985c:	2884703a 	and	r2,r5,r2
    9860:	10000726 	beq	r2,zero,9880 <__fpclassifyd+0x2c>
    9864:	00fffc34 	movhi	r3,65520
    9868:	019ff834 	movhi	r6,32736
    986c:	28c7883a 	add	r3,r5,r3
    9870:	31bfffc4 	addi	r6,r6,-1
    9874:	30c00536 	bltu	r6,r3,988c <__fpclassifyd+0x38>
    9878:	00800104 	movi	r2,4
    987c:	f800283a 	ret
    9880:	2000021e 	bne	r4,zero,988c <__fpclassifyd+0x38>
    9884:	00800084 	movi	r2,2
    9888:	f800283a 	ret
    988c:	00dffc34 	movhi	r3,32752
    9890:	019ff834 	movhi	r6,32736
    9894:	28cb883a 	add	r5,r5,r3
    9898:	31bfffc4 	addi	r6,r6,-1
    989c:	317ff62e 	bgeu	r6,r5,9878 <__fpclassifyd+0x24>
    98a0:	01400434 	movhi	r5,16
    98a4:	297fffc4 	addi	r5,r5,-1
    98a8:	28800236 	bltu	r5,r2,98b4 <__fpclassifyd+0x60>
    98ac:	008000c4 	movi	r2,3
    98b0:	f800283a 	ret
    98b4:	10c00226 	beq	r2,r3,98c0 <__fpclassifyd+0x6c>
    98b8:	0005883a 	mov	r2,zero
    98bc:	f800283a 	ret
    98c0:	2005003a 	cmpeq	r2,r4,zero
    98c4:	f800283a 	ret

000098c8 <_sbrk_r>:
    98c8:	defffd04 	addi	sp,sp,-12
    98cc:	dc000015 	stw	r16,0(sp)
    98d0:	04000074 	movhi	r16,1
    98d4:	dc400115 	stw	r17,4(sp)
    98d8:	84169504 	addi	r16,r16,23124
    98dc:	2023883a 	mov	r17,r4
    98e0:	2809883a 	mov	r4,r5
    98e4:	dfc00215 	stw	ra,8(sp)
    98e8:	80000015 	stw	zero,0(r16)
    98ec:	000f9600 	call	f960 <sbrk>
    98f0:	00ffffc4 	movi	r3,-1
    98f4:	10c00526 	beq	r2,r3,990c <_sbrk_r+0x44>
    98f8:	dfc00217 	ldw	ra,8(sp)
    98fc:	dc400117 	ldw	r17,4(sp)
    9900:	dc000017 	ldw	r16,0(sp)
    9904:	dec00304 	addi	sp,sp,12
    9908:	f800283a 	ret
    990c:	80c00017 	ldw	r3,0(r16)
    9910:	183ff926 	beq	r3,zero,98f8 <_sbrk_r+0x30>
    9914:	88c00015 	stw	r3,0(r17)
    9918:	003ff706 	br	98f8 <_sbrk_r+0x30>

0000991c <__sread>:
    991c:	defffe04 	addi	sp,sp,-8
    9920:	dc000015 	stw	r16,0(sp)
    9924:	2821883a 	mov	r16,r5
    9928:	2940038f 	ldh	r5,14(r5)
    992c:	dfc00115 	stw	ra,4(sp)
    9930:	000b7d80 	call	b7d8 <_read_r>
    9934:	10000716 	blt	r2,zero,9954 <__sread+0x38>
    9938:	80c01417 	ldw	r3,80(r16)
    993c:	1887883a 	add	r3,r3,r2
    9940:	80c01415 	stw	r3,80(r16)
    9944:	dfc00117 	ldw	ra,4(sp)
    9948:	dc000017 	ldw	r16,0(sp)
    994c:	dec00204 	addi	sp,sp,8
    9950:	f800283a 	ret
    9954:	80c0030b 	ldhu	r3,12(r16)
    9958:	18fbffcc 	andi	r3,r3,61439
    995c:	80c0030d 	sth	r3,12(r16)
    9960:	dfc00117 	ldw	ra,4(sp)
    9964:	dc000017 	ldw	r16,0(sp)
    9968:	dec00204 	addi	sp,sp,8
    996c:	f800283a 	ret

00009970 <__seofread>:
    9970:	0005883a 	mov	r2,zero
    9974:	f800283a 	ret

00009978 <__swrite>:
    9978:	2880030b 	ldhu	r2,12(r5)
    997c:	defffb04 	addi	sp,sp,-20
    9980:	dcc00315 	stw	r19,12(sp)
    9984:	dc800215 	stw	r18,8(sp)
    9988:	dc400115 	stw	r17,4(sp)
    998c:	dc000015 	stw	r16,0(sp)
    9990:	dfc00415 	stw	ra,16(sp)
    9994:	10c0400c 	andi	r3,r2,256
    9998:	2821883a 	mov	r16,r5
    999c:	2023883a 	mov	r17,r4
    99a0:	3025883a 	mov	r18,r6
    99a4:	3827883a 	mov	r19,r7
    99a8:	18000526 	beq	r3,zero,99c0 <__swrite+0x48>
    99ac:	2940038f 	ldh	r5,14(r5)
    99b0:	01c00084 	movi	r7,2
    99b4:	000d883a 	mov	r6,zero
    99b8:	000b7780 	call	b778 <_lseek_r>
    99bc:	8080030b 	ldhu	r2,12(r16)
    99c0:	8140038f 	ldh	r5,14(r16)
    99c4:	10bbffcc 	andi	r2,r2,61439
    99c8:	980f883a 	mov	r7,r19
    99cc:	900d883a 	mov	r6,r18
    99d0:	8809883a 	mov	r4,r17
    99d4:	8080030d 	sth	r2,12(r16)
    99d8:	dfc00417 	ldw	ra,16(sp)
    99dc:	dcc00317 	ldw	r19,12(sp)
    99e0:	dc800217 	ldw	r18,8(sp)
    99e4:	dc400117 	ldw	r17,4(sp)
    99e8:	dc000017 	ldw	r16,0(sp)
    99ec:	dec00504 	addi	sp,sp,20
    99f0:	000b22c1 	jmpi	b22c <_write_r>

000099f4 <__sseek>:
    99f4:	defffe04 	addi	sp,sp,-8
    99f8:	dc000015 	stw	r16,0(sp)
    99fc:	2821883a 	mov	r16,r5
    9a00:	2940038f 	ldh	r5,14(r5)
    9a04:	dfc00115 	stw	ra,4(sp)
    9a08:	000b7780 	call	b778 <_lseek_r>
    9a0c:	00ffffc4 	movi	r3,-1
    9a10:	10c00826 	beq	r2,r3,9a34 <__sseek+0x40>
    9a14:	80c0030b 	ldhu	r3,12(r16)
    9a18:	80801415 	stw	r2,80(r16)
    9a1c:	18c40014 	ori	r3,r3,4096
    9a20:	80c0030d 	sth	r3,12(r16)
    9a24:	dfc00117 	ldw	ra,4(sp)
    9a28:	dc000017 	ldw	r16,0(sp)
    9a2c:	dec00204 	addi	sp,sp,8
    9a30:	f800283a 	ret
    9a34:	80c0030b 	ldhu	r3,12(r16)
    9a38:	18fbffcc 	andi	r3,r3,61439
    9a3c:	80c0030d 	sth	r3,12(r16)
    9a40:	dfc00117 	ldw	ra,4(sp)
    9a44:	dc000017 	ldw	r16,0(sp)
    9a48:	dec00204 	addi	sp,sp,8
    9a4c:	f800283a 	ret

00009a50 <__sclose>:
    9a50:	2940038f 	ldh	r5,14(r5)
    9a54:	000b28c1 	jmpi	b28c <_close_r>

00009a58 <strcmp>:
    9a58:	2144b03a 	or	r2,r4,r5
    9a5c:	108000cc 	andi	r2,r2,3
    9a60:	1000171e 	bne	r2,zero,9ac0 <strcmp+0x68>
    9a64:	20800017 	ldw	r2,0(r4)
    9a68:	28c00017 	ldw	r3,0(r5)
    9a6c:	10c0141e 	bne	r2,r3,9ac0 <strcmp+0x68>
    9a70:	027fbff4 	movhi	r9,65279
    9a74:	4a7fbfc4 	addi	r9,r9,-257
    9a78:	0086303a 	nor	r3,zero,r2
    9a7c:	02202074 	movhi	r8,32897
    9a80:	1245883a 	add	r2,r2,r9
    9a84:	42202004 	addi	r8,r8,-32640
    9a88:	10c4703a 	and	r2,r2,r3
    9a8c:	1204703a 	and	r2,r2,r8
    9a90:	10000226 	beq	r2,zero,9a9c <strcmp+0x44>
    9a94:	00002306 	br	9b24 <strcmp+0xcc>
    9a98:	1000221e 	bne	r2,zero,9b24 <strcmp+0xcc>
    9a9c:	21000104 	addi	r4,r4,4
    9aa0:	20c00017 	ldw	r3,0(r4)
    9aa4:	29400104 	addi	r5,r5,4
    9aa8:	29800017 	ldw	r6,0(r5)
    9aac:	1a4f883a 	add	r7,r3,r9
    9ab0:	00c4303a 	nor	r2,zero,r3
    9ab4:	3884703a 	and	r2,r7,r2
    9ab8:	1204703a 	and	r2,r2,r8
    9abc:	19bff626 	beq	r3,r6,9a98 <strcmp+0x40>
    9ac0:	20800003 	ldbu	r2,0(r4)
    9ac4:	10c03fcc 	andi	r3,r2,255
    9ac8:	18c0201c 	xori	r3,r3,128
    9acc:	18ffe004 	addi	r3,r3,-128
    9ad0:	18000c26 	beq	r3,zero,9b04 <strcmp+0xac>
    9ad4:	29800007 	ldb	r6,0(r5)
    9ad8:	19800326 	beq	r3,r6,9ae8 <strcmp+0x90>
    9adc:	00001306 	br	9b2c <strcmp+0xd4>
    9ae0:	29800007 	ldb	r6,0(r5)
    9ae4:	11800b1e 	bne	r2,r6,9b14 <strcmp+0xbc>
    9ae8:	21000044 	addi	r4,r4,1
    9aec:	20c00003 	ldbu	r3,0(r4)
    9af0:	29400044 	addi	r5,r5,1
    9af4:	18803fcc 	andi	r2,r3,255
    9af8:	1080201c 	xori	r2,r2,128
    9afc:	10bfe004 	addi	r2,r2,-128
    9b00:	103ff71e 	bne	r2,zero,9ae0 <strcmp+0x88>
    9b04:	0007883a 	mov	r3,zero
    9b08:	28800003 	ldbu	r2,0(r5)
    9b0c:	1885c83a 	sub	r2,r3,r2
    9b10:	f800283a 	ret
    9b14:	28800003 	ldbu	r2,0(r5)
    9b18:	18c03fcc 	andi	r3,r3,255
    9b1c:	1885c83a 	sub	r2,r3,r2
    9b20:	f800283a 	ret
    9b24:	0005883a 	mov	r2,zero
    9b28:	f800283a 	ret
    9b2c:	10c03fcc 	andi	r3,r2,255
    9b30:	003ff506 	br	9b08 <strcmp+0xb0>

00009b34 <__sprint_r.part.0>:
    9b34:	28801917 	ldw	r2,100(r5)
    9b38:	defff604 	addi	sp,sp,-40
    9b3c:	dd400515 	stw	r21,20(sp)
    9b40:	dfc00915 	stw	ra,36(sp)
    9b44:	df000815 	stw	fp,32(sp)
    9b48:	ddc00715 	stw	r23,28(sp)
    9b4c:	dd800615 	stw	r22,24(sp)
    9b50:	dd000415 	stw	r20,16(sp)
    9b54:	dcc00315 	stw	r19,12(sp)
    9b58:	dc800215 	stw	r18,8(sp)
    9b5c:	dc400115 	stw	r17,4(sp)
    9b60:	dc000015 	stw	r16,0(sp)
    9b64:	1088000c 	andi	r2,r2,8192
    9b68:	302b883a 	mov	r21,r6
    9b6c:	10002e26 	beq	r2,zero,9c28 <__sprint_r.part.0+0xf4>
    9b70:	30800217 	ldw	r2,8(r6)
    9b74:	35800017 	ldw	r22,0(r6)
    9b78:	10002926 	beq	r2,zero,9c20 <__sprint_r.part.0+0xec>
    9b7c:	2827883a 	mov	r19,r5
    9b80:	2029883a 	mov	r20,r4
    9b84:	b5c00104 	addi	r23,r22,4
    9b88:	04bfffc4 	movi	r18,-1
    9b8c:	bc400017 	ldw	r17,0(r23)
    9b90:	b4000017 	ldw	r16,0(r22)
    9b94:	0039883a 	mov	fp,zero
    9b98:	8822d0ba 	srli	r17,r17,2
    9b9c:	8800031e 	bne	r17,zero,9bac <__sprint_r.part.0+0x78>
    9ba0:	00001806 	br	9c04 <__sprint_r.part.0+0xd0>
    9ba4:	84000104 	addi	r16,r16,4
    9ba8:	8f001526 	beq	r17,fp,9c00 <__sprint_r.part.0+0xcc>
    9bac:	81400017 	ldw	r5,0(r16)
    9bb0:	980d883a 	mov	r6,r19
    9bb4:	a009883a 	mov	r4,r20
    9bb8:	000b6240 	call	b624 <_fputwc_r>
    9bbc:	e7000044 	addi	fp,fp,1
    9bc0:	14bff81e 	bne	r2,r18,9ba4 <__sprint_r.part.0+0x70>
    9bc4:	9005883a 	mov	r2,r18
    9bc8:	a8000215 	stw	zero,8(r21)
    9bcc:	a8000115 	stw	zero,4(r21)
    9bd0:	dfc00917 	ldw	ra,36(sp)
    9bd4:	df000817 	ldw	fp,32(sp)
    9bd8:	ddc00717 	ldw	r23,28(sp)
    9bdc:	dd800617 	ldw	r22,24(sp)
    9be0:	dd400517 	ldw	r21,20(sp)
    9be4:	dd000417 	ldw	r20,16(sp)
    9be8:	dcc00317 	ldw	r19,12(sp)
    9bec:	dc800217 	ldw	r18,8(sp)
    9bf0:	dc400117 	ldw	r17,4(sp)
    9bf4:	dc000017 	ldw	r16,0(sp)
    9bf8:	dec00a04 	addi	sp,sp,40
    9bfc:	f800283a 	ret
    9c00:	a8800217 	ldw	r2,8(r21)
    9c04:	8c63883a 	add	r17,r17,r17
    9c08:	8c63883a 	add	r17,r17,r17
    9c0c:	1445c83a 	sub	r2,r2,r17
    9c10:	a8800215 	stw	r2,8(r21)
    9c14:	b5800204 	addi	r22,r22,8
    9c18:	bdc00204 	addi	r23,r23,8
    9c1c:	103fdb1e 	bne	r2,zero,9b8c <__sprint_r.part.0+0x58>
    9c20:	0005883a 	mov	r2,zero
    9c24:	003fe806 	br	9bc8 <__sprint_r.part.0+0x94>
    9c28:	0006c940 	call	6c94 <__sfvwrite_r>
    9c2c:	003fe606 	br	9bc8 <__sprint_r.part.0+0x94>

00009c30 <__sprint_r>:
    9c30:	30c00217 	ldw	r3,8(r6)
    9c34:	18000126 	beq	r3,zero,9c3c <__sprint_r+0xc>
    9c38:	0009b341 	jmpi	9b34 <__sprint_r.part.0>
    9c3c:	30000115 	stw	zero,4(r6)
    9c40:	0005883a 	mov	r2,zero
    9c44:	f800283a 	ret

00009c48 <___vfiprintf_internal_r>:
    9c48:	deffca04 	addi	sp,sp,-216
    9c4c:	dd403115 	stw	r21,196(sp)
    9c50:	dfc03515 	stw	ra,212(sp)
    9c54:	df003415 	stw	fp,208(sp)
    9c58:	ddc03315 	stw	r23,204(sp)
    9c5c:	dd803215 	stw	r22,200(sp)
    9c60:	dd003015 	stw	r20,192(sp)
    9c64:	dcc02f15 	stw	r19,188(sp)
    9c68:	dc802e15 	stw	r18,184(sp)
    9c6c:	dc402d15 	stw	r17,180(sp)
    9c70:	dc002c15 	stw	r16,176(sp)
    9c74:	d9002115 	stw	r4,132(sp)
    9c78:	d9402015 	stw	r5,128(sp)
    9c7c:	d9c02215 	stw	r7,136(sp)
    9c80:	302b883a 	mov	r21,r6
    9c84:	20000226 	beq	r4,zero,9c90 <___vfiprintf_internal_r+0x48>
    9c88:	20800e17 	ldw	r2,56(r4)
    9c8c:	1000cf26 	beq	r2,zero,9fcc <___vfiprintf_internal_r+0x384>
    9c90:	d8c02017 	ldw	r3,128(sp)
    9c94:	1880030b 	ldhu	r2,12(r3)
    9c98:	10c8000c 	andi	r3,r2,8192
    9c9c:	1800071e 	bne	r3,zero,9cbc <___vfiprintf_internal_r+0x74>
    9ca0:	d9402017 	ldw	r5,128(sp)
    9ca4:	00f7ffc4 	movi	r3,-8193
    9ca8:	10880014 	ori	r2,r2,8192
    9cac:	29001917 	ldw	r4,100(r5)
    9cb0:	2880030d 	sth	r2,12(r5)
    9cb4:	20c6703a 	and	r3,r4,r3
    9cb8:	28c01915 	stw	r3,100(r5)
    9cbc:	10c0020c 	andi	r3,r2,8
    9cc0:	1800a526 	beq	r3,zero,9f58 <___vfiprintf_internal_r+0x310>
    9cc4:	d9002017 	ldw	r4,128(sp)
    9cc8:	20c00417 	ldw	r3,16(r4)
    9ccc:	1800a226 	beq	r3,zero,9f58 <___vfiprintf_internal_r+0x310>
    9cd0:	1080068c 	andi	r2,r2,26
    9cd4:	00c00284 	movi	r3,10
    9cd8:	10c0a826 	beq	r2,r3,9f7c <___vfiprintf_internal_r+0x334>
    9cdc:	d9001a04 	addi	r4,sp,104
    9ce0:	d94019c4 	addi	r5,sp,103
    9ce4:	04800074 	movhi	r18,1
    9ce8:	2145c83a 	sub	r2,r4,r5
    9cec:	9488c304 	addi	r18,r18,8972
    9cf0:	d9001e15 	stw	r4,120(sp)
    9cf4:	d9401f15 	stw	r5,124(sp)
    9cf8:	dec01a15 	stw	sp,104(sp)
    9cfc:	d8001c15 	stw	zero,112(sp)
    9d00:	d8001b15 	stw	zero,108(sp)
    9d04:	d811883a 	mov	r8,sp
    9d08:	d8002615 	stw	zero,152(sp)
    9d0c:	d8002415 	stw	zero,144(sp)
    9d10:	d8802815 	stw	r2,160(sp)
    9d14:	a82d883a 	mov	r22,r21
    9d18:	b0800007 	ldb	r2,0(r22)
    9d1c:	10040d26 	beq	r2,zero,ad54 <___vfiprintf_internal_r+0x110c>
    9d20:	00c00944 	movi	r3,37
    9d24:	b029883a 	mov	r20,r22
    9d28:	10c0021e 	bne	r2,r3,9d34 <___vfiprintf_internal_r+0xec>
    9d2c:	00001606 	br	9d88 <___vfiprintf_internal_r+0x140>
    9d30:	10c00326 	beq	r2,r3,9d40 <___vfiprintf_internal_r+0xf8>
    9d34:	a5000044 	addi	r20,r20,1
    9d38:	a0800007 	ldb	r2,0(r20)
    9d3c:	103ffc1e 	bne	r2,zero,9d30 <___vfiprintf_internal_r+0xe8>
    9d40:	a5a1c83a 	sub	r16,r20,r22
    9d44:	80001026 	beq	r16,zero,9d88 <___vfiprintf_internal_r+0x140>
    9d48:	d8c01c17 	ldw	r3,112(sp)
    9d4c:	d8801b17 	ldw	r2,108(sp)
    9d50:	45800015 	stw	r22,0(r8)
    9d54:	80c7883a 	add	r3,r16,r3
    9d58:	10800044 	addi	r2,r2,1
    9d5c:	44000115 	stw	r16,4(r8)
    9d60:	d8c01c15 	stw	r3,112(sp)
    9d64:	d8801b15 	stw	r2,108(sp)
    9d68:	010001c4 	movi	r4,7
    9d6c:	2080750e 	bge	r4,r2,9f44 <___vfiprintf_internal_r+0x2fc>
    9d70:	1803951e 	bne	r3,zero,abc8 <___vfiprintf_internal_r+0xf80>
    9d74:	d8c02417 	ldw	r3,144(sp)
    9d78:	d8001b15 	stw	zero,108(sp)
    9d7c:	d811883a 	mov	r8,sp
    9d80:	1c07883a 	add	r3,r3,r16
    9d84:	d8c02415 	stw	r3,144(sp)
    9d88:	a0800007 	ldb	r2,0(r20)
    9d8c:	1002e026 	beq	r2,zero,a910 <___vfiprintf_internal_r+0xcc8>
    9d90:	a5800044 	addi	r22,r20,1
    9d94:	a0c00047 	ldb	r3,1(r20)
    9d98:	d8001d85 	stb	zero,118(sp)
    9d9c:	0027883a 	mov	r19,zero
    9da0:	d8002305 	stb	zero,140(sp)
    9da4:	043fffc4 	movi	r16,-1
    9da8:	d8002515 	stw	zero,148(sp)
    9dac:	0023883a 	mov	r17,zero
    9db0:	05001604 	movi	r20,88
    9db4:	05400244 	movi	r21,9
    9db8:	402f883a 	mov	r23,r8
    9dbc:	b5800044 	addi	r22,r22,1
    9dc0:	18bff804 	addi	r2,r3,-32
    9dc4:	a0827736 	bltu	r20,r2,a7a4 <___vfiprintf_internal_r+0xb5c>
    9dc8:	100490ba 	slli	r2,r2,2
    9dcc:	01000074 	movhi	r4,1
    9dd0:	21277804 	addi	r4,r4,-25120
    9dd4:	1105883a 	add	r2,r2,r4
    9dd8:	10800017 	ldw	r2,0(r2)
    9ddc:	1000683a 	jmp	r2
    9de0:	0000a4a4 	muli	zero,zero,658
    9de4:	0000a7a4 	muli	zero,zero,670
    9de8:	0000a7a4 	muli	zero,zero,670
    9dec:	0000a4c0 	call	a4c <main+0x6ac>
    9df0:	0000a7a4 	muli	zero,zero,670
    9df4:	0000a7a4 	muli	zero,zero,670
    9df8:	0000a7a4 	muli	zero,zero,670
    9dfc:	0000a7a4 	muli	zero,zero,670
    9e00:	0000a7a4 	muli	zero,zero,670
    9e04:	0000a7a4 	muli	zero,zero,670
    9e08:	0000a6c8 	cmpgei	zero,zero,667
    9e0c:	0000a6ec 	andhi	zero,zero,667
    9e10:	0000a7a4 	muli	zero,zero,670
    9e14:	00009fe4 	muli	zero,zero,639
    9e18:	0000a700 	call	a70 <main+0x6d0>
    9e1c:	0000a7a4 	muli	zero,zero,670
    9e20:	0000a4cc 	andi	zero,zero,659
    9e24:	0000a4d8 	cmpnei	zero,zero,659
    9e28:	0000a4d8 	cmpnei	zero,zero,659
    9e2c:	0000a4d8 	cmpnei	zero,zero,659
    9e30:	0000a4d8 	cmpnei	zero,zero,659
    9e34:	0000a4d8 	cmpnei	zero,zero,659
    9e38:	0000a4d8 	cmpnei	zero,zero,659
    9e3c:	0000a4d8 	cmpnei	zero,zero,659
    9e40:	0000a4d8 	cmpnei	zero,zero,659
    9e44:	0000a4d8 	cmpnei	zero,zero,659
    9e48:	0000a7a4 	muli	zero,zero,670
    9e4c:	0000a7a4 	muli	zero,zero,670
    9e50:	0000a7a4 	muli	zero,zero,670
    9e54:	0000a7a4 	muli	zero,zero,670
    9e58:	0000a7a4 	muli	zero,zero,670
    9e5c:	0000a7a4 	muli	zero,zero,670
    9e60:	0000a7a4 	muli	zero,zero,670
    9e64:	0000a7a4 	muli	zero,zero,670
    9e68:	0000a7a4 	muli	zero,zero,670
    9e6c:	0000a7a4 	muli	zero,zero,670
    9e70:	0000a518 	cmpnei	zero,zero,660
    9e74:	0000a7a4 	muli	zero,zero,670
    9e78:	0000a7a4 	muli	zero,zero,670
    9e7c:	0000a7a4 	muli	zero,zero,670
    9e80:	0000a7a4 	muli	zero,zero,670
    9e84:	0000a7a4 	muli	zero,zero,670
    9e88:	0000a7a4 	muli	zero,zero,670
    9e8c:	0000a7a4 	muli	zero,zero,670
    9e90:	0000a7a4 	muli	zero,zero,670
    9e94:	0000a7a4 	muli	zero,zero,670
    9e98:	0000a7a4 	muli	zero,zero,670
    9e9c:	0000a554 	movui	zero,661
    9ea0:	0000a7a4 	muli	zero,zero,670
    9ea4:	0000a7a4 	muli	zero,zero,670
    9ea8:	0000a7a4 	muli	zero,zero,670
    9eac:	0000a7a4 	muli	zero,zero,670
    9eb0:	0000a7a4 	muli	zero,zero,670
    9eb4:	0000a5b0 	cmpltui	zero,zero,662
    9eb8:	0000a7a4 	muli	zero,zero,670
    9ebc:	0000a7a4 	muli	zero,zero,670
    9ec0:	0000a624 	muli	zero,zero,664
    9ec4:	0000a7a4 	muli	zero,zero,670
    9ec8:	0000a7a4 	muli	zero,zero,670
    9ecc:	0000a7a4 	muli	zero,zero,670
    9ed0:	0000a7a4 	muli	zero,zero,670
    9ed4:	0000a7a4 	muli	zero,zero,670
    9ed8:	0000a7a4 	muli	zero,zero,670
    9edc:	0000a7a4 	muli	zero,zero,670
    9ee0:	0000a7a4 	muli	zero,zero,670
    9ee4:	0000a7a4 	muli	zero,zero,670
    9ee8:	0000a7a4 	muli	zero,zero,670
    9eec:	0000a3cc 	andi	zero,zero,655
    9ef0:	0000a3fc 	xorhi	zero,zero,655
    9ef4:	0000a7a4 	muli	zero,zero,670
    9ef8:	0000a7a4 	muli	zero,zero,670
    9efc:	0000a7a4 	muli	zero,zero,670
    9f00:	0000a74c 	andi	zero,zero,669
    9f04:	0000a3fc 	xorhi	zero,zero,655
    9f08:	0000a7a4 	muli	zero,zero,670
    9f0c:	0000a7a4 	muli	zero,zero,670
    9f10:	0000a2a4 	muli	zero,zero,650
    9f14:	0000a7a4 	muli	zero,zero,670
    9f18:	0000a2b8 	rdprs	zero,zero,650
    9f1c:	0000a2f0 	cmpltui	zero,zero,651
    9f20:	00009ff0 	cmpltui	zero,zero,639
    9f24:	0000a298 	cmpnei	zero,zero,650
    9f28:	0000a7a4 	muli	zero,zero,670
    9f2c:	0000a664 	muli	zero,zero,665
    9f30:	0000a7a4 	muli	zero,zero,670
    9f34:	0000a6b0 	cmpltui	zero,zero,666
    9f38:	0000a7a4 	muli	zero,zero,670
    9f3c:	0000a7a4 	muli	zero,zero,670
    9f40:	0000a374 	movhi	zero,653
    9f44:	42000204 	addi	r8,r8,8
    9f48:	d8c02417 	ldw	r3,144(sp)
    9f4c:	1c07883a 	add	r3,r3,r16
    9f50:	d8c02415 	stw	r3,144(sp)
    9f54:	003f8c06 	br	9d88 <___vfiprintf_internal_r+0x140>
    9f58:	d9402017 	ldw	r5,128(sp)
    9f5c:	d9002117 	ldw	r4,132(sp)
    9f60:	00048040 	call	4804 <__swsetup_r>
    9f64:	1003c11e 	bne	r2,zero,ae6c <___vfiprintf_internal_r+0x1224>
    9f68:	d9402017 	ldw	r5,128(sp)
    9f6c:	00c00284 	movi	r3,10
    9f70:	2880030b 	ldhu	r2,12(r5)
    9f74:	1080068c 	andi	r2,r2,26
    9f78:	10ff581e 	bne	r2,r3,9cdc <___vfiprintf_internal_r+0x94>
    9f7c:	d8c02017 	ldw	r3,128(sp)
    9f80:	1880038f 	ldh	r2,14(r3)
    9f84:	103f5516 	blt	r2,zero,9cdc <___vfiprintf_internal_r+0x94>
    9f88:	d9c02217 	ldw	r7,136(sp)
    9f8c:	d9002117 	ldw	r4,132(sp)
    9f90:	a80d883a 	mov	r6,r21
    9f94:	180b883a 	mov	r5,r3
    9f98:	000b1700 	call	b170 <__sbprintf>
    9f9c:	dfc03517 	ldw	ra,212(sp)
    9fa0:	df003417 	ldw	fp,208(sp)
    9fa4:	ddc03317 	ldw	r23,204(sp)
    9fa8:	dd803217 	ldw	r22,200(sp)
    9fac:	dd403117 	ldw	r21,196(sp)
    9fb0:	dd003017 	ldw	r20,192(sp)
    9fb4:	dcc02f17 	ldw	r19,188(sp)
    9fb8:	dc802e17 	ldw	r18,184(sp)
    9fbc:	dc402d17 	ldw	r17,180(sp)
    9fc0:	dc002c17 	ldw	r16,176(sp)
    9fc4:	dec03604 	addi	sp,sp,216
    9fc8:	f800283a 	ret
    9fcc:	00068100 	call	6810 <__sinit>
    9fd0:	003f2f06 	br	9c90 <___vfiprintf_internal_r+0x48>
    9fd4:	d8c02517 	ldw	r3,148(sp)
    9fd8:	d8802215 	stw	r2,136(sp)
    9fdc:	00c7c83a 	sub	r3,zero,r3
    9fe0:	d8c02515 	stw	r3,148(sp)
    9fe4:	8c400114 	ori	r17,r17,4
    9fe8:	b0c00007 	ldb	r3,0(r22)
    9fec:	003f7306 	br	9dbc <___vfiprintf_internal_r+0x174>
    9ff0:	00800c04 	movi	r2,48
    9ff4:	d9402217 	ldw	r5,136(sp)
    9ff8:	d8801d05 	stb	r2,116(sp)
    9ffc:	00801e04 	movi	r2,120
    a000:	d8801d45 	stb	r2,117(sp)
    a004:	d8001d85 	stb	zero,118(sp)
    a008:	b811883a 	mov	r8,r23
    a00c:	28c00104 	addi	r3,r5,4
    a010:	2cc00017 	ldw	r19,0(r5)
    a014:	0029883a 	mov	r20,zero
    a018:	88800094 	ori	r2,r17,2
    a01c:	80032516 	blt	r16,zero,acb4 <___vfiprintf_internal_r+0x106c>
    a020:	00bfdfc4 	movi	r2,-129
    a024:	88a2703a 	and	r17,r17,r2
    a028:	d8c02215 	stw	r3,136(sp)
    a02c:	8c400094 	ori	r17,r17,2
    a030:	98032a1e 	bne	r19,zero,acdc <___vfiprintf_internal_r+0x1094>
    a034:	00800074 	movhi	r2,1
    a038:	10886204 	addi	r2,r2,8584
    a03c:	d8802615 	stw	r2,152(sp)
    a040:	002b883a 	mov	r21,zero
    a044:	8001741e 	bne	r16,zero,a618 <___vfiprintf_internal_r+0x9d0>
    a048:	0021883a 	mov	r16,zero
    a04c:	0029883a 	mov	r20,zero
    a050:	ddc01a04 	addi	r23,sp,104
    a054:	8027883a 	mov	r19,r16
    a058:	8500010e 	bge	r16,r20,a060 <___vfiprintf_internal_r+0x418>
    a05c:	a027883a 	mov	r19,r20
    a060:	ad403fcc 	andi	r21,r21,255
    a064:	ad40201c 	xori	r21,r21,128
    a068:	ad7fe004 	addi	r21,r21,-128
    a06c:	a8000126 	beq	r21,zero,a074 <___vfiprintf_internal_r+0x42c>
    a070:	9cc00044 	addi	r19,r19,1
    a074:	89c0008c 	andi	r7,r17,2
    a078:	38000126 	beq	r7,zero,a080 <___vfiprintf_internal_r+0x438>
    a07c:	9cc00084 	addi	r19,r19,2
    a080:	88c0210c 	andi	r3,r17,132
    a084:	1801dd1e 	bne	r3,zero,a7fc <___vfiprintf_internal_r+0xbb4>
    a088:	d9402517 	ldw	r5,148(sp)
    a08c:	2cebc83a 	sub	r21,r5,r19
    a090:	0541da0e 	bge	zero,r21,a7fc <___vfiprintf_internal_r+0xbb4>
    a094:	07000404 	movi	fp,16
    a098:	d8801c17 	ldw	r2,112(sp)
    a09c:	e543be0e 	bge	fp,r21,af98 <___vfiprintf_internal_r+0x1350>
    a0a0:	01400074 	movhi	r5,1
    a0a4:	2948c704 	addi	r5,r5,8988
    a0a8:	dc002715 	stw	r16,156(sp)
    a0ac:	d9801b17 	ldw	r6,108(sp)
    a0b0:	a821883a 	mov	r16,r21
    a0b4:	d9402315 	stw	r5,140(sp)
    a0b8:	028001c4 	movi	r10,7
    a0bc:	d9c02915 	stw	r7,164(sp)
    a0c0:	182b883a 	mov	r21,r3
    a0c4:	00000506 	br	a0dc <___vfiprintf_internal_r+0x494>
    a0c8:	31000084 	addi	r4,r6,2
    a0cc:	42000204 	addi	r8,r8,8
    a0d0:	180d883a 	mov	r6,r3
    a0d4:	843ffc04 	addi	r16,r16,-16
    a0d8:	e4000f0e 	bge	fp,r16,a118 <___vfiprintf_internal_r+0x4d0>
    a0dc:	01000074 	movhi	r4,1
    a0e0:	10800404 	addi	r2,r2,16
    a0e4:	30c00044 	addi	r3,r6,1
    a0e8:	2108c704 	addi	r4,r4,8988
    a0ec:	41000015 	stw	r4,0(r8)
    a0f0:	47000115 	stw	fp,4(r8)
    a0f4:	d8801c15 	stw	r2,112(sp)
    a0f8:	d8c01b15 	stw	r3,108(sp)
    a0fc:	50fff20e 	bge	r10,r3,a0c8 <___vfiprintf_internal_r+0x480>
    a100:	1001b21e 	bne	r2,zero,a7cc <___vfiprintf_internal_r+0xb84>
    a104:	843ffc04 	addi	r16,r16,-16
    a108:	000d883a 	mov	r6,zero
    a10c:	01000044 	movi	r4,1
    a110:	d811883a 	mov	r8,sp
    a114:	e43ff116 	blt	fp,r16,a0dc <___vfiprintf_internal_r+0x494>
    a118:	a807883a 	mov	r3,r21
    a11c:	d9c02917 	ldw	r7,164(sp)
    a120:	802b883a 	mov	r21,r16
    a124:	dc002717 	ldw	r16,156(sp)
    a128:	d9402317 	ldw	r5,140(sp)
    a12c:	a885883a 	add	r2,r21,r2
    a130:	45400115 	stw	r21,4(r8)
    a134:	41400015 	stw	r5,0(r8)
    a138:	d8801c15 	stw	r2,112(sp)
    a13c:	d9001b15 	stw	r4,108(sp)
    a140:	014001c4 	movi	r5,7
    a144:	29026216 	blt	r5,r4,aad0 <___vfiprintf_internal_r+0xe88>
    a148:	d9801d87 	ldb	r6,118(sp)
    a14c:	42000204 	addi	r8,r8,8
    a150:	21400044 	addi	r5,r4,1
    a154:	3001ae1e 	bne	r6,zero,a810 <___vfiprintf_internal_r+0xbc8>
    a158:	3801bb26 	beq	r7,zero,a848 <___vfiprintf_internal_r+0xc00>
    a15c:	d9001d04 	addi	r4,sp,116
    a160:	10800084 	addi	r2,r2,2
    a164:	41000015 	stw	r4,0(r8)
    a168:	01000084 	movi	r4,2
    a16c:	41000115 	stw	r4,4(r8)
    a170:	d8801c15 	stw	r2,112(sp)
    a174:	d9401b15 	stw	r5,108(sp)
    a178:	010001c4 	movi	r4,7
    a17c:	2142680e 	bge	r4,r5,ab20 <___vfiprintf_internal_r+0xed8>
    a180:	1002b11e 	bne	r2,zero,ac48 <___vfiprintf_internal_r+0x1000>
    a184:	01802004 	movi	r6,128
    a188:	01400044 	movi	r5,1
    a18c:	0009883a 	mov	r4,zero
    a190:	d811883a 	mov	r8,sp
    a194:	1981ae1e 	bne	r3,r6,a850 <___vfiprintf_internal_r+0xc08>
    a198:	d8c02517 	ldw	r3,148(sp)
    a19c:	1cf9c83a 	sub	fp,r3,r19
    a1a0:	0701ab0e 	bge	zero,fp,a850 <___vfiprintf_internal_r+0xc08>
    a1a4:	05400404 	movi	r21,16
    a1a8:	af03a90e 	bge	r21,fp,b050 <___vfiprintf_internal_r+0x1408>
    a1ac:	01400074 	movhi	r5,1
    a1b0:	2948c304 	addi	r5,r5,8972
    a1b4:	d9402315 	stw	r5,140(sp)
    a1b8:	01c001c4 	movi	r7,7
    a1bc:	00000506 	br	a1d4 <___vfiprintf_internal_r+0x58c>
    a1c0:	21800084 	addi	r6,r4,2
    a1c4:	42000204 	addi	r8,r8,8
    a1c8:	1809883a 	mov	r4,r3
    a1cc:	e73ffc04 	addi	fp,fp,-16
    a1d0:	af000d0e 	bge	r21,fp,a208 <___vfiprintf_internal_r+0x5c0>
    a1d4:	10800404 	addi	r2,r2,16
    a1d8:	20c00044 	addi	r3,r4,1
    a1dc:	44800015 	stw	r18,0(r8)
    a1e0:	45400115 	stw	r21,4(r8)
    a1e4:	d8801c15 	stw	r2,112(sp)
    a1e8:	d8c01b15 	stw	r3,108(sp)
    a1ec:	38fff40e 	bge	r7,r3,a1c0 <___vfiprintf_internal_r+0x578>
    a1f0:	10022b1e 	bne	r2,zero,aaa0 <___vfiprintf_internal_r+0xe58>
    a1f4:	e73ffc04 	addi	fp,fp,-16
    a1f8:	01800044 	movi	r6,1
    a1fc:	0009883a 	mov	r4,zero
    a200:	d811883a 	mov	r8,sp
    a204:	af3ff316 	blt	r21,fp,a1d4 <___vfiprintf_internal_r+0x58c>
    a208:	d8c02317 	ldw	r3,140(sp)
    a20c:	1705883a 	add	r2,r2,fp
    a210:	47000115 	stw	fp,4(r8)
    a214:	40c00015 	stw	r3,0(r8)
    a218:	d8801c15 	stw	r2,112(sp)
    a21c:	d9801b15 	stw	r6,108(sp)
    a220:	00c001c4 	movi	r3,7
    a224:	19829416 	blt	r3,r6,ac78 <___vfiprintf_internal_r+0x1030>
    a228:	8521c83a 	sub	r16,r16,r20
    a22c:	42000204 	addi	r8,r8,8
    a230:	31400044 	addi	r5,r6,1
    a234:	3009883a 	mov	r4,r6
    a238:	04018716 	blt	zero,r16,a858 <___vfiprintf_internal_r+0xc10>
    a23c:	a085883a 	add	r2,r20,r2
    a240:	45c00015 	stw	r23,0(r8)
    a244:	45000115 	stw	r20,4(r8)
    a248:	d8801c15 	stw	r2,112(sp)
    a24c:	d9401b15 	stw	r5,108(sp)
    a250:	00c001c4 	movi	r3,7
    a254:	1941c20e 	bge	r3,r5,a960 <___vfiprintf_internal_r+0xd18>
    a258:	1002531e 	bne	r2,zero,aba8 <___vfiprintf_internal_r+0xf60>
    a25c:	d8001b15 	stw	zero,108(sp)
    a260:	8c40010c 	andi	r17,r17,4
    a264:	88023226 	beq	r17,zero,ab30 <___vfiprintf_internal_r+0xee8>
    a268:	d9002517 	ldw	r4,148(sp)
    a26c:	24e3c83a 	sub	r17,r4,r19
    a270:	04432916 	blt	zero,r17,af18 <___vfiprintf_internal_r+0x12d0>
    a274:	d8802517 	ldw	r2,148(sp)
    a278:	14c0010e 	bge	r2,r19,a280 <___vfiprintf_internal_r+0x638>
    a27c:	9805883a 	mov	r2,r19
    a280:	d8c02417 	ldw	r3,144(sp)
    a284:	1887883a 	add	r3,r3,r2
    a288:	d8c02415 	stw	r3,144(sp)
    a28c:	d8001b15 	stw	zero,108(sp)
    a290:	d811883a 	mov	r8,sp
    a294:	003ea006 	br	9d18 <___vfiprintf_internal_r+0xd0>
    a298:	8c400814 	ori	r17,r17,32
    a29c:	b0c00007 	ldb	r3,0(r22)
    a2a0:	003ec606 	br	9dbc <___vfiprintf_internal_r+0x174>
    a2a4:	b0c00007 	ldb	r3,0(r22)
    a2a8:	00801b04 	movi	r2,108
    a2ac:	18832026 	beq	r3,r2,af30 <___vfiprintf_internal_r+0x12e8>
    a2b0:	8c400414 	ori	r17,r17,16
    a2b4:	003ec106 	br	9dbc <___vfiprintf_internal_r+0x174>
    a2b8:	9cc03fcc 	andi	r19,r19,255
    a2bc:	b811883a 	mov	r8,r23
    a2c0:	9803981e 	bne	r19,zero,b124 <___vfiprintf_internal_r+0x14dc>
    a2c4:	8880080c 	andi	r2,r17,32
    a2c8:	1002be26 	beq	r2,zero,adc4 <___vfiprintf_internal_r+0x117c>
    a2cc:	d9002217 	ldw	r4,136(sp)
    a2d0:	d9402417 	ldw	r5,144(sp)
    a2d4:	20800017 	ldw	r2,0(r4)
    a2d8:	2807d7fa 	srai	r3,r5,31
    a2dc:	21000104 	addi	r4,r4,4
    a2e0:	d9002215 	stw	r4,136(sp)
    a2e4:	11400015 	stw	r5,0(r2)
    a2e8:	10c00115 	stw	r3,4(r2)
    a2ec:	003e8a06 	br	9d18 <___vfiprintf_internal_r+0xd0>
    a2f0:	9cc03fcc 	andi	r19,r19,255
    a2f4:	b811883a 	mov	r8,r23
    a2f8:	9803871e 	bne	r19,zero,b118 <___vfiprintf_internal_r+0x14d0>
    a2fc:	8880080c 	andi	r2,r17,32
    a300:	10009a26 	beq	r2,zero,a56c <___vfiprintf_internal_r+0x924>
    a304:	d9002217 	ldw	r4,136(sp)
    a308:	d8001d85 	stb	zero,118(sp)
    a30c:	20800204 	addi	r2,r4,8
    a310:	24c00017 	ldw	r19,0(r4)
    a314:	25000117 	ldw	r20,4(r4)
    a318:	8002a416 	blt	r16,zero,adac <___vfiprintf_internal_r+0x1164>
    a31c:	013fdfc4 	movi	r4,-129
    a320:	9d06b03a 	or	r3,r19,r20
    a324:	d8802215 	stw	r2,136(sp)
    a328:	8922703a 	and	r17,r17,r4
    a32c:	18009b26 	beq	r3,zero,a59c <___vfiprintf_internal_r+0x954>
    a330:	002b883a 	mov	r21,zero
    a334:	ddc01a04 	addi	r23,sp,104
    a338:	9806d0fa 	srli	r3,r19,3
    a33c:	a008977a 	slli	r4,r20,29
    a340:	a028d0fa 	srli	r20,r20,3
    a344:	9cc001cc 	andi	r19,r19,7
    a348:	98800c04 	addi	r2,r19,48
    a34c:	bdffffc4 	addi	r23,r23,-1
    a350:	20e6b03a 	or	r19,r4,r3
    a354:	b8800005 	stb	r2,0(r23)
    a358:	9d06b03a 	or	r3,r19,r20
    a35c:	183ff61e 	bne	r3,zero,a338 <___vfiprintf_internal_r+0x6f0>
    a360:	88c0004c 	andi	r3,r17,1
    a364:	18021f1e 	bne	r3,zero,abe4 <___vfiprintf_internal_r+0xf9c>
    a368:	d9401e17 	ldw	r5,120(sp)
    a36c:	2de9c83a 	sub	r20,r5,r23
    a370:	003f3806 	br	a054 <___vfiprintf_internal_r+0x40c>
    a374:	9cc03fcc 	andi	r19,r19,255
    a378:	b811883a 	mov	r8,r23
    a37c:	98034f1e 	bne	r19,zero,b0bc <___vfiprintf_internal_r+0x1474>
    a380:	00800074 	movhi	r2,1
    a384:	10886204 	addi	r2,r2,8584
    a388:	d8802615 	stw	r2,152(sp)
    a38c:	8880080c 	andi	r2,r17,32
    a390:	1000ac26 	beq	r2,zero,a644 <___vfiprintf_internal_r+0x9fc>
    a394:	d9002217 	ldw	r4,136(sp)
    a398:	24c00017 	ldw	r19,0(r4)
    a39c:	25000117 	ldw	r20,4(r4)
    a3a0:	21000204 	addi	r4,r4,8
    a3a4:	d9002215 	stw	r4,136(sp)
    a3a8:	8880004c 	andi	r2,r17,1
    a3ac:	1001e726 	beq	r2,zero,ab4c <___vfiprintf_internal_r+0xf04>
    a3b0:	9d04b03a 	or	r2,r19,r20
    a3b4:	10025c1e 	bne	r2,zero,ad28 <___vfiprintf_internal_r+0x10e0>
    a3b8:	d8001d85 	stb	zero,118(sp)
    a3bc:	80024416 	blt	r16,zero,acd0 <___vfiprintf_internal_r+0x1088>
    a3c0:	00bfdfc4 	movi	r2,-129
    a3c4:	88a2703a 	and	r17,r17,r2
    a3c8:	003f1d06 	br	a040 <___vfiprintf_internal_r+0x3f8>
    a3cc:	d8c02217 	ldw	r3,136(sp)
    a3d0:	04c00044 	movi	r19,1
    a3d4:	b811883a 	mov	r8,r23
    a3d8:	18800017 	ldw	r2,0(r3)
    a3dc:	18c00104 	addi	r3,r3,4
    a3e0:	d8001d85 	stb	zero,118(sp)
    a3e4:	d8801005 	stb	r2,64(sp)
    a3e8:	d8c02215 	stw	r3,136(sp)
    a3ec:	9829883a 	mov	r20,r19
    a3f0:	ddc01004 	addi	r23,sp,64
    a3f4:	0021883a 	mov	r16,zero
    a3f8:	003f1e06 	br	a074 <___vfiprintf_internal_r+0x42c>
    a3fc:	9cc03fcc 	andi	r19,r19,255
    a400:	b811883a 	mov	r8,r23
    a404:	9803331e 	bne	r19,zero,b0d4 <___vfiprintf_internal_r+0x148c>
    a408:	8880080c 	andi	r2,r17,32
    a40c:	10004826 	beq	r2,zero,a530 <___vfiprintf_internal_r+0x8e8>
    a410:	d9002217 	ldw	r4,136(sp)
    a414:	20800117 	ldw	r2,4(r4)
    a418:	24c00017 	ldw	r19,0(r4)
    a41c:	21000204 	addi	r4,r4,8
    a420:	d9002215 	stw	r4,136(sp)
    a424:	1029883a 	mov	r20,r2
    a428:	10024c16 	blt	r2,zero,ad5c <___vfiprintf_internal_r+0x1114>
    a42c:	dd401d83 	ldbu	r21,118(sp)
    a430:	80007116 	blt	r16,zero,a5f8 <___vfiprintf_internal_r+0x9b0>
    a434:	00ffdfc4 	movi	r3,-129
    a438:	9d04b03a 	or	r2,r19,r20
    a43c:	88e2703a 	and	r17,r17,r3
    a440:	1000d126 	beq	r2,zero,a788 <___vfiprintf_internal_r+0xb40>
    a444:	a0023526 	beq	r20,zero,ad1c <___vfiprintf_internal_r+0x10d4>
    a448:	ddc01a04 	addi	r23,sp,104
    a44c:	4039883a 	mov	fp,r8
    a450:	9809883a 	mov	r4,r19
    a454:	a00b883a 	mov	r5,r20
    a458:	01800284 	movi	r6,10
    a45c:	000f883a 	mov	r7,zero
    a460:	000c1740 	call	c174 <__umoddi3>
    a464:	10800c04 	addi	r2,r2,48
    a468:	bdffffc4 	addi	r23,r23,-1
    a46c:	9809883a 	mov	r4,r19
    a470:	a00b883a 	mov	r5,r20
    a474:	b8800005 	stb	r2,0(r23)
    a478:	01800284 	movi	r6,10
    a47c:	000f883a 	mov	r7,zero
    a480:	000bb780 	call	bb78 <__udivdi3>
    a484:	1027883a 	mov	r19,r2
    a488:	10c4b03a 	or	r2,r2,r3
    a48c:	1829883a 	mov	r20,r3
    a490:	103fef1e 	bne	r2,zero,a450 <___vfiprintf_internal_r+0x808>
    a494:	d9001e17 	ldw	r4,120(sp)
    a498:	e011883a 	mov	r8,fp
    a49c:	25e9c83a 	sub	r20,r4,r23
    a4a0:	003eec06 	br	a054 <___vfiprintf_internal_r+0x40c>
    a4a4:	d8802307 	ldb	r2,140(sp)
    a4a8:	1002361e 	bne	r2,zero,ad84 <___vfiprintf_internal_r+0x113c>
    a4ac:	00c00804 	movi	r3,32
    a4b0:	d8c02305 	stb	r3,140(sp)
    a4b4:	04c00044 	movi	r19,1
    a4b8:	b0c00007 	ldb	r3,0(r22)
    a4bc:	003e3f06 	br	9dbc <___vfiprintf_internal_r+0x174>
    a4c0:	8c400054 	ori	r17,r17,1
    a4c4:	b0c00007 	ldb	r3,0(r22)
    a4c8:	003e3c06 	br	9dbc <___vfiprintf_internal_r+0x174>
    a4cc:	8c402014 	ori	r17,r17,128
    a4d0:	b0c00007 	ldb	r3,0(r22)
    a4d4:	003e3906 	br	9dbc <___vfiprintf_internal_r+0x174>
    a4d8:	dc002715 	stw	r16,156(sp)
    a4dc:	d8002515 	stw	zero,148(sp)
    a4e0:	1f3ff404 	addi	fp,r3,-48
    a4e4:	0009883a 	mov	r4,zero
    a4e8:	b021883a 	mov	r16,r22
    a4ec:	01400284 	movi	r5,10
    a4f0:	000c8ec0 	call	c8ec <__mulsi3>
    a4f4:	80c00007 	ldb	r3,0(r16)
    a4f8:	e089883a 	add	r4,fp,r2
    a4fc:	b5800044 	addi	r22,r22,1
    a500:	1f3ff404 	addi	fp,r3,-48
    a504:	b021883a 	mov	r16,r22
    a508:	af3ff82e 	bgeu	r21,fp,a4ec <___vfiprintf_internal_r+0x8a4>
    a50c:	d9002515 	stw	r4,148(sp)
    a510:	dc002717 	ldw	r16,156(sp)
    a514:	003e2a06 	br	9dc0 <___vfiprintf_internal_r+0x178>
    a518:	9cc03fcc 	andi	r19,r19,255
    a51c:	b811883a 	mov	r8,r23
    a520:	9802e91e 	bne	r19,zero,b0c8 <___vfiprintf_internal_r+0x1480>
    a524:	8c400414 	ori	r17,r17,16
    a528:	8880080c 	andi	r2,r17,32
    a52c:	103fb81e 	bne	r2,zero,a410 <___vfiprintf_internal_r+0x7c8>
    a530:	8880040c 	andi	r2,r17,16
    a534:	10022e26 	beq	r2,zero,adf0 <___vfiprintf_internal_r+0x11a8>
    a538:	d9402217 	ldw	r5,136(sp)
    a53c:	2cc00017 	ldw	r19,0(r5)
    a540:	29400104 	addi	r5,r5,4
    a544:	d9402215 	stw	r5,136(sp)
    a548:	9829d7fa 	srai	r20,r19,31
    a54c:	a005883a 	mov	r2,r20
    a550:	003fb506 	br	a428 <___vfiprintf_internal_r+0x7e0>
    a554:	9cc03fcc 	andi	r19,r19,255
    a558:	b811883a 	mov	r8,r23
    a55c:	9802fa1e 	bne	r19,zero,b148 <___vfiprintf_internal_r+0x1500>
    a560:	8c400414 	ori	r17,r17,16
    a564:	8880080c 	andi	r2,r17,32
    a568:	103f661e 	bne	r2,zero,a304 <___vfiprintf_internal_r+0x6bc>
    a56c:	8880040c 	andi	r2,r17,16
    a570:	10020626 	beq	r2,zero,ad8c <___vfiprintf_internal_r+0x1144>
    a574:	d9402217 	ldw	r5,136(sp)
    a578:	d8001d85 	stb	zero,118(sp)
    a57c:	0029883a 	mov	r20,zero
    a580:	28800104 	addi	r2,r5,4
    a584:	2cc00017 	ldw	r19,0(r5)
    a588:	80020816 	blt	r16,zero,adac <___vfiprintf_internal_r+0x1164>
    a58c:	00ffdfc4 	movi	r3,-129
    a590:	d8802215 	stw	r2,136(sp)
    a594:	88e2703a 	and	r17,r17,r3
    a598:	983f651e 	bne	r19,zero,a330 <___vfiprintf_internal_r+0x6e8>
    a59c:	002b883a 	mov	r21,zero
    a5a0:	8002cf26 	beq	r16,zero,b0e0 <___vfiprintf_internal_r+0x1498>
    a5a4:	0027883a 	mov	r19,zero
    a5a8:	0029883a 	mov	r20,zero
    a5ac:	003f6106 	br	a334 <___vfiprintf_internal_r+0x6ec>
    a5b0:	9cc03fcc 	andi	r19,r19,255
    a5b4:	b811883a 	mov	r8,r23
    a5b8:	9802e01e 	bne	r19,zero,b13c <___vfiprintf_internal_r+0x14f4>
    a5bc:	8c400414 	ori	r17,r17,16
    a5c0:	8880080c 	andi	r2,r17,32
    a5c4:	1000641e 	bne	r2,zero,a758 <___vfiprintf_internal_r+0xb10>
    a5c8:	8880040c 	andi	r2,r17,16
    a5cc:	1001c81e 	bne	r2,zero,acf0 <___vfiprintf_internal_r+0x10a8>
    a5d0:	8880100c 	andi	r2,r17,64
    a5d4:	d8001d85 	stb	zero,118(sp)
    a5d8:	1002281e 	bne	r2,zero,ae7c <___vfiprintf_internal_r+0x1234>
    a5dc:	d9002217 	ldw	r4,136(sp)
    a5e0:	0029883a 	mov	r20,zero
    a5e4:	20800104 	addi	r2,r4,4
    a5e8:	24c00017 	ldw	r19,0(r4)
    a5ec:	8001c60e 	bge	r16,zero,ad08 <___vfiprintf_internal_r+0x10c0>
    a5f0:	d8802215 	stw	r2,136(sp)
    a5f4:	002b883a 	mov	r21,zero
    a5f8:	9d04b03a 	or	r2,r19,r20
    a5fc:	103f911e 	bne	r2,zero,a444 <___vfiprintf_internal_r+0x7fc>
    a600:	00800044 	movi	r2,1
    a604:	10803fcc 	andi	r2,r2,255
    a608:	00c00044 	movi	r3,1
    a60c:	10c05f26 	beq	r2,r3,a78c <___vfiprintf_internal_r+0xb44>
    a610:	00c00084 	movi	r3,2
    a614:	10ffe31e 	bne	r2,r3,a5a4 <___vfiprintf_internal_r+0x95c>
    a618:	0027883a 	mov	r19,zero
    a61c:	0029883a 	mov	r20,zero
    a620:	00015106 	br	ab68 <___vfiprintf_internal_r+0xf20>
    a624:	9cc03fcc 	andi	r19,r19,255
    a628:	b811883a 	mov	r8,r23
    a62c:	9802c01e 	bne	r19,zero,b130 <___vfiprintf_internal_r+0x14e8>
    a630:	01400074 	movhi	r5,1
    a634:	29485d04 	addi	r5,r5,8564
    a638:	d9402615 	stw	r5,152(sp)
    a63c:	8880080c 	andi	r2,r17,32
    a640:	103f541e 	bne	r2,zero,a394 <___vfiprintf_internal_r+0x74c>
    a644:	8880040c 	andi	r2,r17,16
    a648:	1001f226 	beq	r2,zero,ae14 <___vfiprintf_internal_r+0x11cc>
    a64c:	d9402217 	ldw	r5,136(sp)
    a650:	0029883a 	mov	r20,zero
    a654:	2cc00017 	ldw	r19,0(r5)
    a658:	29400104 	addi	r5,r5,4
    a65c:	d9402215 	stw	r5,136(sp)
    a660:	003f5106 	br	a3a8 <___vfiprintf_internal_r+0x760>
    a664:	d8c02217 	ldw	r3,136(sp)
    a668:	b811883a 	mov	r8,r23
    a66c:	d8001d85 	stb	zero,118(sp)
    a670:	1dc00017 	ldw	r23,0(r3)
    a674:	1f000104 	addi	fp,r3,4
    a678:	b8025926 	beq	r23,zero,afe0 <___vfiprintf_internal_r+0x1398>
    a67c:	80023316 	blt	r16,zero,af4c <___vfiprintf_internal_r+0x1304>
    a680:	800d883a 	mov	r6,r16
    a684:	000b883a 	mov	r5,zero
    a688:	b809883a 	mov	r4,r23
    a68c:	da002a15 	stw	r8,168(sp)
    a690:	0007d880 	call	7d88 <memchr>
    a694:	da002a17 	ldw	r8,168(sp)
    a698:	10026826 	beq	r2,zero,b03c <___vfiprintf_internal_r+0x13f4>
    a69c:	15e9c83a 	sub	r20,r2,r23
    a6a0:	dd401d83 	ldbu	r21,118(sp)
    a6a4:	df002215 	stw	fp,136(sp)
    a6a8:	0021883a 	mov	r16,zero
    a6ac:	003e6906 	br	a054 <___vfiprintf_internal_r+0x40c>
    a6b0:	9cc03fcc 	andi	r19,r19,255
    a6b4:	b811883a 	mov	r8,r23
    a6b8:	983fc126 	beq	r19,zero,a5c0 <___vfiprintf_internal_r+0x978>
    a6bc:	d8c02303 	ldbu	r3,140(sp)
    a6c0:	d8c01d85 	stb	r3,118(sp)
    a6c4:	003fbe06 	br	a5c0 <___vfiprintf_internal_r+0x978>
    a6c8:	d9002217 	ldw	r4,136(sp)
    a6cc:	d9402217 	ldw	r5,136(sp)
    a6d0:	21000017 	ldw	r4,0(r4)
    a6d4:	28800104 	addi	r2,r5,4
    a6d8:	d9002515 	stw	r4,148(sp)
    a6dc:	203e3d16 	blt	r4,zero,9fd4 <___vfiprintf_internal_r+0x38c>
    a6e0:	d8802215 	stw	r2,136(sp)
    a6e4:	b0c00007 	ldb	r3,0(r22)
    a6e8:	003db406 	br	9dbc <___vfiprintf_internal_r+0x174>
    a6ec:	00c00ac4 	movi	r3,43
    a6f0:	d8c02305 	stb	r3,140(sp)
    a6f4:	04c00044 	movi	r19,1
    a6f8:	b0c00007 	ldb	r3,0(r22)
    a6fc:	003daf06 	br	9dbc <___vfiprintf_internal_r+0x174>
    a700:	b0c00007 	ldb	r3,0(r22)
    a704:	01000a84 	movi	r4,42
    a708:	b4000044 	addi	r16,r22,1
    a70c:	19025e26 	beq	r3,r4,b088 <___vfiprintf_internal_r+0x1440>
    a710:	1f3ff404 	addi	fp,r3,-48
    a714:	0009883a 	mov	r4,zero
    a718:	af025236 	bltu	r21,fp,b064 <___vfiprintf_internal_r+0x141c>
    a71c:	01400284 	movi	r5,10
    a720:	000c8ec0 	call	c8ec <__mulsi3>
    a724:	80c00007 	ldb	r3,0(r16)
    a728:	1709883a 	add	r4,r2,fp
    a72c:	85800044 	addi	r22,r16,1
    a730:	1f3ff404 	addi	fp,r3,-48
    a734:	b021883a 	mov	r16,r22
    a738:	af3ff82e 	bgeu	r21,fp,a71c <___vfiprintf_internal_r+0xad4>
    a73c:	2021883a 	mov	r16,r4
    a740:	203d9f0e 	bge	r4,zero,9dc0 <___vfiprintf_internal_r+0x178>
    a744:	043fffc4 	movi	r16,-1
    a748:	003d9d06 	br	9dc0 <___vfiprintf_internal_r+0x178>
    a74c:	8c401014 	ori	r17,r17,64
    a750:	b0c00007 	ldb	r3,0(r22)
    a754:	003d9906 	br	9dbc <___vfiprintf_internal_r+0x174>
    a758:	d9002217 	ldw	r4,136(sp)
    a75c:	d8001d85 	stb	zero,118(sp)
    a760:	20c00204 	addi	r3,r4,8
    a764:	24c00017 	ldw	r19,0(r4)
    a768:	25000117 	ldw	r20,4(r4)
    a76c:	8001e716 	blt	r16,zero,af0c <___vfiprintf_internal_r+0x12c4>
    a770:	013fdfc4 	movi	r4,-129
    a774:	9d04b03a 	or	r2,r19,r20
    a778:	d8c02215 	stw	r3,136(sp)
    a77c:	8922703a 	and	r17,r17,r4
    a780:	002b883a 	mov	r21,zero
    a784:	103f2f1e 	bne	r2,zero,a444 <___vfiprintf_internal_r+0x7fc>
    a788:	803e2f26 	beq	r16,zero,a048 <___vfiprintf_internal_r+0x400>
    a78c:	0027883a 	mov	r19,zero
    a790:	9cc00c04 	addi	r19,r19,48
    a794:	dcc019c5 	stb	r19,103(sp)
    a798:	dd002817 	ldw	r20,160(sp)
    a79c:	ddc019c4 	addi	r23,sp,103
    a7a0:	003e2c06 	br	a054 <___vfiprintf_internal_r+0x40c>
    a7a4:	9cc03fcc 	andi	r19,r19,255
    a7a8:	b811883a 	mov	r8,r23
    a7ac:	9802571e 	bne	r19,zero,b10c <___vfiprintf_internal_r+0x14c4>
    a7b0:	18005726 	beq	r3,zero,a910 <___vfiprintf_internal_r+0xcc8>
    a7b4:	04c00044 	movi	r19,1
    a7b8:	d8c01005 	stb	r3,64(sp)
    a7bc:	d8001d85 	stb	zero,118(sp)
    a7c0:	9829883a 	mov	r20,r19
    a7c4:	ddc01004 	addi	r23,sp,64
    a7c8:	003f0a06 	br	a3f4 <___vfiprintf_internal_r+0x7ac>
    a7cc:	d9402017 	ldw	r5,128(sp)
    a7d0:	d9002117 	ldw	r4,132(sp)
    a7d4:	d9801a04 	addi	r6,sp,104
    a7d8:	da802a15 	stw	r10,168(sp)
    a7dc:	0009b340 	call	9b34 <__sprint_r.part.0>
    a7e0:	da802a17 	ldw	r10,168(sp)
    a7e4:	1000501e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    a7e8:	d9801b17 	ldw	r6,108(sp)
    a7ec:	d8801c17 	ldw	r2,112(sp)
    a7f0:	d811883a 	mov	r8,sp
    a7f4:	31000044 	addi	r4,r6,1
    a7f8:	003e3606 	br	a0d4 <___vfiprintf_internal_r+0x48c>
    a7fc:	d9001b17 	ldw	r4,108(sp)
    a800:	d8801c17 	ldw	r2,112(sp)
    a804:	21400044 	addi	r5,r4,1
    a808:	d9801d87 	ldb	r6,118(sp)
    a80c:	303e5226 	beq	r6,zero,a158 <___vfiprintf_internal_r+0x510>
    a810:	01800044 	movi	r6,1
    a814:	d9001d84 	addi	r4,sp,118
    a818:	1185883a 	add	r2,r2,r6
    a81c:	41000015 	stw	r4,0(r8)
    a820:	41800115 	stw	r6,4(r8)
    a824:	d8801c15 	stw	r2,112(sp)
    a828:	d9401b15 	stw	r5,108(sp)
    a82c:	010001c4 	movi	r4,7
    a830:	2140b00e 	bge	r4,r5,aaf4 <___vfiprintf_internal_r+0xeac>
    a834:	1000f61e 	bne	r2,zero,ac10 <___vfiprintf_internal_r+0xfc8>
    a838:	3800b31e 	bne	r7,zero,ab08 <___vfiprintf_internal_r+0xec0>
    a83c:	0009883a 	mov	r4,zero
    a840:	300b883a 	mov	r5,r6
    a844:	d811883a 	mov	r8,sp
    a848:	01802004 	movi	r6,128
    a84c:	19be5226 	beq	r3,r6,a198 <___vfiprintf_internal_r+0x550>
    a850:	8521c83a 	sub	r16,r16,r20
    a854:	043e790e 	bge	zero,r16,a23c <___vfiprintf_internal_r+0x5f4>
    a858:	05400404 	movi	r21,16
    a85c:	ac01b00e 	bge	r21,r16,af20 <___vfiprintf_internal_r+0x12d8>
    a860:	01400074 	movhi	r5,1
    a864:	2948c304 	addi	r5,r5,8972
    a868:	d9402315 	stw	r5,140(sp)
    a86c:	070001c4 	movi	fp,7
    a870:	00000506 	br	a888 <___vfiprintf_internal_r+0xc40>
    a874:	21400084 	addi	r5,r4,2
    a878:	42000204 	addi	r8,r8,8
    a87c:	1809883a 	mov	r4,r3
    a880:	843ffc04 	addi	r16,r16,-16
    a884:	ac000d0e 	bge	r21,r16,a8bc <___vfiprintf_internal_r+0xc74>
    a888:	10800404 	addi	r2,r2,16
    a88c:	20c00044 	addi	r3,r4,1
    a890:	44800015 	stw	r18,0(r8)
    a894:	45400115 	stw	r21,4(r8)
    a898:	d8801c15 	stw	r2,112(sp)
    a89c:	d8c01b15 	stw	r3,108(sp)
    a8a0:	e0fff40e 	bge	fp,r3,a874 <___vfiprintf_internal_r+0xc2c>
    a8a4:	1000101e 	bne	r2,zero,a8e8 <___vfiprintf_internal_r+0xca0>
    a8a8:	843ffc04 	addi	r16,r16,-16
    a8ac:	01400044 	movi	r5,1
    a8b0:	0009883a 	mov	r4,zero
    a8b4:	d811883a 	mov	r8,sp
    a8b8:	ac3ff316 	blt	r21,r16,a888 <___vfiprintf_internal_r+0xc40>
    a8bc:	d8c02317 	ldw	r3,140(sp)
    a8c0:	1405883a 	add	r2,r2,r16
    a8c4:	44000115 	stw	r16,4(r8)
    a8c8:	40c00015 	stw	r3,0(r8)
    a8cc:	d8801c15 	stw	r2,112(sp)
    a8d0:	d9401b15 	stw	r5,108(sp)
    a8d4:	00c001c4 	movi	r3,7
    a8d8:	19401916 	blt	r3,r5,a940 <___vfiprintf_internal_r+0xcf8>
    a8dc:	42000204 	addi	r8,r8,8
    a8e0:	29400044 	addi	r5,r5,1
    a8e4:	003e5506 	br	a23c <___vfiprintf_internal_r+0x5f4>
    a8e8:	d9402017 	ldw	r5,128(sp)
    a8ec:	d9002117 	ldw	r4,132(sp)
    a8f0:	d9801a04 	addi	r6,sp,104
    a8f4:	0009b340 	call	9b34 <__sprint_r.part.0>
    a8f8:	10000b1e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    a8fc:	d9001b17 	ldw	r4,108(sp)
    a900:	d8801c17 	ldw	r2,112(sp)
    a904:	d811883a 	mov	r8,sp
    a908:	21400044 	addi	r5,r4,1
    a90c:	003fdc06 	br	a880 <___vfiprintf_internal_r+0xc38>
    a910:	d8801c17 	ldw	r2,112(sp)
    a914:	10000426 	beq	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    a918:	d9402017 	ldw	r5,128(sp)
    a91c:	d9002117 	ldw	r4,132(sp)
    a920:	d9801a04 	addi	r6,sp,104
    a924:	0009b340 	call	9b34 <__sprint_r.part.0>
    a928:	d9402017 	ldw	r5,128(sp)
    a92c:	2880030b 	ldhu	r2,12(r5)
    a930:	1080100c 	andi	r2,r2,64
    a934:	10014d1e 	bne	r2,zero,ae6c <___vfiprintf_internal_r+0x1224>
    a938:	d8802417 	ldw	r2,144(sp)
    a93c:	003d9706 	br	9f9c <___vfiprintf_internal_r+0x354>
    a940:	1000d21e 	bne	r2,zero,ac8c <___vfiprintf_internal_r+0x1044>
    a944:	00c00044 	movi	r3,1
    a948:	a005883a 	mov	r2,r20
    a94c:	ddc00015 	stw	r23,0(sp)
    a950:	dd000115 	stw	r20,4(sp)
    a954:	dd001c15 	stw	r20,112(sp)
    a958:	d8c01b15 	stw	r3,108(sp)
    a95c:	d811883a 	mov	r8,sp
    a960:	42000204 	addi	r8,r8,8
    a964:	8c40010c 	andi	r17,r17,4
    a968:	88004026 	beq	r17,zero,aa6c <___vfiprintf_internal_r+0xe24>
    a96c:	d9002517 	ldw	r4,148(sp)
    a970:	24e3c83a 	sub	r17,r4,r19
    a974:	04403d0e 	bge	zero,r17,aa6c <___vfiprintf_internal_r+0xe24>
    a978:	04000404 	movi	r16,16
    a97c:	8441a90e 	bge	r16,r17,b024 <___vfiprintf_internal_r+0x13dc>
    a980:	00c00074 	movhi	r3,1
    a984:	18c8c704 	addi	r3,r3,8988
    a988:	d9001b17 	ldw	r4,108(sp)
    a98c:	d8c02315 	stw	r3,140(sp)
    a990:	050001c4 	movi	r20,7
    a994:	dd402117 	ldw	r21,132(sp)
    a998:	ddc02017 	ldw	r23,128(sp)
    a99c:	00000506 	br	a9b4 <___vfiprintf_internal_r+0xd6c>
    a9a0:	21400084 	addi	r5,r4,2
    a9a4:	42000204 	addi	r8,r8,8
    a9a8:	1809883a 	mov	r4,r3
    a9ac:	8c7ffc04 	addi	r17,r17,-16
    a9b0:	84400f0e 	bge	r16,r17,a9f0 <___vfiprintf_internal_r+0xda8>
    a9b4:	01400074 	movhi	r5,1
    a9b8:	10800404 	addi	r2,r2,16
    a9bc:	20c00044 	addi	r3,r4,1
    a9c0:	2948c704 	addi	r5,r5,8988
    a9c4:	41400015 	stw	r5,0(r8)
    a9c8:	44000115 	stw	r16,4(r8)
    a9cc:	d8801c15 	stw	r2,112(sp)
    a9d0:	d8c01b15 	stw	r3,108(sp)
    a9d4:	a0fff20e 	bge	r20,r3,a9a0 <___vfiprintf_internal_r+0xd58>
    a9d8:	1000141e 	bne	r2,zero,aa2c <___vfiprintf_internal_r+0xde4>
    a9dc:	8c7ffc04 	addi	r17,r17,-16
    a9e0:	01400044 	movi	r5,1
    a9e4:	0009883a 	mov	r4,zero
    a9e8:	d811883a 	mov	r8,sp
    a9ec:	847ff116 	blt	r16,r17,a9b4 <___vfiprintf_internal_r+0xd6c>
    a9f0:	d8c02317 	ldw	r3,140(sp)
    a9f4:	1445883a 	add	r2,r2,r17
    a9f8:	44400115 	stw	r17,4(r8)
    a9fc:	40c00015 	stw	r3,0(r8)
    aa00:	d8801c15 	stw	r2,112(sp)
    aa04:	d9401b15 	stw	r5,108(sp)
    aa08:	00c001c4 	movi	r3,7
    aa0c:	1940170e 	bge	r3,r5,aa6c <___vfiprintf_internal_r+0xe24>
    aa10:	1000101e 	bne	r2,zero,aa54 <___vfiprintf_internal_r+0xe0c>
    aa14:	d8802517 	ldw	r2,148(sp)
    aa18:	14c11616 	blt	r2,r19,ae74 <___vfiprintf_internal_r+0x122c>
    aa1c:	d9002417 	ldw	r4,144(sp)
    aa20:	2089883a 	add	r4,r4,r2
    aa24:	d9002415 	stw	r4,144(sp)
    aa28:	003e1806 	br	a28c <___vfiprintf_internal_r+0x644>
    aa2c:	d9801a04 	addi	r6,sp,104
    aa30:	b80b883a 	mov	r5,r23
    aa34:	a809883a 	mov	r4,r21
    aa38:	0009b340 	call	9b34 <__sprint_r.part.0>
    aa3c:	103fba1e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    aa40:	d9001b17 	ldw	r4,108(sp)
    aa44:	d8801c17 	ldw	r2,112(sp)
    aa48:	d811883a 	mov	r8,sp
    aa4c:	21400044 	addi	r5,r4,1
    aa50:	003fd606 	br	a9ac <___vfiprintf_internal_r+0xd64>
    aa54:	d9402017 	ldw	r5,128(sp)
    aa58:	d9002117 	ldw	r4,132(sp)
    aa5c:	d9801a04 	addi	r6,sp,104
    aa60:	0009b340 	call	9b34 <__sprint_r.part.0>
    aa64:	103fb01e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    aa68:	d8801c17 	ldw	r2,112(sp)
    aa6c:	d8c02517 	ldw	r3,148(sp)
    aa70:	1cc0010e 	bge	r3,r19,aa78 <___vfiprintf_internal_r+0xe30>
    aa74:	9807883a 	mov	r3,r19
    aa78:	d9002417 	ldw	r4,144(sp)
    aa7c:	20c9883a 	add	r4,r4,r3
    aa80:	d9002415 	stw	r4,144(sp)
    aa84:	103e0126 	beq	r2,zero,a28c <___vfiprintf_internal_r+0x644>
    aa88:	d9402017 	ldw	r5,128(sp)
    aa8c:	d9002117 	ldw	r4,132(sp)
    aa90:	d9801a04 	addi	r6,sp,104
    aa94:	0009b340 	call	9b34 <__sprint_r.part.0>
    aa98:	103dfc26 	beq	r2,zero,a28c <___vfiprintf_internal_r+0x644>
    aa9c:	003fa206 	br	a928 <___vfiprintf_internal_r+0xce0>
    aaa0:	d9402017 	ldw	r5,128(sp)
    aaa4:	d9002117 	ldw	r4,132(sp)
    aaa8:	d9801a04 	addi	r6,sp,104
    aaac:	d9c02b15 	stw	r7,172(sp)
    aab0:	0009b340 	call	9b34 <__sprint_r.part.0>
    aab4:	d9c02b17 	ldw	r7,172(sp)
    aab8:	103f9b1e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    aabc:	d9001b17 	ldw	r4,108(sp)
    aac0:	d8801c17 	ldw	r2,112(sp)
    aac4:	d811883a 	mov	r8,sp
    aac8:	21800044 	addi	r6,r4,1
    aacc:	003dbf06 	br	a1cc <___vfiprintf_internal_r+0x584>
    aad0:	1000d81e 	bne	r2,zero,ae34 <___vfiprintf_internal_r+0x11ec>
    aad4:	d9001d87 	ldb	r4,118(sp)
    aad8:	20000a26 	beq	r4,zero,ab04 <___vfiprintf_internal_r+0xebc>
    aadc:	00800044 	movi	r2,1
    aae0:	d9001d84 	addi	r4,sp,118
    aae4:	100b883a 	mov	r5,r2
    aae8:	d9000015 	stw	r4,0(sp)
    aaec:	d8800115 	stw	r2,4(sp)
    aaf0:	d811883a 	mov	r8,sp
    aaf4:	2809883a 	mov	r4,r5
    aaf8:	42000204 	addi	r8,r8,8
    aafc:	29400044 	addi	r5,r5,1
    ab00:	003d9506 	br	a158 <___vfiprintf_internal_r+0x510>
    ab04:	3800fd26 	beq	r7,zero,aefc <___vfiprintf_internal_r+0x12b4>
    ab08:	00800084 	movi	r2,2
    ab0c:	d9001d04 	addi	r4,sp,116
    ab10:	d9000015 	stw	r4,0(sp)
    ab14:	d8800115 	stw	r2,4(sp)
    ab18:	01400044 	movi	r5,1
    ab1c:	d811883a 	mov	r8,sp
    ab20:	2809883a 	mov	r4,r5
    ab24:	42000204 	addi	r8,r8,8
    ab28:	29400044 	addi	r5,r5,1
    ab2c:	003f4606 	br	a848 <___vfiprintf_internal_r+0xc00>
    ab30:	d8802517 	ldw	r2,148(sp)
    ab34:	14c0010e 	bge	r2,r19,ab3c <___vfiprintf_internal_r+0xef4>
    ab38:	9805883a 	mov	r2,r19
    ab3c:	d9402417 	ldw	r5,144(sp)
    ab40:	288b883a 	add	r5,r5,r2
    ab44:	d9402415 	stw	r5,144(sp)
    ab48:	003dd006 	br	a28c <___vfiprintf_internal_r+0x644>
    ab4c:	d8001d85 	stb	zero,118(sp)
    ab50:	80005d16 	blt	r16,zero,acc8 <___vfiprintf_internal_r+0x1080>
    ab54:	00ffdfc4 	movi	r3,-129
    ab58:	9d04b03a 	or	r2,r19,r20
    ab5c:	88e2703a 	and	r17,r17,r3
    ab60:	103d3726 	beq	r2,zero,a040 <___vfiprintf_internal_r+0x3f8>
    ab64:	002b883a 	mov	r21,zero
    ab68:	d9002617 	ldw	r4,152(sp)
    ab6c:	ddc01a04 	addi	r23,sp,104
    ab70:	988003cc 	andi	r2,r19,15
    ab74:	a006973a 	slli	r3,r20,28
    ab78:	2085883a 	add	r2,r4,r2
    ab7c:	9826d13a 	srli	r19,r19,4
    ab80:	10800003 	ldbu	r2,0(r2)
    ab84:	a028d13a 	srli	r20,r20,4
    ab88:	bdffffc4 	addi	r23,r23,-1
    ab8c:	1ce6b03a 	or	r19,r3,r19
    ab90:	b8800005 	stb	r2,0(r23)
    ab94:	9d04b03a 	or	r2,r19,r20
    ab98:	103ff51e 	bne	r2,zero,ab70 <___vfiprintf_internal_r+0xf28>
    ab9c:	d8801e17 	ldw	r2,120(sp)
    aba0:	15e9c83a 	sub	r20,r2,r23
    aba4:	003d2b06 	br	a054 <___vfiprintf_internal_r+0x40c>
    aba8:	d9402017 	ldw	r5,128(sp)
    abac:	d9002117 	ldw	r4,132(sp)
    abb0:	d9801a04 	addi	r6,sp,104
    abb4:	0009b340 	call	9b34 <__sprint_r.part.0>
    abb8:	103f5b1e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    abbc:	d8801c17 	ldw	r2,112(sp)
    abc0:	d811883a 	mov	r8,sp
    abc4:	003f6706 	br	a964 <___vfiprintf_internal_r+0xd1c>
    abc8:	d9402017 	ldw	r5,128(sp)
    abcc:	d9002117 	ldw	r4,132(sp)
    abd0:	d9801a04 	addi	r6,sp,104
    abd4:	0009b340 	call	9b34 <__sprint_r.part.0>
    abd8:	103f531e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    abdc:	d811883a 	mov	r8,sp
    abe0:	003cd906 	br	9f48 <___vfiprintf_internal_r+0x300>
    abe4:	10803fcc 	andi	r2,r2,255
    abe8:	1080201c 	xori	r2,r2,128
    abec:	10bfe004 	addi	r2,r2,-128
    abf0:	00c00c04 	movi	r3,48
    abf4:	10ffe926 	beq	r2,r3,ab9c <___vfiprintf_internal_r+0xf54>
    abf8:	b8ffffc5 	stb	r3,-1(r23)
    abfc:	d8c01e17 	ldw	r3,120(sp)
    ac00:	b8bfffc4 	addi	r2,r23,-1
    ac04:	102f883a 	mov	r23,r2
    ac08:	18a9c83a 	sub	r20,r3,r2
    ac0c:	003d1106 	br	a054 <___vfiprintf_internal_r+0x40c>
    ac10:	d9402017 	ldw	r5,128(sp)
    ac14:	d9002117 	ldw	r4,132(sp)
    ac18:	d9801a04 	addi	r6,sp,104
    ac1c:	d8c02a15 	stw	r3,168(sp)
    ac20:	d9c02b15 	stw	r7,172(sp)
    ac24:	0009b340 	call	9b34 <__sprint_r.part.0>
    ac28:	d8c02a17 	ldw	r3,168(sp)
    ac2c:	d9c02b17 	ldw	r7,172(sp)
    ac30:	103f3d1e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    ac34:	d9001b17 	ldw	r4,108(sp)
    ac38:	d8801c17 	ldw	r2,112(sp)
    ac3c:	d811883a 	mov	r8,sp
    ac40:	21400044 	addi	r5,r4,1
    ac44:	003d4406 	br	a158 <___vfiprintf_internal_r+0x510>
    ac48:	d9402017 	ldw	r5,128(sp)
    ac4c:	d9002117 	ldw	r4,132(sp)
    ac50:	d9801a04 	addi	r6,sp,104
    ac54:	d8c02a15 	stw	r3,168(sp)
    ac58:	0009b340 	call	9b34 <__sprint_r.part.0>
    ac5c:	d8c02a17 	ldw	r3,168(sp)
    ac60:	103f311e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    ac64:	d9001b17 	ldw	r4,108(sp)
    ac68:	d8801c17 	ldw	r2,112(sp)
    ac6c:	d811883a 	mov	r8,sp
    ac70:	21400044 	addi	r5,r4,1
    ac74:	003ef406 	br	a848 <___vfiprintf_internal_r+0xc00>
    ac78:	1000bd1e 	bne	r2,zero,af70 <___vfiprintf_internal_r+0x1328>
    ac7c:	01400044 	movi	r5,1
    ac80:	0009883a 	mov	r4,zero
    ac84:	d811883a 	mov	r8,sp
    ac88:	003ef106 	br	a850 <___vfiprintf_internal_r+0xc08>
    ac8c:	d9402017 	ldw	r5,128(sp)
    ac90:	d9002117 	ldw	r4,132(sp)
    ac94:	d9801a04 	addi	r6,sp,104
    ac98:	0009b340 	call	9b34 <__sprint_r.part.0>
    ac9c:	103f221e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    aca0:	d9401b17 	ldw	r5,108(sp)
    aca4:	d8801c17 	ldw	r2,112(sp)
    aca8:	d811883a 	mov	r8,sp
    acac:	29400044 	addi	r5,r5,1
    acb0:	003d6206 	br	a23c <___vfiprintf_internal_r+0x5f4>
    acb4:	01400074 	movhi	r5,1
    acb8:	29486204 	addi	r5,r5,8584
    acbc:	d9402615 	stw	r5,152(sp)
    acc0:	d8c02215 	stw	r3,136(sp)
    acc4:	1023883a 	mov	r17,r2
    acc8:	9d04b03a 	or	r2,r19,r20
    accc:	103fa51e 	bne	r2,zero,ab64 <___vfiprintf_internal_r+0xf1c>
    acd0:	002b883a 	mov	r21,zero
    acd4:	00800084 	movi	r2,2
    acd8:	003e4a06 	br	a604 <___vfiprintf_internal_r+0x9bc>
    acdc:	01400074 	movhi	r5,1
    ace0:	29486204 	addi	r5,r5,8584
    ace4:	002b883a 	mov	r21,zero
    ace8:	d9402615 	stw	r5,152(sp)
    acec:	003f9e06 	br	ab68 <___vfiprintf_internal_r+0xf20>
    acf0:	d9402217 	ldw	r5,136(sp)
    acf4:	d8001d85 	stb	zero,118(sp)
    acf8:	0029883a 	mov	r20,zero
    acfc:	28800104 	addi	r2,r5,4
    ad00:	2cc00017 	ldw	r19,0(r5)
    ad04:	803e3a16 	blt	r16,zero,a5f0 <___vfiprintf_internal_r+0x9a8>
    ad08:	00ffdfc4 	movi	r3,-129
    ad0c:	d8802215 	stw	r2,136(sp)
    ad10:	88e2703a 	and	r17,r17,r3
    ad14:	002b883a 	mov	r21,zero
    ad18:	983e9b26 	beq	r19,zero,a788 <___vfiprintf_internal_r+0xb40>
    ad1c:	00800244 	movi	r2,9
    ad20:	14fdc936 	bltu	r2,r19,a448 <___vfiprintf_internal_r+0x800>
    ad24:	003e9a06 	br	a790 <___vfiprintf_internal_r+0xb48>
    ad28:	00800c04 	movi	r2,48
    ad2c:	d8c01d45 	stb	r3,117(sp)
    ad30:	d8801d05 	stb	r2,116(sp)
    ad34:	d8001d85 	stb	zero,118(sp)
    ad38:	88c00094 	ori	r3,r17,2
    ad3c:	80009c16 	blt	r16,zero,afb0 <___vfiprintf_internal_r+0x1368>
    ad40:	00bfdfc4 	movi	r2,-129
    ad44:	88a2703a 	and	r17,r17,r2
    ad48:	8c400094 	ori	r17,r17,2
    ad4c:	002b883a 	mov	r21,zero
    ad50:	003f8506 	br	ab68 <___vfiprintf_internal_r+0xf20>
    ad54:	b029883a 	mov	r20,r22
    ad58:	003c0b06 	br	9d88 <___vfiprintf_internal_r+0x140>
    ad5c:	04e7c83a 	sub	r19,zero,r19
    ad60:	05400b44 	movi	r21,45
    ad64:	9804c03a 	cmpne	r2,r19,zero
    ad68:	0529c83a 	sub	r20,zero,r20
    ad6c:	dd401d85 	stb	r21,118(sp)
    ad70:	a0a9c83a 	sub	r20,r20,r2
    ad74:	80009716 	blt	r16,zero,afd4 <___vfiprintf_internal_r+0x138c>
    ad78:	00bfdfc4 	movi	r2,-129
    ad7c:	88a2703a 	and	r17,r17,r2
    ad80:	003db006 	br	a444 <___vfiprintf_internal_r+0x7fc>
    ad84:	b0c00007 	ldb	r3,0(r22)
    ad88:	003c0c06 	br	9dbc <___vfiprintf_internal_r+0x174>
    ad8c:	8880100c 	andi	r2,r17,64
    ad90:	d8001d85 	stb	zero,118(sp)
    ad94:	1000461e 	bne	r2,zero,aeb0 <___vfiprintf_internal_r+0x1268>
    ad98:	d9002217 	ldw	r4,136(sp)
    ad9c:	0029883a 	mov	r20,zero
    ada0:	20800104 	addi	r2,r4,4
    ada4:	24c00017 	ldw	r19,0(r4)
    ada8:	803df80e 	bge	r16,zero,a58c <___vfiprintf_internal_r+0x944>
    adac:	9d06b03a 	or	r3,r19,r20
    adb0:	d8802215 	stw	r2,136(sp)
    adb4:	183d5e1e 	bne	r3,zero,a330 <___vfiprintf_internal_r+0x6e8>
    adb8:	002b883a 	mov	r21,zero
    adbc:	0005883a 	mov	r2,zero
    adc0:	003e1006 	br	a604 <___vfiprintf_internal_r+0x9bc>
    adc4:	8880040c 	andi	r2,r17,16
    adc8:	1000321e 	bne	r2,zero,ae94 <___vfiprintf_internal_r+0x124c>
    adcc:	8c40100c 	andi	r17,r17,64
    add0:	88008d26 	beq	r17,zero,b008 <___vfiprintf_internal_r+0x13c0>
    add4:	d9402217 	ldw	r5,136(sp)
    add8:	d8c02417 	ldw	r3,144(sp)
    addc:	28800017 	ldw	r2,0(r5)
    ade0:	29400104 	addi	r5,r5,4
    ade4:	d9402215 	stw	r5,136(sp)
    ade8:	10c0000d 	sth	r3,0(r2)
    adec:	003bca06 	br	9d18 <___vfiprintf_internal_r+0xd0>
    adf0:	8880100c 	andi	r2,r17,64
    adf4:	10003a26 	beq	r2,zero,aee0 <___vfiprintf_internal_r+0x1298>
    adf8:	d8802217 	ldw	r2,136(sp)
    adfc:	14c0000f 	ldh	r19,0(r2)
    ae00:	10800104 	addi	r2,r2,4
    ae04:	d8802215 	stw	r2,136(sp)
    ae08:	9829d7fa 	srai	r20,r19,31
    ae0c:	a005883a 	mov	r2,r20
    ae10:	003d8506 	br	a428 <___vfiprintf_internal_r+0x7e0>
    ae14:	8880100c 	andi	r2,r17,64
    ae18:	10002b26 	beq	r2,zero,aec8 <___vfiprintf_internal_r+0x1280>
    ae1c:	d8802217 	ldw	r2,136(sp)
    ae20:	0029883a 	mov	r20,zero
    ae24:	14c0000b 	ldhu	r19,0(r2)
    ae28:	10800104 	addi	r2,r2,4
    ae2c:	d8802215 	stw	r2,136(sp)
    ae30:	003d5d06 	br	a3a8 <___vfiprintf_internal_r+0x760>
    ae34:	d9402017 	ldw	r5,128(sp)
    ae38:	d9002117 	ldw	r4,132(sp)
    ae3c:	d9801a04 	addi	r6,sp,104
    ae40:	d8c02a15 	stw	r3,168(sp)
    ae44:	d9c02b15 	stw	r7,172(sp)
    ae48:	0009b340 	call	9b34 <__sprint_r.part.0>
    ae4c:	d8c02a17 	ldw	r3,168(sp)
    ae50:	d9c02b17 	ldw	r7,172(sp)
    ae54:	103eb41e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    ae58:	d9001b17 	ldw	r4,108(sp)
    ae5c:	d8801c17 	ldw	r2,112(sp)
    ae60:	d811883a 	mov	r8,sp
    ae64:	21400044 	addi	r5,r4,1
    ae68:	003e6706 	br	a808 <___vfiprintf_internal_r+0xbc0>
    ae6c:	00bfffc4 	movi	r2,-1
    ae70:	003c4a06 	br	9f9c <___vfiprintf_internal_r+0x354>
    ae74:	9805883a 	mov	r2,r19
    ae78:	003ee806 	br	aa1c <___vfiprintf_internal_r+0xdd4>
    ae7c:	d8c02217 	ldw	r3,136(sp)
    ae80:	0029883a 	mov	r20,zero
    ae84:	18800104 	addi	r2,r3,4
    ae88:	1cc0000b 	ldhu	r19,0(r3)
    ae8c:	803f9e0e 	bge	r16,zero,ad08 <___vfiprintf_internal_r+0x10c0>
    ae90:	003dd706 	br	a5f0 <___vfiprintf_internal_r+0x9a8>
    ae94:	d8c02217 	ldw	r3,136(sp)
    ae98:	d9002417 	ldw	r4,144(sp)
    ae9c:	18800017 	ldw	r2,0(r3)
    aea0:	18c00104 	addi	r3,r3,4
    aea4:	d8c02215 	stw	r3,136(sp)
    aea8:	11000015 	stw	r4,0(r2)
    aeac:	003b9a06 	br	9d18 <___vfiprintf_internal_r+0xd0>
    aeb0:	d8c02217 	ldw	r3,136(sp)
    aeb4:	0029883a 	mov	r20,zero
    aeb8:	18800104 	addi	r2,r3,4
    aebc:	1cc0000b 	ldhu	r19,0(r3)
    aec0:	803db20e 	bge	r16,zero,a58c <___vfiprintf_internal_r+0x944>
    aec4:	003fb906 	br	adac <___vfiprintf_internal_r+0x1164>
    aec8:	d9002217 	ldw	r4,136(sp)
    aecc:	0029883a 	mov	r20,zero
    aed0:	24c00017 	ldw	r19,0(r4)
    aed4:	21000104 	addi	r4,r4,4
    aed8:	d9002215 	stw	r4,136(sp)
    aedc:	003d3206 	br	a3a8 <___vfiprintf_internal_r+0x760>
    aee0:	d8c02217 	ldw	r3,136(sp)
    aee4:	1cc00017 	ldw	r19,0(r3)
    aee8:	18c00104 	addi	r3,r3,4
    aeec:	d8c02215 	stw	r3,136(sp)
    aef0:	9829d7fa 	srai	r20,r19,31
    aef4:	a005883a 	mov	r2,r20
    aef8:	003d4b06 	br	a428 <___vfiprintf_internal_r+0x7e0>
    aefc:	0009883a 	mov	r4,zero
    af00:	01400044 	movi	r5,1
    af04:	d811883a 	mov	r8,sp
    af08:	003e4f06 	br	a848 <___vfiprintf_internal_r+0xc00>
    af0c:	d8c02215 	stw	r3,136(sp)
    af10:	002b883a 	mov	r21,zero
    af14:	003db806 	br	a5f8 <___vfiprintf_internal_r+0x9b0>
    af18:	d811883a 	mov	r8,sp
    af1c:	003e9606 	br	a978 <___vfiprintf_internal_r+0xd30>
    af20:	01000074 	movhi	r4,1
    af24:	2108c304 	addi	r4,r4,8972
    af28:	d9002315 	stw	r4,140(sp)
    af2c:	003e6306 	br	a8bc <___vfiprintf_internal_r+0xc74>
    af30:	b0c00043 	ldbu	r3,1(r22)
    af34:	8c400814 	ori	r17,r17,32
    af38:	b5800044 	addi	r22,r22,1
    af3c:	18c03fcc 	andi	r3,r3,255
    af40:	18c0201c 	xori	r3,r3,128
    af44:	18ffe004 	addi	r3,r3,-128
    af48:	003b9c06 	br	9dbc <___vfiprintf_internal_r+0x174>
    af4c:	b809883a 	mov	r4,r23
    af50:	da002a15 	stw	r8,168(sp)
    af54:	00023b80 	call	23b8 <strlen>
    af58:	1029883a 	mov	r20,r2
    af5c:	dd401d83 	ldbu	r21,118(sp)
    af60:	df002215 	stw	fp,136(sp)
    af64:	0021883a 	mov	r16,zero
    af68:	da002a17 	ldw	r8,168(sp)
    af6c:	003c3906 	br	a054 <___vfiprintf_internal_r+0x40c>
    af70:	d9402017 	ldw	r5,128(sp)
    af74:	d9002117 	ldw	r4,132(sp)
    af78:	d9801a04 	addi	r6,sp,104
    af7c:	0009b340 	call	9b34 <__sprint_r.part.0>
    af80:	103e691e 	bne	r2,zero,a928 <___vfiprintf_internal_r+0xce0>
    af84:	d9001b17 	ldw	r4,108(sp)
    af88:	d8801c17 	ldw	r2,112(sp)
    af8c:	d811883a 	mov	r8,sp
    af90:	21400044 	addi	r5,r4,1
    af94:	003e2e06 	br	a850 <___vfiprintf_internal_r+0xc08>
    af98:	01000074 	movhi	r4,1
    af9c:	2108c704 	addi	r4,r4,8988
    afa0:	d9002315 	stw	r4,140(sp)
    afa4:	d9001b17 	ldw	r4,108(sp)
    afa8:	21000044 	addi	r4,r4,1
    afac:	003c5e06 	br	a128 <___vfiprintf_internal_r+0x4e0>
    afb0:	002b883a 	mov	r21,zero
    afb4:	00800084 	movi	r2,2
    afb8:	10803fcc 	andi	r2,r2,255
    afbc:	01000044 	movi	r4,1
    afc0:	11002b26 	beq	r2,r4,b070 <___vfiprintf_internal_r+0x1428>
    afc4:	01000084 	movi	r4,2
    afc8:	11002b1e 	bne	r2,r4,b078 <___vfiprintf_internal_r+0x1430>
    afcc:	1823883a 	mov	r17,r3
    afd0:	003ee506 	br	ab68 <___vfiprintf_internal_r+0xf20>
    afd4:	8807883a 	mov	r3,r17
    afd8:	00800044 	movi	r2,1
    afdc:	003ff606 	br	afb8 <___vfiprintf_internal_r+0x1370>
    afe0:	00800184 	movi	r2,6
    afe4:	1400012e 	bgeu	r2,r16,afec <___vfiprintf_internal_r+0x13a4>
    afe8:	1021883a 	mov	r16,r2
    afec:	8029883a 	mov	r20,r16
    aff0:	8027883a 	mov	r19,r16
    aff4:	80002216 	blt	r16,zero,b080 <___vfiprintf_internal_r+0x1438>
    aff8:	05c00074 	movhi	r23,1
    affc:	df002215 	stw	fp,136(sp)
    b000:	bdc86704 	addi	r23,r23,8604
    b004:	003cfb06 	br	a3f4 <___vfiprintf_internal_r+0x7ac>
    b008:	d9002217 	ldw	r4,136(sp)
    b00c:	d9402417 	ldw	r5,144(sp)
    b010:	20800017 	ldw	r2,0(r4)
    b014:	21000104 	addi	r4,r4,4
    b018:	d9002215 	stw	r4,136(sp)
    b01c:	11400015 	stw	r5,0(r2)
    b020:	003b3d06 	br	9d18 <___vfiprintf_internal_r+0xd0>
    b024:	01400074 	movhi	r5,1
    b028:	2948c704 	addi	r5,r5,8988
    b02c:	d9402315 	stw	r5,140(sp)
    b030:	d9401b17 	ldw	r5,108(sp)
    b034:	29400044 	addi	r5,r5,1
    b038:	003e6d06 	br	a9f0 <___vfiprintf_internal_r+0xda8>
    b03c:	8029883a 	mov	r20,r16
    b040:	dd401d83 	ldbu	r21,118(sp)
    b044:	df002215 	stw	fp,136(sp)
    b048:	0021883a 	mov	r16,zero
    b04c:	003c0106 	br	a054 <___vfiprintf_internal_r+0x40c>
    b050:	00c00074 	movhi	r3,1
    b054:	18c8c304 	addi	r3,r3,8972
    b058:	d8c02315 	stw	r3,140(sp)
    b05c:	280d883a 	mov	r6,r5
    b060:	003c6906 	br	a208 <___vfiprintf_internal_r+0x5c0>
    b064:	802d883a 	mov	r22,r16
    b068:	0021883a 	mov	r16,zero
    b06c:	003b5406 	br	9dc0 <___vfiprintf_internal_r+0x178>
    b070:	1823883a 	mov	r17,r3
    b074:	003cf306 	br	a444 <___vfiprintf_internal_r+0x7fc>
    b078:	1823883a 	mov	r17,r3
    b07c:	003cad06 	br	a334 <___vfiprintf_internal_r+0x6ec>
    b080:	0027883a 	mov	r19,zero
    b084:	003fdc06 	br	aff8 <___vfiprintf_internal_r+0x13b0>
    b088:	d9402217 	ldw	r5,136(sp)
    b08c:	8005883a 	mov	r2,r16
    b090:	b0c00043 	ldbu	r3,1(r22)
    b094:	2c000017 	ldw	r16,0(r5)
    b098:	29000104 	addi	r4,r5,4
    b09c:	d9002215 	stw	r4,136(sp)
    b0a0:	102d883a 	mov	r22,r2
    b0a4:	803fa50e 	bge	r16,zero,af3c <___vfiprintf_internal_r+0x12f4>
    b0a8:	18c03fcc 	andi	r3,r3,255
    b0ac:	18c0201c 	xori	r3,r3,128
    b0b0:	043fffc4 	movi	r16,-1
    b0b4:	18ffe004 	addi	r3,r3,-128
    b0b8:	003b4006 	br	9dbc <___vfiprintf_internal_r+0x174>
    b0bc:	d9402303 	ldbu	r5,140(sp)
    b0c0:	d9401d85 	stb	r5,118(sp)
    b0c4:	003cae06 	br	a380 <___vfiprintf_internal_r+0x738>
    b0c8:	d8c02303 	ldbu	r3,140(sp)
    b0cc:	d8c01d85 	stb	r3,118(sp)
    b0d0:	003d1406 	br	a524 <___vfiprintf_internal_r+0x8dc>
    b0d4:	d8c02303 	ldbu	r3,140(sp)
    b0d8:	d8c01d85 	stb	r3,118(sp)
    b0dc:	003cca06 	br	a408 <___vfiprintf_internal_r+0x7c0>
    b0e0:	8880004c 	andi	r2,r17,1
    b0e4:	002b883a 	mov	r21,zero
    b0e8:	10000526 	beq	r2,zero,b100 <___vfiprintf_internal_r+0x14b8>
    b0ec:	00800c04 	movi	r2,48
    b0f0:	d88019c5 	stb	r2,103(sp)
    b0f4:	dd002817 	ldw	r20,160(sp)
    b0f8:	ddc019c4 	addi	r23,sp,103
    b0fc:	003bd506 	br	a054 <___vfiprintf_internal_r+0x40c>
    b100:	0029883a 	mov	r20,zero
    b104:	ddc01a04 	addi	r23,sp,104
    b108:	003bd206 	br	a054 <___vfiprintf_internal_r+0x40c>
    b10c:	d9002303 	ldbu	r4,140(sp)
    b110:	d9001d85 	stb	r4,118(sp)
    b114:	003da606 	br	a7b0 <___vfiprintf_internal_r+0xb68>
    b118:	d8c02303 	ldbu	r3,140(sp)
    b11c:	d8c01d85 	stb	r3,118(sp)
    b120:	003c7606 	br	a2fc <___vfiprintf_internal_r+0x6b4>
    b124:	d8c02303 	ldbu	r3,140(sp)
    b128:	d8c01d85 	stb	r3,118(sp)
    b12c:	003c6506 	br	a2c4 <___vfiprintf_internal_r+0x67c>
    b130:	d9002303 	ldbu	r4,140(sp)
    b134:	d9001d85 	stb	r4,118(sp)
    b138:	003d3d06 	br	a630 <___vfiprintf_internal_r+0x9e8>
    b13c:	d8c02303 	ldbu	r3,140(sp)
    b140:	d8c01d85 	stb	r3,118(sp)
    b144:	003d1d06 	br	a5bc <___vfiprintf_internal_r+0x974>
    b148:	d8c02303 	ldbu	r3,140(sp)
    b14c:	d8c01d85 	stb	r3,118(sp)
    b150:	003d0306 	br	a560 <___vfiprintf_internal_r+0x918>

0000b154 <__vfiprintf_internal>:
    b154:	00800074 	movhi	r2,1
    b158:	108fc404 	addi	r2,r2,16144
    b15c:	300f883a 	mov	r7,r6
    b160:	280d883a 	mov	r6,r5
    b164:	200b883a 	mov	r5,r4
    b168:	11000017 	ldw	r4,0(r2)
    b16c:	0009c481 	jmpi	9c48 <___vfiprintf_internal_r>

0000b170 <__sbprintf>:
    b170:	2880030b 	ldhu	r2,12(r5)
    b174:	2ac01917 	ldw	r11,100(r5)
    b178:	2a80038b 	ldhu	r10,14(r5)
    b17c:	2a400717 	ldw	r9,28(r5)
    b180:	2a000917 	ldw	r8,36(r5)
    b184:	defee204 	addi	sp,sp,-1144
    b188:	00c10004 	movi	r3,1024
    b18c:	dc011a15 	stw	r16,1128(sp)
    b190:	10bfff4c 	andi	r2,r2,65533
    b194:	2821883a 	mov	r16,r5
    b198:	d8cb883a 	add	r5,sp,r3
    b19c:	dc811c15 	stw	r18,1136(sp)
    b1a0:	dc411b15 	stw	r17,1132(sp)
    b1a4:	dfc11d15 	stw	ra,1140(sp)
    b1a8:	2025883a 	mov	r18,r4
    b1ac:	d881030d 	sth	r2,1036(sp)
    b1b0:	dac11915 	stw	r11,1124(sp)
    b1b4:	da81038d 	sth	r10,1038(sp)
    b1b8:	da410715 	stw	r9,1052(sp)
    b1bc:	da010915 	stw	r8,1060(sp)
    b1c0:	dec10015 	stw	sp,1024(sp)
    b1c4:	dec10415 	stw	sp,1040(sp)
    b1c8:	d8c10215 	stw	r3,1032(sp)
    b1cc:	d8c10515 	stw	r3,1044(sp)
    b1d0:	d8010615 	stw	zero,1048(sp)
    b1d4:	0009c480 	call	9c48 <___vfiprintf_internal_r>
    b1d8:	1023883a 	mov	r17,r2
    b1dc:	10000416 	blt	r2,zero,b1f0 <__sbprintf+0x80>
    b1e0:	d9410004 	addi	r5,sp,1024
    b1e4:	9009883a 	mov	r4,r18
    b1e8:	00064240 	call	6424 <_fflush_r>
    b1ec:	10000d1e 	bne	r2,zero,b224 <__sbprintf+0xb4>
    b1f0:	d881030b 	ldhu	r2,1036(sp)
    b1f4:	1080100c 	andi	r2,r2,64
    b1f8:	10000326 	beq	r2,zero,b208 <__sbprintf+0x98>
    b1fc:	8080030b 	ldhu	r2,12(r16)
    b200:	10801014 	ori	r2,r2,64
    b204:	8080030d 	sth	r2,12(r16)
    b208:	8805883a 	mov	r2,r17
    b20c:	dfc11d17 	ldw	ra,1140(sp)
    b210:	dc811c17 	ldw	r18,1136(sp)
    b214:	dc411b17 	ldw	r17,1132(sp)
    b218:	dc011a17 	ldw	r16,1128(sp)
    b21c:	dec11e04 	addi	sp,sp,1144
    b220:	f800283a 	ret
    b224:	047fffc4 	movi	r17,-1
    b228:	003ff106 	br	b1f0 <__sbprintf+0x80>

0000b22c <_write_r>:
    b22c:	defffd04 	addi	sp,sp,-12
    b230:	2805883a 	mov	r2,r5
    b234:	dc000015 	stw	r16,0(sp)
    b238:	04000074 	movhi	r16,1
    b23c:	dc400115 	stw	r17,4(sp)
    b240:	300b883a 	mov	r5,r6
    b244:	84169504 	addi	r16,r16,23124
    b248:	2023883a 	mov	r17,r4
    b24c:	380d883a 	mov	r6,r7
    b250:	1009883a 	mov	r4,r2
    b254:	dfc00215 	stw	ra,8(sp)
    b258:	80000015 	stw	zero,0(r16)
    b25c:	000fa7c0 	call	fa7c <write>
    b260:	00ffffc4 	movi	r3,-1
    b264:	10c00526 	beq	r2,r3,b27c <_write_r+0x50>
    b268:	dfc00217 	ldw	ra,8(sp)
    b26c:	dc400117 	ldw	r17,4(sp)
    b270:	dc000017 	ldw	r16,0(sp)
    b274:	dec00304 	addi	sp,sp,12
    b278:	f800283a 	ret
    b27c:	80c00017 	ldw	r3,0(r16)
    b280:	183ff926 	beq	r3,zero,b268 <_write_r+0x3c>
    b284:	88c00015 	stw	r3,0(r17)
    b288:	003ff706 	br	b268 <_write_r+0x3c>

0000b28c <_close_r>:
    b28c:	defffd04 	addi	sp,sp,-12
    b290:	dc000015 	stw	r16,0(sp)
    b294:	04000074 	movhi	r16,1
    b298:	dc400115 	stw	r17,4(sp)
    b29c:	84169504 	addi	r16,r16,23124
    b2a0:	2023883a 	mov	r17,r4
    b2a4:	2809883a 	mov	r4,r5
    b2a8:	dfc00215 	stw	ra,8(sp)
    b2ac:	80000015 	stw	zero,0(r16)
    b2b0:	000f1f40 	call	f1f4 <close>
    b2b4:	00ffffc4 	movi	r3,-1
    b2b8:	10c00526 	beq	r2,r3,b2d0 <_close_r+0x44>
    b2bc:	dfc00217 	ldw	ra,8(sp)
    b2c0:	dc400117 	ldw	r17,4(sp)
    b2c4:	dc000017 	ldw	r16,0(sp)
    b2c8:	dec00304 	addi	sp,sp,12
    b2cc:	f800283a 	ret
    b2d0:	80c00017 	ldw	r3,0(r16)
    b2d4:	183ff926 	beq	r3,zero,b2bc <_close_r+0x30>
    b2d8:	88c00015 	stw	r3,0(r17)
    b2dc:	003ff706 	br	b2bc <_close_r+0x30>

0000b2e0 <_calloc_r>:
    b2e0:	defffe04 	addi	sp,sp,-8
    b2e4:	2805883a 	mov	r2,r5
    b2e8:	dc000015 	stw	r16,0(sp)
    b2ec:	300b883a 	mov	r5,r6
    b2f0:	2021883a 	mov	r16,r4
    b2f4:	1009883a 	mov	r4,r2
    b2f8:	dfc00115 	stw	ra,4(sp)
    b2fc:	000c8ec0 	call	c8ec <__mulsi3>
    b300:	100b883a 	mov	r5,r2
    b304:	8009883a 	mov	r4,r16
    b308:	000757c0 	call	757c <_malloc_r>
    b30c:	10002926 	beq	r2,zero,b3b4 <_calloc_r+0xd4>
    b310:	11bfff17 	ldw	r6,-4(r2)
    b314:	1021883a 	mov	r16,r2
    b318:	00bfff04 	movi	r2,-4
    b31c:	308c703a 	and	r6,r6,r2
    b320:	00c00904 	movi	r3,36
    b324:	308d883a 	add	r6,r6,r2
    b328:	19801636 	bltu	r3,r6,b384 <_calloc_r+0xa4>
    b32c:	008004c4 	movi	r2,19
    b330:	11800b2e 	bgeu	r2,r6,b360 <_calloc_r+0x80>
    b334:	80000015 	stw	zero,0(r16)
    b338:	80000115 	stw	zero,4(r16)
    b33c:	008006c4 	movi	r2,27
    b340:	11801a2e 	bgeu	r2,r6,b3ac <_calloc_r+0xcc>
    b344:	80000215 	stw	zero,8(r16)
    b348:	80000315 	stw	zero,12(r16)
    b34c:	30c0151e 	bne	r6,r3,b3a4 <_calloc_r+0xc4>
    b350:	80000415 	stw	zero,16(r16)
    b354:	80800604 	addi	r2,r16,24
    b358:	80000515 	stw	zero,20(r16)
    b35c:	00000106 	br	b364 <_calloc_r+0x84>
    b360:	8005883a 	mov	r2,r16
    b364:	10000015 	stw	zero,0(r2)
    b368:	10000115 	stw	zero,4(r2)
    b36c:	10000215 	stw	zero,8(r2)
    b370:	8005883a 	mov	r2,r16
    b374:	dfc00117 	ldw	ra,4(sp)
    b378:	dc000017 	ldw	r16,0(sp)
    b37c:	dec00204 	addi	sp,sp,8
    b380:	f800283a 	ret
    b384:	000b883a 	mov	r5,zero
    b388:	8009883a 	mov	r4,r16
    b38c:	00081100 	call	8110 <memset>
    b390:	8005883a 	mov	r2,r16
    b394:	dfc00117 	ldw	ra,4(sp)
    b398:	dc000017 	ldw	r16,0(sp)
    b39c:	dec00204 	addi	sp,sp,8
    b3a0:	f800283a 	ret
    b3a4:	80800404 	addi	r2,r16,16
    b3a8:	003fee06 	br	b364 <_calloc_r+0x84>
    b3ac:	80800204 	addi	r2,r16,8
    b3b0:	003fec06 	br	b364 <_calloc_r+0x84>
    b3b4:	0005883a 	mov	r2,zero
    b3b8:	003fee06 	br	b374 <_calloc_r+0x94>

0000b3bc <_fclose_r>:
    b3bc:	28003926 	beq	r5,zero,b4a4 <_fclose_r+0xe8>
    b3c0:	defffc04 	addi	sp,sp,-16
    b3c4:	dc400115 	stw	r17,4(sp)
    b3c8:	dc000015 	stw	r16,0(sp)
    b3cc:	dfc00315 	stw	ra,12(sp)
    b3d0:	dc800215 	stw	r18,8(sp)
    b3d4:	2023883a 	mov	r17,r4
    b3d8:	2821883a 	mov	r16,r5
    b3dc:	20000226 	beq	r4,zero,b3e8 <_fclose_r+0x2c>
    b3e0:	20800e17 	ldw	r2,56(r4)
    b3e4:	10002726 	beq	r2,zero,b484 <_fclose_r+0xc8>
    b3e8:	8080030f 	ldh	r2,12(r16)
    b3ec:	1000071e 	bne	r2,zero,b40c <_fclose_r+0x50>
    b3f0:	0005883a 	mov	r2,zero
    b3f4:	dfc00317 	ldw	ra,12(sp)
    b3f8:	dc800217 	ldw	r18,8(sp)
    b3fc:	dc400117 	ldw	r17,4(sp)
    b400:	dc000017 	ldw	r16,0(sp)
    b404:	dec00404 	addi	sp,sp,16
    b408:	f800283a 	ret
    b40c:	800b883a 	mov	r5,r16
    b410:	8809883a 	mov	r4,r17
    b414:	00062080 	call	6208 <__sflush_r>
    b418:	1025883a 	mov	r18,r2
    b41c:	80800b17 	ldw	r2,44(r16)
    b420:	10000426 	beq	r2,zero,b434 <_fclose_r+0x78>
    b424:	81400717 	ldw	r5,28(r16)
    b428:	8809883a 	mov	r4,r17
    b42c:	103ee83a 	callr	r2
    b430:	10001616 	blt	r2,zero,b48c <_fclose_r+0xd0>
    b434:	8080030b 	ldhu	r2,12(r16)
    b438:	1080200c 	andi	r2,r2,128
    b43c:	1000151e 	bne	r2,zero,b494 <_fclose_r+0xd8>
    b440:	81400c17 	ldw	r5,48(r16)
    b444:	28000526 	beq	r5,zero,b45c <_fclose_r+0xa0>
    b448:	80801004 	addi	r2,r16,64
    b44c:	28800226 	beq	r5,r2,b458 <_fclose_r+0x9c>
    b450:	8809883a 	mov	r4,r17
    b454:	00069840 	call	6984 <_free_r>
    b458:	80000c15 	stw	zero,48(r16)
    b45c:	81401117 	ldw	r5,68(r16)
    b460:	28000326 	beq	r5,zero,b470 <_fclose_r+0xb4>
    b464:	8809883a 	mov	r4,r17
    b468:	00069840 	call	6984 <_free_r>
    b46c:	80001115 	stw	zero,68(r16)
    b470:	00068200 	call	6820 <__sfp_lock_acquire>
    b474:	8000030d 	sth	zero,12(r16)
    b478:	00068240 	call	6824 <__sfp_lock_release>
    b47c:	9005883a 	mov	r2,r18
    b480:	003fdc06 	br	b3f4 <_fclose_r+0x38>
    b484:	00068100 	call	6810 <__sinit>
    b488:	003fd706 	br	b3e8 <_fclose_r+0x2c>
    b48c:	04bfffc4 	movi	r18,-1
    b490:	003fe806 	br	b434 <_fclose_r+0x78>
    b494:	81400417 	ldw	r5,16(r16)
    b498:	8809883a 	mov	r4,r17
    b49c:	00069840 	call	6984 <_free_r>
    b4a0:	003fe706 	br	b440 <_fclose_r+0x84>
    b4a4:	0005883a 	mov	r2,zero
    b4a8:	f800283a 	ret

0000b4ac <fclose>:
    b4ac:	00800074 	movhi	r2,1
    b4b0:	108fc404 	addi	r2,r2,16144
    b4b4:	200b883a 	mov	r5,r4
    b4b8:	11000017 	ldw	r4,0(r2)
    b4bc:	000b3bc1 	jmpi	b3bc <_fclose_r>

0000b4c0 <__fputwc>:
    b4c0:	defff804 	addi	sp,sp,-32
    b4c4:	dcc00415 	stw	r19,16(sp)
    b4c8:	dc800315 	stw	r18,12(sp)
    b4cc:	dc000115 	stw	r16,4(sp)
    b4d0:	dfc00715 	stw	ra,28(sp)
    b4d4:	dd400615 	stw	r21,24(sp)
    b4d8:	dd000515 	stw	r20,20(sp)
    b4dc:	dc400215 	stw	r17,8(sp)
    b4e0:	2027883a 	mov	r19,r4
    b4e4:	2825883a 	mov	r18,r5
    b4e8:	3021883a 	mov	r16,r6
    b4ec:	000736c0 	call	736c <__locale_mb_cur_max>
    b4f0:	00c00044 	movi	r3,1
    b4f4:	10c03e26 	beq	r2,r3,b5f0 <__fputwc+0x130>
    b4f8:	81c01704 	addi	r7,r16,92
    b4fc:	900d883a 	mov	r6,r18
    b500:	d80b883a 	mov	r5,sp
    b504:	9809883a 	mov	r4,r19
    b508:	000b9900 	call	b990 <_wcrtomb_r>
    b50c:	1029883a 	mov	r20,r2
    b510:	00bfffc4 	movi	r2,-1
    b514:	a0802026 	beq	r20,r2,b598 <__fputwc+0xd8>
    b518:	d9400003 	ldbu	r5,0(sp)
    b51c:	a0001c26 	beq	r20,zero,b590 <__fputwc+0xd0>
    b520:	0023883a 	mov	r17,zero
    b524:	05400284 	movi	r21,10
    b528:	00000906 	br	b550 <__fputwc+0x90>
    b52c:	80800017 	ldw	r2,0(r16)
    b530:	11400005 	stb	r5,0(r2)
    b534:	80c00017 	ldw	r3,0(r16)
    b538:	18c00044 	addi	r3,r3,1
    b53c:	80c00015 	stw	r3,0(r16)
    b540:	8c400044 	addi	r17,r17,1
    b544:	dc45883a 	add	r2,sp,r17
    b548:	8d00112e 	bgeu	r17,r20,b590 <__fputwc+0xd0>
    b54c:	11400003 	ldbu	r5,0(r2)
    b550:	80c00217 	ldw	r3,8(r16)
    b554:	18ffffc4 	addi	r3,r3,-1
    b558:	80c00215 	stw	r3,8(r16)
    b55c:	183ff30e 	bge	r3,zero,b52c <__fputwc+0x6c>
    b560:	80800617 	ldw	r2,24(r16)
    b564:	18801916 	blt	r3,r2,b5cc <__fputwc+0x10c>
    b568:	80800017 	ldw	r2,0(r16)
    b56c:	11400005 	stb	r5,0(r2)
    b570:	80800017 	ldw	r2,0(r16)
    b574:	10c00003 	ldbu	r3,0(r2)
    b578:	10800044 	addi	r2,r2,1
    b57c:	1d402326 	beq	r3,r21,b60c <__fputwc+0x14c>
    b580:	80800015 	stw	r2,0(r16)
    b584:	8c400044 	addi	r17,r17,1
    b588:	dc45883a 	add	r2,sp,r17
    b58c:	8d3fef36 	bltu	r17,r20,b54c <__fputwc+0x8c>
    b590:	9005883a 	mov	r2,r18
    b594:	00000406 	br	b5a8 <__fputwc+0xe8>
    b598:	80c0030b 	ldhu	r3,12(r16)
    b59c:	a005883a 	mov	r2,r20
    b5a0:	18c01014 	ori	r3,r3,64
    b5a4:	80c0030d 	sth	r3,12(r16)
    b5a8:	dfc00717 	ldw	ra,28(sp)
    b5ac:	dd400617 	ldw	r21,24(sp)
    b5b0:	dd000517 	ldw	r20,20(sp)
    b5b4:	dcc00417 	ldw	r19,16(sp)
    b5b8:	dc800317 	ldw	r18,12(sp)
    b5bc:	dc400217 	ldw	r17,8(sp)
    b5c0:	dc000117 	ldw	r16,4(sp)
    b5c4:	dec00804 	addi	sp,sp,32
    b5c8:	f800283a 	ret
    b5cc:	800d883a 	mov	r6,r16
    b5d0:	29403fcc 	andi	r5,r5,255
    b5d4:	9809883a 	mov	r4,r19
    b5d8:	000b8380 	call	b838 <__swbuf_r>
    b5dc:	10bfffe0 	cmpeqi	r2,r2,-1
    b5e0:	10803fcc 	andi	r2,r2,255
    b5e4:	103fd626 	beq	r2,zero,b540 <__fputwc+0x80>
    b5e8:	00bfffc4 	movi	r2,-1
    b5ec:	003fee06 	br	b5a8 <__fputwc+0xe8>
    b5f0:	90ffffc4 	addi	r3,r18,-1
    b5f4:	01003f84 	movi	r4,254
    b5f8:	20ffbf36 	bltu	r4,r3,b4f8 <__fputwc+0x38>
    b5fc:	900b883a 	mov	r5,r18
    b600:	dc800005 	stb	r18,0(sp)
    b604:	1029883a 	mov	r20,r2
    b608:	003fc506 	br	b520 <__fputwc+0x60>
    b60c:	800d883a 	mov	r6,r16
    b610:	a80b883a 	mov	r5,r21
    b614:	9809883a 	mov	r4,r19
    b618:	000b8380 	call	b838 <__swbuf_r>
    b61c:	10bfffe0 	cmpeqi	r2,r2,-1
    b620:	003fef06 	br	b5e0 <__fputwc+0x120>

0000b624 <_fputwc_r>:
    b624:	3080030b 	ldhu	r2,12(r6)
    b628:	10c8000c 	andi	r3,r2,8192
    b62c:	1800051e 	bne	r3,zero,b644 <_fputwc_r+0x20>
    b630:	30c01917 	ldw	r3,100(r6)
    b634:	10880014 	ori	r2,r2,8192
    b638:	3080030d 	sth	r2,12(r6)
    b63c:	18880014 	ori	r2,r3,8192
    b640:	30801915 	stw	r2,100(r6)
    b644:	000b4c01 	jmpi	b4c0 <__fputwc>

0000b648 <fputwc>:
    b648:	00800074 	movhi	r2,1
    b64c:	defffc04 	addi	sp,sp,-16
    b650:	108fc404 	addi	r2,r2,16144
    b654:	dc000115 	stw	r16,4(sp)
    b658:	14000017 	ldw	r16,0(r2)
    b65c:	dc400215 	stw	r17,8(sp)
    b660:	dfc00315 	stw	ra,12(sp)
    b664:	2023883a 	mov	r17,r4
    b668:	80000226 	beq	r16,zero,b674 <fputwc+0x2c>
    b66c:	80800e17 	ldw	r2,56(r16)
    b670:	10001026 	beq	r2,zero,b6b4 <fputwc+0x6c>
    b674:	2880030b 	ldhu	r2,12(r5)
    b678:	10c8000c 	andi	r3,r2,8192
    b67c:	1800051e 	bne	r3,zero,b694 <fputwc+0x4c>
    b680:	28c01917 	ldw	r3,100(r5)
    b684:	10880014 	ori	r2,r2,8192
    b688:	2880030d 	sth	r2,12(r5)
    b68c:	18880014 	ori	r2,r3,8192
    b690:	28801915 	stw	r2,100(r5)
    b694:	280d883a 	mov	r6,r5
    b698:	8009883a 	mov	r4,r16
    b69c:	880b883a 	mov	r5,r17
    b6a0:	dfc00317 	ldw	ra,12(sp)
    b6a4:	dc400217 	ldw	r17,8(sp)
    b6a8:	dc000117 	ldw	r16,4(sp)
    b6ac:	dec00404 	addi	sp,sp,16
    b6b0:	000b4c01 	jmpi	b4c0 <__fputwc>
    b6b4:	8009883a 	mov	r4,r16
    b6b8:	d9400015 	stw	r5,0(sp)
    b6bc:	00068100 	call	6810 <__sinit>
    b6c0:	d9400017 	ldw	r5,0(sp)
    b6c4:	003feb06 	br	b674 <fputwc+0x2c>

0000b6c8 <_fstat_r>:
    b6c8:	defffd04 	addi	sp,sp,-12
    b6cc:	2805883a 	mov	r2,r5
    b6d0:	dc000015 	stw	r16,0(sp)
    b6d4:	04000074 	movhi	r16,1
    b6d8:	dc400115 	stw	r17,4(sp)
    b6dc:	84169504 	addi	r16,r16,23124
    b6e0:	2023883a 	mov	r17,r4
    b6e4:	300b883a 	mov	r5,r6
    b6e8:	1009883a 	mov	r4,r2
    b6ec:	dfc00215 	stw	ra,8(sp)
    b6f0:	80000015 	stw	zero,0(r16)
    b6f4:	000f3340 	call	f334 <fstat>
    b6f8:	00ffffc4 	movi	r3,-1
    b6fc:	10c00526 	beq	r2,r3,b714 <_fstat_r+0x4c>
    b700:	dfc00217 	ldw	ra,8(sp)
    b704:	dc400117 	ldw	r17,4(sp)
    b708:	dc000017 	ldw	r16,0(sp)
    b70c:	dec00304 	addi	sp,sp,12
    b710:	f800283a 	ret
    b714:	80c00017 	ldw	r3,0(r16)
    b718:	183ff926 	beq	r3,zero,b700 <_fstat_r+0x38>
    b71c:	88c00015 	stw	r3,0(r17)
    b720:	003ff706 	br	b700 <_fstat_r+0x38>

0000b724 <_isatty_r>:
    b724:	defffd04 	addi	sp,sp,-12
    b728:	dc000015 	stw	r16,0(sp)
    b72c:	04000074 	movhi	r16,1
    b730:	dc400115 	stw	r17,4(sp)
    b734:	84169504 	addi	r16,r16,23124
    b738:	2023883a 	mov	r17,r4
    b73c:	2809883a 	mov	r4,r5
    b740:	dfc00215 	stw	ra,8(sp)
    b744:	80000015 	stw	zero,0(r16)
    b748:	000f4280 	call	f428 <isatty>
    b74c:	00ffffc4 	movi	r3,-1
    b750:	10c00526 	beq	r2,r3,b768 <_isatty_r+0x44>
    b754:	dfc00217 	ldw	ra,8(sp)
    b758:	dc400117 	ldw	r17,4(sp)
    b75c:	dc000017 	ldw	r16,0(sp)
    b760:	dec00304 	addi	sp,sp,12
    b764:	f800283a 	ret
    b768:	80c00017 	ldw	r3,0(r16)
    b76c:	183ff926 	beq	r3,zero,b754 <_isatty_r+0x30>
    b770:	88c00015 	stw	r3,0(r17)
    b774:	003ff706 	br	b754 <_isatty_r+0x30>

0000b778 <_lseek_r>:
    b778:	defffd04 	addi	sp,sp,-12
    b77c:	2805883a 	mov	r2,r5
    b780:	dc000015 	stw	r16,0(sp)
    b784:	04000074 	movhi	r16,1
    b788:	dc400115 	stw	r17,4(sp)
    b78c:	300b883a 	mov	r5,r6
    b790:	84169504 	addi	r16,r16,23124
    b794:	2023883a 	mov	r17,r4
    b798:	380d883a 	mov	r6,r7
    b79c:	1009883a 	mov	r4,r2
    b7a0:	dfc00215 	stw	ra,8(sp)
    b7a4:	80000015 	stw	zero,0(r16)
    b7a8:	000f5fc0 	call	f5fc <lseek>
    b7ac:	00ffffc4 	movi	r3,-1
    b7b0:	10c00526 	beq	r2,r3,b7c8 <_lseek_r+0x50>
    b7b4:	dfc00217 	ldw	ra,8(sp)
    b7b8:	dc400117 	ldw	r17,4(sp)
    b7bc:	dc000017 	ldw	r16,0(sp)
    b7c0:	dec00304 	addi	sp,sp,12
    b7c4:	f800283a 	ret
    b7c8:	80c00017 	ldw	r3,0(r16)
    b7cc:	183ff926 	beq	r3,zero,b7b4 <_lseek_r+0x3c>
    b7d0:	88c00015 	stw	r3,0(r17)
    b7d4:	003ff706 	br	b7b4 <_lseek_r+0x3c>

0000b7d8 <_read_r>:
    b7d8:	defffd04 	addi	sp,sp,-12
    b7dc:	2805883a 	mov	r2,r5
    b7e0:	dc000015 	stw	r16,0(sp)
    b7e4:	04000074 	movhi	r16,1
    b7e8:	dc400115 	stw	r17,4(sp)
    b7ec:	300b883a 	mov	r5,r6
    b7f0:	84169504 	addi	r16,r16,23124
    b7f4:	2023883a 	mov	r17,r4
    b7f8:	380d883a 	mov	r6,r7
    b7fc:	1009883a 	mov	r4,r2
    b800:	dfc00215 	stw	ra,8(sp)
    b804:	80000015 	stw	zero,0(r16)
    b808:	000f7d80 	call	f7d8 <read>
    b80c:	00ffffc4 	movi	r3,-1
    b810:	10c00526 	beq	r2,r3,b828 <_read_r+0x50>
    b814:	dfc00217 	ldw	ra,8(sp)
    b818:	dc400117 	ldw	r17,4(sp)
    b81c:	dc000017 	ldw	r16,0(sp)
    b820:	dec00304 	addi	sp,sp,12
    b824:	f800283a 	ret
    b828:	80c00017 	ldw	r3,0(r16)
    b82c:	183ff926 	beq	r3,zero,b814 <_read_r+0x3c>
    b830:	88c00015 	stw	r3,0(r17)
    b834:	003ff706 	br	b814 <_read_r+0x3c>

0000b838 <__swbuf_r>:
    b838:	defffb04 	addi	sp,sp,-20
    b83c:	dcc00315 	stw	r19,12(sp)
    b840:	dc800215 	stw	r18,8(sp)
    b844:	dc000015 	stw	r16,0(sp)
    b848:	dfc00415 	stw	ra,16(sp)
    b84c:	dc400115 	stw	r17,4(sp)
    b850:	2025883a 	mov	r18,r4
    b854:	2827883a 	mov	r19,r5
    b858:	3021883a 	mov	r16,r6
    b85c:	20000226 	beq	r4,zero,b868 <__swbuf_r+0x30>
    b860:	20800e17 	ldw	r2,56(r4)
    b864:	10004226 	beq	r2,zero,b970 <__swbuf_r+0x138>
    b868:	80800617 	ldw	r2,24(r16)
    b86c:	8100030b 	ldhu	r4,12(r16)
    b870:	80800215 	stw	r2,8(r16)
    b874:	2080020c 	andi	r2,r4,8
    b878:	10003626 	beq	r2,zero,b954 <__swbuf_r+0x11c>
    b87c:	80c00417 	ldw	r3,16(r16)
    b880:	18003426 	beq	r3,zero,b954 <__swbuf_r+0x11c>
    b884:	2088000c 	andi	r2,r4,8192
    b888:	9c403fcc 	andi	r17,r19,255
    b88c:	10001a26 	beq	r2,zero,b8f8 <__swbuf_r+0xc0>
    b890:	80800017 	ldw	r2,0(r16)
    b894:	81000517 	ldw	r4,20(r16)
    b898:	10c7c83a 	sub	r3,r2,r3
    b89c:	1900200e 	bge	r3,r4,b920 <__swbuf_r+0xe8>
    b8a0:	18c00044 	addi	r3,r3,1
    b8a4:	81000217 	ldw	r4,8(r16)
    b8a8:	11400044 	addi	r5,r2,1
    b8ac:	81400015 	stw	r5,0(r16)
    b8b0:	213fffc4 	addi	r4,r4,-1
    b8b4:	81000215 	stw	r4,8(r16)
    b8b8:	14c00005 	stb	r19,0(r2)
    b8bc:	80800517 	ldw	r2,20(r16)
    b8c0:	10c01e26 	beq	r2,r3,b93c <__swbuf_r+0x104>
    b8c4:	8080030b 	ldhu	r2,12(r16)
    b8c8:	1080004c 	andi	r2,r2,1
    b8cc:	10000226 	beq	r2,zero,b8d8 <__swbuf_r+0xa0>
    b8d0:	00800284 	movi	r2,10
    b8d4:	88801926 	beq	r17,r2,b93c <__swbuf_r+0x104>
    b8d8:	8805883a 	mov	r2,r17
    b8dc:	dfc00417 	ldw	ra,16(sp)
    b8e0:	dcc00317 	ldw	r19,12(sp)
    b8e4:	dc800217 	ldw	r18,8(sp)
    b8e8:	dc400117 	ldw	r17,4(sp)
    b8ec:	dc000017 	ldw	r16,0(sp)
    b8f0:	dec00504 	addi	sp,sp,20
    b8f4:	f800283a 	ret
    b8f8:	81401917 	ldw	r5,100(r16)
    b8fc:	00b7ffc4 	movi	r2,-8193
    b900:	21080014 	ori	r4,r4,8192
    b904:	2884703a 	and	r2,r5,r2
    b908:	80801915 	stw	r2,100(r16)
    b90c:	80800017 	ldw	r2,0(r16)
    b910:	8100030d 	sth	r4,12(r16)
    b914:	81000517 	ldw	r4,20(r16)
    b918:	10c7c83a 	sub	r3,r2,r3
    b91c:	193fe016 	blt	r3,r4,b8a0 <__swbuf_r+0x68>
    b920:	800b883a 	mov	r5,r16
    b924:	9009883a 	mov	r4,r18
    b928:	00064240 	call	6424 <_fflush_r>
    b92c:	1000071e 	bne	r2,zero,b94c <__swbuf_r+0x114>
    b930:	80800017 	ldw	r2,0(r16)
    b934:	00c00044 	movi	r3,1
    b938:	003fda06 	br	b8a4 <__swbuf_r+0x6c>
    b93c:	800b883a 	mov	r5,r16
    b940:	9009883a 	mov	r4,r18
    b944:	00064240 	call	6424 <_fflush_r>
    b948:	103fe326 	beq	r2,zero,b8d8 <__swbuf_r+0xa0>
    b94c:	00bfffc4 	movi	r2,-1
    b950:	003fe206 	br	b8dc <__swbuf_r+0xa4>
    b954:	800b883a 	mov	r5,r16
    b958:	9009883a 	mov	r4,r18
    b95c:	00048040 	call	4804 <__swsetup_r>
    b960:	103ffa1e 	bne	r2,zero,b94c <__swbuf_r+0x114>
    b964:	8100030b 	ldhu	r4,12(r16)
    b968:	80c00417 	ldw	r3,16(r16)
    b96c:	003fc506 	br	b884 <__swbuf_r+0x4c>
    b970:	00068100 	call	6810 <__sinit>
    b974:	003fbc06 	br	b868 <__swbuf_r+0x30>

0000b978 <__swbuf>:
    b978:	00800074 	movhi	r2,1
    b97c:	108fc404 	addi	r2,r2,16144
    b980:	280d883a 	mov	r6,r5
    b984:	200b883a 	mov	r5,r4
    b988:	11000017 	ldw	r4,0(r2)
    b98c:	000b8381 	jmpi	b838 <__swbuf_r>

0000b990 <_wcrtomb_r>:
    b990:	defff604 	addi	sp,sp,-40
    b994:	00800074 	movhi	r2,1
    b998:	dc800815 	stw	r18,32(sp)
    b99c:	dc400715 	stw	r17,28(sp)
    b9a0:	dc000615 	stw	r16,24(sp)
    b9a4:	108fc804 	addi	r2,r2,16160
    b9a8:	dfc00915 	stw	ra,36(sp)
    b9ac:	2021883a 	mov	r16,r4
    b9b0:	3823883a 	mov	r17,r7
    b9b4:	14800017 	ldw	r18,0(r2)
    b9b8:	28001426 	beq	r5,zero,ba0c <_wcrtomb_r+0x7c>
    b9bc:	d9400415 	stw	r5,16(sp)
    b9c0:	d9800515 	stw	r6,20(sp)
    b9c4:	00073600 	call	7360 <__locale_charset>
    b9c8:	d9800517 	ldw	r6,20(sp)
    b9cc:	d9400417 	ldw	r5,16(sp)
    b9d0:	100f883a 	mov	r7,r2
    b9d4:	dc400015 	stw	r17,0(sp)
    b9d8:	8009883a 	mov	r4,r16
    b9dc:	903ee83a 	callr	r18
    b9e0:	00ffffc4 	movi	r3,-1
    b9e4:	10c0031e 	bne	r2,r3,b9f4 <_wcrtomb_r+0x64>
    b9e8:	88000015 	stw	zero,0(r17)
    b9ec:	00c02284 	movi	r3,138
    b9f0:	80c00015 	stw	r3,0(r16)
    b9f4:	dfc00917 	ldw	ra,36(sp)
    b9f8:	dc800817 	ldw	r18,32(sp)
    b9fc:	dc400717 	ldw	r17,28(sp)
    ba00:	dc000617 	ldw	r16,24(sp)
    ba04:	dec00a04 	addi	sp,sp,40
    ba08:	f800283a 	ret
    ba0c:	00073600 	call	7360 <__locale_charset>
    ba10:	100f883a 	mov	r7,r2
    ba14:	dc400015 	stw	r17,0(sp)
    ba18:	000d883a 	mov	r6,zero
    ba1c:	d9400104 	addi	r5,sp,4
    ba20:	8009883a 	mov	r4,r16
    ba24:	903ee83a 	callr	r18
    ba28:	003fed06 	br	b9e0 <_wcrtomb_r+0x50>

0000ba2c <wcrtomb>:
    ba2c:	defff604 	addi	sp,sp,-40
    ba30:	00800074 	movhi	r2,1
    ba34:	dc800615 	stw	r18,24(sp)
    ba38:	dc400515 	stw	r17,20(sp)
    ba3c:	108fc404 	addi	r2,r2,16144
    ba40:	dfc00915 	stw	ra,36(sp)
    ba44:	dd000815 	stw	r20,32(sp)
    ba48:	dcc00715 	stw	r19,28(sp)
    ba4c:	dc000415 	stw	r16,16(sp)
    ba50:	3025883a 	mov	r18,r6
    ba54:	14400017 	ldw	r17,0(r2)
    ba58:	20001926 	beq	r4,zero,bac0 <wcrtomb+0x94>
    ba5c:	00800074 	movhi	r2,1
    ba60:	108fc804 	addi	r2,r2,16160
    ba64:	15000017 	ldw	r20,0(r2)
    ba68:	2021883a 	mov	r16,r4
    ba6c:	2827883a 	mov	r19,r5
    ba70:	00073600 	call	7360 <__locale_charset>
    ba74:	100f883a 	mov	r7,r2
    ba78:	dc800015 	stw	r18,0(sp)
    ba7c:	980d883a 	mov	r6,r19
    ba80:	800b883a 	mov	r5,r16
    ba84:	8809883a 	mov	r4,r17
    ba88:	a03ee83a 	callr	r20
    ba8c:	00ffffc4 	movi	r3,-1
    ba90:	10c0031e 	bne	r2,r3,baa0 <wcrtomb+0x74>
    ba94:	90000015 	stw	zero,0(r18)
    ba98:	00c02284 	movi	r3,138
    ba9c:	88c00015 	stw	r3,0(r17)
    baa0:	dfc00917 	ldw	ra,36(sp)
    baa4:	dd000817 	ldw	r20,32(sp)
    baa8:	dcc00717 	ldw	r19,28(sp)
    baac:	dc800617 	ldw	r18,24(sp)
    bab0:	dc400517 	ldw	r17,20(sp)
    bab4:	dc000417 	ldw	r16,16(sp)
    bab8:	dec00a04 	addi	sp,sp,40
    babc:	f800283a 	ret
    bac0:	00800074 	movhi	r2,1
    bac4:	108fc804 	addi	r2,r2,16160
    bac8:	14000017 	ldw	r16,0(r2)
    bacc:	00073600 	call	7360 <__locale_charset>
    bad0:	100f883a 	mov	r7,r2
    bad4:	dc800015 	stw	r18,0(sp)
    bad8:	000d883a 	mov	r6,zero
    badc:	d9400104 	addi	r5,sp,4
    bae0:	8809883a 	mov	r4,r17
    bae4:	803ee83a 	callr	r16
    bae8:	003fe806 	br	ba8c <wcrtomb+0x60>

0000baec <__ascii_wctomb>:
    baec:	28000526 	beq	r5,zero,bb04 <__ascii_wctomb+0x18>
    baf0:	00803fc4 	movi	r2,255
    baf4:	11800536 	bltu	r2,r6,bb0c <__ascii_wctomb+0x20>
    baf8:	29800005 	stb	r6,0(r5)
    bafc:	00800044 	movi	r2,1
    bb00:	f800283a 	ret
    bb04:	0005883a 	mov	r2,zero
    bb08:	f800283a 	ret
    bb0c:	00802284 	movi	r2,138
    bb10:	20800015 	stw	r2,0(r4)
    bb14:	00bfffc4 	movi	r2,-1
    bb18:	f800283a 	ret

0000bb1c <_wctomb_r>:
    bb1c:	00800074 	movhi	r2,1
    bb20:	defff904 	addi	sp,sp,-28
    bb24:	108fc804 	addi	r2,r2,16160
    bb28:	dfc00615 	stw	ra,24(sp)
    bb2c:	dc400515 	stw	r17,20(sp)
    bb30:	dc000415 	stw	r16,16(sp)
    bb34:	3823883a 	mov	r17,r7
    bb38:	14000017 	ldw	r16,0(r2)
    bb3c:	d9000115 	stw	r4,4(sp)
    bb40:	d9400215 	stw	r5,8(sp)
    bb44:	d9800315 	stw	r6,12(sp)
    bb48:	00073600 	call	7360 <__locale_charset>
    bb4c:	d9800317 	ldw	r6,12(sp)
    bb50:	d9400217 	ldw	r5,8(sp)
    bb54:	d9000117 	ldw	r4,4(sp)
    bb58:	100f883a 	mov	r7,r2
    bb5c:	dc400015 	stw	r17,0(sp)
    bb60:	803ee83a 	callr	r16
    bb64:	dfc00617 	ldw	ra,24(sp)
    bb68:	dc400517 	ldw	r17,20(sp)
    bb6c:	dc000417 	ldw	r16,16(sp)
    bb70:	dec00704 	addi	sp,sp,28
    bb74:	f800283a 	ret

0000bb78 <__udivdi3>:
    bb78:	defff404 	addi	sp,sp,-48
    bb7c:	dcc00515 	stw	r19,20(sp)
    bb80:	dc000215 	stw	r16,8(sp)
    bb84:	dfc00b15 	stw	ra,44(sp)
    bb88:	df000a15 	stw	fp,40(sp)
    bb8c:	ddc00915 	stw	r23,36(sp)
    bb90:	dd800815 	stw	r22,32(sp)
    bb94:	dd400715 	stw	r21,28(sp)
    bb98:	dd000615 	stw	r20,24(sp)
    bb9c:	dc800415 	stw	r18,16(sp)
    bba0:	dc400315 	stw	r17,12(sp)
    bba4:	2027883a 	mov	r19,r4
    bba8:	2821883a 	mov	r16,r5
    bbac:	3800461e 	bne	r7,zero,bcc8 <__udivdi3+0x150>
    bbb0:	3023883a 	mov	r17,r6
    bbb4:	2025883a 	mov	r18,r4
    bbb8:	2980572e 	bgeu	r5,r6,bd18 <__udivdi3+0x1a0>
    bbbc:	00bfffd4 	movui	r2,65535
    bbc0:	282d883a 	mov	r22,r5
    bbc4:	1180b236 	bltu	r2,r6,be90 <__udivdi3+0x318>
    bbc8:	00803fc4 	movi	r2,255
    bbcc:	1185803a 	cmpltu	r2,r2,r6
    bbd0:	100490fa 	slli	r2,r2,3
    bbd4:	3086d83a 	srl	r3,r6,r2
    bbd8:	01000074 	movhi	r4,1
    bbdc:	2108cb04 	addi	r4,r4,9004
    bbe0:	20c7883a 	add	r3,r4,r3
    bbe4:	18c00003 	ldbu	r3,0(r3)
    bbe8:	1885883a 	add	r2,r3,r2
    bbec:	00c00804 	movi	r3,32
    bbf0:	1887c83a 	sub	r3,r3,r2
    bbf4:	18000526 	beq	r3,zero,bc0c <__udivdi3+0x94>
    bbf8:	80e0983a 	sll	r16,r16,r3
    bbfc:	9884d83a 	srl	r2,r19,r2
    bc00:	30e2983a 	sll	r17,r6,r3
    bc04:	98e4983a 	sll	r18,r19,r3
    bc08:	142cb03a 	or	r22,r2,r16
    bc0c:	882ad43a 	srli	r21,r17,16
    bc10:	b009883a 	mov	r4,r22
    bc14:	8d3fffcc 	andi	r20,r17,65535
    bc18:	a80b883a 	mov	r5,r21
    bc1c:	000c8940 	call	c894 <__umodsi3>
    bc20:	b009883a 	mov	r4,r22
    bc24:	a80b883a 	mov	r5,r21
    bc28:	1027883a 	mov	r19,r2
    bc2c:	000c8300 	call	c830 <__udivsi3>
    bc30:	100b883a 	mov	r5,r2
    bc34:	a009883a 	mov	r4,r20
    bc38:	102d883a 	mov	r22,r2
    bc3c:	000c8ec0 	call	c8ec <__mulsi3>
    bc40:	9826943a 	slli	r19,r19,16
    bc44:	9006d43a 	srli	r3,r18,16
    bc48:	1cc6b03a 	or	r3,r3,r19
    bc4c:	1880052e 	bgeu	r3,r2,bc64 <__udivdi3+0xec>
    bc50:	1c47883a 	add	r3,r3,r17
    bc54:	b13fffc4 	addi	r4,r22,-1
    bc58:	1c400136 	bltu	r3,r17,bc60 <__udivdi3+0xe8>
    bc5c:	18814236 	bltu	r3,r2,c168 <__udivdi3+0x5f0>
    bc60:	202d883a 	mov	r22,r4
    bc64:	18a1c83a 	sub	r16,r3,r2
    bc68:	8009883a 	mov	r4,r16
    bc6c:	a80b883a 	mov	r5,r21
    bc70:	000c8940 	call	c894 <__umodsi3>
    bc74:	1027883a 	mov	r19,r2
    bc78:	8009883a 	mov	r4,r16
    bc7c:	a80b883a 	mov	r5,r21
    bc80:	9826943a 	slli	r19,r19,16
    bc84:	000c8300 	call	c830 <__udivsi3>
    bc88:	100b883a 	mov	r5,r2
    bc8c:	a009883a 	mov	r4,r20
    bc90:	94bfffcc 	andi	r18,r18,65535
    bc94:	1021883a 	mov	r16,r2
    bc98:	94e4b03a 	or	r18,r18,r19
    bc9c:	000c8ec0 	call	c8ec <__mulsi3>
    bca0:	9080052e 	bgeu	r18,r2,bcb8 <__udivdi3+0x140>
    bca4:	8ca5883a 	add	r18,r17,r18
    bca8:	80ffffc4 	addi	r3,r16,-1
    bcac:	94410c36 	bltu	r18,r17,c0e0 <__udivdi3+0x568>
    bcb0:	90810b2e 	bgeu	r18,r2,c0e0 <__udivdi3+0x568>
    bcb4:	843fff84 	addi	r16,r16,-2
    bcb8:	b004943a 	slli	r2,r22,16
    bcbc:	0007883a 	mov	r3,zero
    bcc0:	1404b03a 	or	r2,r2,r16
    bcc4:	00005e06 	br	be40 <__udivdi3+0x2c8>
    bcc8:	29c05b36 	bltu	r5,r7,be38 <__udivdi3+0x2c0>
    bccc:	00bfffd4 	movui	r2,65535
    bcd0:	11c0672e 	bgeu	r2,r7,be70 <__udivdi3+0x2f8>
    bcd4:	00804034 	movhi	r2,256
    bcd8:	10bfffc4 	addi	r2,r2,-1
    bcdc:	11c10a36 	bltu	r2,r7,c108 <__udivdi3+0x590>
    bce0:	00800404 	movi	r2,16
    bce4:	3886d83a 	srl	r3,r7,r2
    bce8:	01000074 	movhi	r4,1
    bcec:	2108cb04 	addi	r4,r4,9004
    bcf0:	20c7883a 	add	r3,r4,r3
    bcf4:	18c00003 	ldbu	r3,0(r3)
    bcf8:	05c00804 	movi	r23,32
    bcfc:	1885883a 	add	r2,r3,r2
    bd00:	b8afc83a 	sub	r23,r23,r2
    bd04:	b800671e 	bne	r23,zero,bea4 <__udivdi3+0x32c>
    bd08:	3c010536 	bltu	r7,r16,c120 <__udivdi3+0x5a8>
    bd0c:	9985403a 	cmpgeu	r2,r19,r6
    bd10:	0007883a 	mov	r3,zero
    bd14:	00004a06 	br	be40 <__udivdi3+0x2c8>
    bd18:	3000041e 	bne	r6,zero,bd2c <__udivdi3+0x1b4>
    bd1c:	000b883a 	mov	r5,zero
    bd20:	01000044 	movi	r4,1
    bd24:	000c8300 	call	c830 <__udivsi3>
    bd28:	1023883a 	mov	r17,r2
    bd2c:	00bfffd4 	movui	r2,65535
    bd30:	1440532e 	bgeu	r2,r17,be80 <__udivdi3+0x308>
    bd34:	00804034 	movhi	r2,256
    bd38:	10bfffc4 	addi	r2,r2,-1
    bd3c:	1440f436 	bltu	r2,r17,c110 <__udivdi3+0x598>
    bd40:	00800404 	movi	r2,16
    bd44:	8886d83a 	srl	r3,r17,r2
    bd48:	01000074 	movhi	r4,1
    bd4c:	2108cb04 	addi	r4,r4,9004
    bd50:	20c7883a 	add	r3,r4,r3
    bd54:	18c00003 	ldbu	r3,0(r3)
    bd58:	1885883a 	add	r2,r3,r2
    bd5c:	00c00804 	movi	r3,32
    bd60:	1887c83a 	sub	r3,r3,r2
    bd64:	1800a51e 	bne	r3,zero,bffc <__udivdi3+0x484>
    bd68:	882ad43a 	srli	r21,r17,16
    bd6c:	8461c83a 	sub	r16,r16,r17
    bd70:	8d3fffcc 	andi	r20,r17,65535
    bd74:	00c00044 	movi	r3,1
    bd78:	a80b883a 	mov	r5,r21
    bd7c:	8009883a 	mov	r4,r16
    bd80:	d8c00115 	stw	r3,4(sp)
    bd84:	000c8940 	call	c894 <__umodsi3>
    bd88:	a80b883a 	mov	r5,r21
    bd8c:	8009883a 	mov	r4,r16
    bd90:	1027883a 	mov	r19,r2
    bd94:	000c8300 	call	c830 <__udivsi3>
    bd98:	a00b883a 	mov	r5,r20
    bd9c:	1009883a 	mov	r4,r2
    bda0:	102d883a 	mov	r22,r2
    bda4:	000c8ec0 	call	c8ec <__mulsi3>
    bda8:	9826943a 	slli	r19,r19,16
    bdac:	900ed43a 	srli	r7,r18,16
    bdb0:	d8c00117 	ldw	r3,4(sp)
    bdb4:	3cceb03a 	or	r7,r7,r19
    bdb8:	3880052e 	bgeu	r7,r2,bdd0 <__udivdi3+0x258>
    bdbc:	3c4f883a 	add	r7,r7,r17
    bdc0:	b13fffc4 	addi	r4,r22,-1
    bdc4:	3c400136 	bltu	r7,r17,bdcc <__udivdi3+0x254>
    bdc8:	3880e436 	bltu	r7,r2,c15c <__udivdi3+0x5e4>
    bdcc:	202d883a 	mov	r22,r4
    bdd0:	38a1c83a 	sub	r16,r7,r2
    bdd4:	8009883a 	mov	r4,r16
    bdd8:	a80b883a 	mov	r5,r21
    bddc:	d8c00115 	stw	r3,4(sp)
    bde0:	000c8940 	call	c894 <__umodsi3>
    bde4:	1027883a 	mov	r19,r2
    bde8:	8009883a 	mov	r4,r16
    bdec:	a80b883a 	mov	r5,r21
    bdf0:	9826943a 	slli	r19,r19,16
    bdf4:	000c8300 	call	c830 <__udivsi3>
    bdf8:	a00b883a 	mov	r5,r20
    bdfc:	1009883a 	mov	r4,r2
    be00:	94bfffcc 	andi	r18,r18,65535
    be04:	1021883a 	mov	r16,r2
    be08:	94e4b03a 	or	r18,r18,r19
    be0c:	000c8ec0 	call	c8ec <__mulsi3>
    be10:	d8c00117 	ldw	r3,4(sp)
    be14:	9080052e 	bgeu	r18,r2,be2c <__udivdi3+0x2b4>
    be18:	8ca5883a 	add	r18,r17,r18
    be1c:	813fffc4 	addi	r4,r16,-1
    be20:	9440ad36 	bltu	r18,r17,c0d8 <__udivdi3+0x560>
    be24:	9080ac2e 	bgeu	r18,r2,c0d8 <__udivdi3+0x560>
    be28:	843fff84 	addi	r16,r16,-2
    be2c:	b004943a 	slli	r2,r22,16
    be30:	1404b03a 	or	r2,r2,r16
    be34:	00000206 	br	be40 <__udivdi3+0x2c8>
    be38:	0007883a 	mov	r3,zero
    be3c:	0005883a 	mov	r2,zero
    be40:	dfc00b17 	ldw	ra,44(sp)
    be44:	df000a17 	ldw	fp,40(sp)
    be48:	ddc00917 	ldw	r23,36(sp)
    be4c:	dd800817 	ldw	r22,32(sp)
    be50:	dd400717 	ldw	r21,28(sp)
    be54:	dd000617 	ldw	r20,24(sp)
    be58:	dcc00517 	ldw	r19,20(sp)
    be5c:	dc800417 	ldw	r18,16(sp)
    be60:	dc400317 	ldw	r17,12(sp)
    be64:	dc000217 	ldw	r16,8(sp)
    be68:	dec00c04 	addi	sp,sp,48
    be6c:	f800283a 	ret
    be70:	00803fc4 	movi	r2,255
    be74:	11c5803a 	cmpltu	r2,r2,r7
    be78:	100490fa 	slli	r2,r2,3
    be7c:	003f9906 	br	bce4 <__udivdi3+0x16c>
    be80:	00803fc4 	movi	r2,255
    be84:	1445803a 	cmpltu	r2,r2,r17
    be88:	100490fa 	slli	r2,r2,3
    be8c:	003fad06 	br	bd44 <__udivdi3+0x1cc>
    be90:	00804034 	movhi	r2,256
    be94:	10bfffc4 	addi	r2,r2,-1
    be98:	11809f36 	bltu	r2,r6,c118 <__udivdi3+0x5a0>
    be9c:	00800404 	movi	r2,16
    bea0:	003f4c06 	br	bbd4 <__udivdi3+0x5c>
    bea4:	3dce983a 	sll	r7,r7,r23
    bea8:	30b8d83a 	srl	fp,r6,r2
    beac:	80a2d83a 	srl	r17,r16,r2
    beb0:	35cc983a 	sll	r6,r6,r23
    beb4:	3f38b03a 	or	fp,r7,fp
    beb8:	e024d43a 	srli	r18,fp,16
    bebc:	9884d83a 	srl	r2,r19,r2
    bec0:	85e0983a 	sll	r16,r16,r23
    bec4:	8809883a 	mov	r4,r17
    bec8:	900b883a 	mov	r5,r18
    becc:	d9800015 	stw	r6,0(sp)
    bed0:	1420b03a 	or	r16,r2,r16
    bed4:	000c8940 	call	c894 <__umodsi3>
    bed8:	900b883a 	mov	r5,r18
    bedc:	8809883a 	mov	r4,r17
    bee0:	1029883a 	mov	r20,r2
    bee4:	e5bfffcc 	andi	r22,fp,65535
    bee8:	000c8300 	call	c830 <__udivsi3>
    beec:	100b883a 	mov	r5,r2
    bef0:	b009883a 	mov	r4,r22
    bef4:	102b883a 	mov	r21,r2
    bef8:	000c8ec0 	call	c8ec <__mulsi3>
    befc:	a028943a 	slli	r20,r20,16
    bf00:	8006d43a 	srli	r3,r16,16
    bf04:	1d06b03a 	or	r3,r3,r20
    bf08:	1880042e 	bgeu	r3,r2,bf1c <__udivdi3+0x3a4>
    bf0c:	1f07883a 	add	r3,r3,fp
    bf10:	a93fffc4 	addi	r4,r21,-1
    bf14:	1f00892e 	bgeu	r3,fp,c13c <__udivdi3+0x5c4>
    bf18:	202b883a 	mov	r21,r4
    bf1c:	18a3c83a 	sub	r17,r3,r2
    bf20:	8809883a 	mov	r4,r17
    bf24:	900b883a 	mov	r5,r18
    bf28:	000c8940 	call	c894 <__umodsi3>
    bf2c:	1029883a 	mov	r20,r2
    bf30:	8809883a 	mov	r4,r17
    bf34:	900b883a 	mov	r5,r18
    bf38:	a028943a 	slli	r20,r20,16
    bf3c:	000c8300 	call	c830 <__udivsi3>
    bf40:	100b883a 	mov	r5,r2
    bf44:	b009883a 	mov	r4,r22
    bf48:	843fffcc 	andi	r16,r16,65535
    bf4c:	1023883a 	mov	r17,r2
    bf50:	8520b03a 	or	r16,r16,r20
    bf54:	000c8ec0 	call	c8ec <__mulsi3>
    bf58:	8080042e 	bgeu	r16,r2,bf6c <__udivdi3+0x3f4>
    bf5c:	8721883a 	add	r16,r16,fp
    bf60:	88ffffc4 	addi	r3,r17,-1
    bf64:	8700712e 	bgeu	r16,fp,c12c <__udivdi3+0x5b4>
    bf68:	1823883a 	mov	r17,r3
    bf6c:	a80e943a 	slli	r7,r21,16
    bf70:	d8c00017 	ldw	r3,0(sp)
    bf74:	80a1c83a 	sub	r16,r16,r2
    bf78:	3c64b03a 	or	r18,r7,r17
    bf7c:	1d3fffcc 	andi	r20,r3,65535
    bf80:	9022d43a 	srli	r17,r18,16
    bf84:	95bfffcc 	andi	r22,r18,65535
    bf88:	a00b883a 	mov	r5,r20
    bf8c:	b009883a 	mov	r4,r22
    bf90:	182ad43a 	srli	r21,r3,16
    bf94:	000c8ec0 	call	c8ec <__mulsi3>
    bf98:	a00b883a 	mov	r5,r20
    bf9c:	8809883a 	mov	r4,r17
    bfa0:	1039883a 	mov	fp,r2
    bfa4:	000c8ec0 	call	c8ec <__mulsi3>
    bfa8:	8809883a 	mov	r4,r17
    bfac:	a80b883a 	mov	r5,r21
    bfb0:	1029883a 	mov	r20,r2
    bfb4:	000c8ec0 	call	c8ec <__mulsi3>
    bfb8:	a80b883a 	mov	r5,r21
    bfbc:	b009883a 	mov	r4,r22
    bfc0:	1023883a 	mov	r17,r2
    bfc4:	000c8ec0 	call	c8ec <__mulsi3>
    bfc8:	e006d43a 	srli	r3,fp,16
    bfcc:	1505883a 	add	r2,r2,r20
    bfd0:	1887883a 	add	r3,r3,r2
    bfd4:	1d00022e 	bgeu	r3,r20,bfe0 <__udivdi3+0x468>
    bfd8:	00800074 	movhi	r2,1
    bfdc:	88a3883a 	add	r17,r17,r2
    bfe0:	1804d43a 	srli	r2,r3,16
    bfe4:	1463883a 	add	r17,r2,r17
    bfe8:	84404436 	bltu	r16,r17,c0fc <__udivdi3+0x584>
    bfec:	84403e26 	beq	r16,r17,c0e8 <__udivdi3+0x570>
    bff0:	9005883a 	mov	r2,r18
    bff4:	0007883a 	mov	r3,zero
    bff8:	003f9106 	br	be40 <__udivdi3+0x2c8>
    bffc:	88e2983a 	sll	r17,r17,r3
    c000:	80aed83a 	srl	r23,r16,r2
    c004:	80e0983a 	sll	r16,r16,r3
    c008:	882ad43a 	srli	r21,r17,16
    c00c:	9884d83a 	srl	r2,r19,r2
    c010:	b809883a 	mov	r4,r23
    c014:	a80b883a 	mov	r5,r21
    c018:	98e4983a 	sll	r18,r19,r3
    c01c:	142cb03a 	or	r22,r2,r16
    c020:	000c8940 	call	c894 <__umodsi3>
    c024:	b809883a 	mov	r4,r23
    c028:	a80b883a 	mov	r5,r21
    c02c:	1027883a 	mov	r19,r2
    c030:	8d3fffcc 	andi	r20,r17,65535
    c034:	000c8300 	call	c830 <__udivsi3>
    c038:	a009883a 	mov	r4,r20
    c03c:	100b883a 	mov	r5,r2
    c040:	102f883a 	mov	r23,r2
    c044:	000c8ec0 	call	c8ec <__mulsi3>
    c048:	9826943a 	slli	r19,r19,16
    c04c:	b008d43a 	srli	r4,r22,16
    c050:	24c8b03a 	or	r4,r4,r19
    c054:	2080062e 	bgeu	r4,r2,c070 <__udivdi3+0x4f8>
    c058:	2449883a 	add	r4,r4,r17
    c05c:	b8ffffc4 	addi	r3,r23,-1
    c060:	24403c36 	bltu	r4,r17,c154 <__udivdi3+0x5dc>
    c064:	20803b2e 	bgeu	r4,r2,c154 <__udivdi3+0x5dc>
    c068:	bdffff84 	addi	r23,r23,-2
    c06c:	2449883a 	add	r4,r4,r17
    c070:	20a1c83a 	sub	r16,r4,r2
    c074:	a80b883a 	mov	r5,r21
    c078:	8009883a 	mov	r4,r16
    c07c:	000c8940 	call	c894 <__umodsi3>
    c080:	a80b883a 	mov	r5,r21
    c084:	8009883a 	mov	r4,r16
    c088:	1027883a 	mov	r19,r2
    c08c:	000c8300 	call	c830 <__udivsi3>
    c090:	a009883a 	mov	r4,r20
    c094:	100b883a 	mov	r5,r2
    c098:	9826943a 	slli	r19,r19,16
    c09c:	1039883a 	mov	fp,r2
    c0a0:	000c8ec0 	call	c8ec <__mulsi3>
    c0a4:	b13fffcc 	andi	r4,r22,65535
    c0a8:	24c8b03a 	or	r4,r4,r19
    c0ac:	2080062e 	bgeu	r4,r2,c0c8 <__udivdi3+0x550>
    c0b0:	2449883a 	add	r4,r4,r17
    c0b4:	e0ffffc4 	addi	r3,fp,-1
    c0b8:	24402436 	bltu	r4,r17,c14c <__udivdi3+0x5d4>
    c0bc:	2080232e 	bgeu	r4,r2,c14c <__udivdi3+0x5d4>
    c0c0:	e73fff84 	addi	fp,fp,-2
    c0c4:	2449883a 	add	r4,r4,r17
    c0c8:	b82e943a 	slli	r23,r23,16
    c0cc:	20a1c83a 	sub	r16,r4,r2
    c0d0:	bf06b03a 	or	r3,r23,fp
    c0d4:	003f2806 	br	bd78 <__udivdi3+0x200>
    c0d8:	2021883a 	mov	r16,r4
    c0dc:	003f5306 	br	be2c <__udivdi3+0x2b4>
    c0e0:	1821883a 	mov	r16,r3
    c0e4:	003ef406 	br	bcb8 <__udivdi3+0x140>
    c0e8:	1806943a 	slli	r3,r3,16
    c0ec:	9de6983a 	sll	r19,r19,r23
    c0f0:	e73fffcc 	andi	fp,fp,65535
    c0f4:	1f07883a 	add	r3,r3,fp
    c0f8:	98ffbd2e 	bgeu	r19,r3,bff0 <__udivdi3+0x478>
    c0fc:	90bfffc4 	addi	r2,r18,-1
    c100:	0007883a 	mov	r3,zero
    c104:	003f4e06 	br	be40 <__udivdi3+0x2c8>
    c108:	00800604 	movi	r2,24
    c10c:	003ef506 	br	bce4 <__udivdi3+0x16c>
    c110:	00800604 	movi	r2,24
    c114:	003f0b06 	br	bd44 <__udivdi3+0x1cc>
    c118:	00800604 	movi	r2,24
    c11c:	003ead06 	br	bbd4 <__udivdi3+0x5c>
    c120:	0007883a 	mov	r3,zero
    c124:	00800044 	movi	r2,1
    c128:	003f4506 	br	be40 <__udivdi3+0x2c8>
    c12c:	80bf8e2e 	bgeu	r16,r2,bf68 <__udivdi3+0x3f0>
    c130:	8c7fff84 	addi	r17,r17,-2
    c134:	8721883a 	add	r16,r16,fp
    c138:	003f8c06 	br	bf6c <__udivdi3+0x3f4>
    c13c:	18bf762e 	bgeu	r3,r2,bf18 <__udivdi3+0x3a0>
    c140:	ad7fff84 	addi	r21,r21,-2
    c144:	1f07883a 	add	r3,r3,fp
    c148:	003f7406 	br	bf1c <__udivdi3+0x3a4>
    c14c:	1839883a 	mov	fp,r3
    c150:	003fdd06 	br	c0c8 <__udivdi3+0x550>
    c154:	182f883a 	mov	r23,r3
    c158:	003fc506 	br	c070 <__udivdi3+0x4f8>
    c15c:	b5bfff84 	addi	r22,r22,-2
    c160:	3c4f883a 	add	r7,r7,r17
    c164:	003f1a06 	br	bdd0 <__udivdi3+0x258>
    c168:	b5bfff84 	addi	r22,r22,-2
    c16c:	1c47883a 	add	r3,r3,r17
    c170:	003ebc06 	br	bc64 <__udivdi3+0xec>

0000c174 <__umoddi3>:
    c174:	defff304 	addi	sp,sp,-52
    c178:	df000b15 	stw	fp,44(sp)
    c17c:	dc400415 	stw	r17,16(sp)
    c180:	dc000315 	stw	r16,12(sp)
    c184:	dfc00c15 	stw	ra,48(sp)
    c188:	ddc00a15 	stw	r23,40(sp)
    c18c:	dd800915 	stw	r22,36(sp)
    c190:	dd400815 	stw	r21,32(sp)
    c194:	dd000715 	stw	r20,28(sp)
    c198:	dcc00615 	stw	r19,24(sp)
    c19c:	dc800515 	stw	r18,20(sp)
    c1a0:	2021883a 	mov	r16,r4
    c1a4:	2823883a 	mov	r17,r5
    c1a8:	2839883a 	mov	fp,r5
    c1ac:	3800401e 	bne	r7,zero,c2b0 <__umoddi3+0x13c>
    c1b0:	3027883a 	mov	r19,r6
    c1b4:	2029883a 	mov	r20,r4
    c1b8:	2980552e 	bgeu	r5,r6,c310 <__umoddi3+0x19c>
    c1bc:	00bfffd4 	movui	r2,65535
    c1c0:	1180a236 	bltu	r2,r6,c44c <__umoddi3+0x2d8>
    c1c4:	01003fc4 	movi	r4,255
    c1c8:	2189803a 	cmpltu	r4,r4,r6
    c1cc:	200890fa 	slli	r4,r4,3
    c1d0:	3104d83a 	srl	r2,r6,r4
    c1d4:	00c00074 	movhi	r3,1
    c1d8:	18c8cb04 	addi	r3,r3,9004
    c1dc:	1885883a 	add	r2,r3,r2
    c1e0:	10c00003 	ldbu	r3,0(r2)
    c1e4:	00800804 	movi	r2,32
    c1e8:	1909883a 	add	r4,r3,r4
    c1ec:	1125c83a 	sub	r18,r2,r4
    c1f0:	90000526 	beq	r18,zero,c208 <__umoddi3+0x94>
    c1f4:	8ca2983a 	sll	r17,r17,r18
    c1f8:	8108d83a 	srl	r4,r16,r4
    c1fc:	34a6983a 	sll	r19,r6,r18
    c200:	84a8983a 	sll	r20,r16,r18
    c204:	2478b03a 	or	fp,r4,r17
    c208:	982cd43a 	srli	r22,r19,16
    c20c:	e009883a 	mov	r4,fp
    c210:	9dffffcc 	andi	r23,r19,65535
    c214:	b00b883a 	mov	r5,r22
    c218:	000c8940 	call	c894 <__umodsi3>
    c21c:	b00b883a 	mov	r5,r22
    c220:	e009883a 	mov	r4,fp
    c224:	102b883a 	mov	r21,r2
    c228:	000c8300 	call	c830 <__udivsi3>
    c22c:	100b883a 	mov	r5,r2
    c230:	b809883a 	mov	r4,r23
    c234:	000c8ec0 	call	c8ec <__mulsi3>
    c238:	a82a943a 	slli	r21,r21,16
    c23c:	a006d43a 	srli	r3,r20,16
    c240:	1d46b03a 	or	r3,r3,r21
    c244:	1880032e 	bgeu	r3,r2,c254 <__umoddi3+0xe0>
    c248:	1cc7883a 	add	r3,r3,r19
    c24c:	1cc00136 	bltu	r3,r19,c254 <__umoddi3+0xe0>
    c250:	18813136 	bltu	r3,r2,c718 <__umoddi3+0x5a4>
    c254:	18a1c83a 	sub	r16,r3,r2
    c258:	b00b883a 	mov	r5,r22
    c25c:	8009883a 	mov	r4,r16
    c260:	000c8940 	call	c894 <__umodsi3>
    c264:	b00b883a 	mov	r5,r22
    c268:	8009883a 	mov	r4,r16
    c26c:	1023883a 	mov	r17,r2
    c270:	000c8300 	call	c830 <__udivsi3>
    c274:	100b883a 	mov	r5,r2
    c278:	b809883a 	mov	r4,r23
    c27c:	8822943a 	slli	r17,r17,16
    c280:	000c8ec0 	call	c8ec <__mulsi3>
    c284:	a0ffffcc 	andi	r3,r20,65535
    c288:	1c46b03a 	or	r3,r3,r17
    c28c:	1880042e 	bgeu	r3,r2,c2a0 <__umoddi3+0x12c>
    c290:	1cc7883a 	add	r3,r3,r19
    c294:	1cc00236 	bltu	r3,r19,c2a0 <__umoddi3+0x12c>
    c298:	1880012e 	bgeu	r3,r2,c2a0 <__umoddi3+0x12c>
    c29c:	1cc7883a 	add	r3,r3,r19
    c2a0:	1885c83a 	sub	r2,r3,r2
    c2a4:	1484d83a 	srl	r2,r2,r18
    c2a8:	0007883a 	mov	r3,zero
    c2ac:	00005306 	br	c3fc <__umoddi3+0x288>
    c2b0:	29c05036 	bltu	r5,r7,c3f4 <__umoddi3+0x280>
    c2b4:	00bfffd4 	movui	r2,65535
    c2b8:	11c05c2e 	bgeu	r2,r7,c42c <__umoddi3+0x2b8>
    c2bc:	00804034 	movhi	r2,256
    c2c0:	10bfffc4 	addi	r2,r2,-1
    c2c4:	11c10636 	bltu	r2,r7,c6e0 <__umoddi3+0x56c>
    c2c8:	01000404 	movi	r4,16
    c2cc:	3904d83a 	srl	r2,r7,r4
    c2d0:	00c00074 	movhi	r3,1
    c2d4:	18c8cb04 	addi	r3,r3,9004
    c2d8:	1885883a 	add	r2,r3,r2
    c2dc:	14c00003 	ldbu	r19,0(r2)
    c2e0:	00c00804 	movi	r3,32
    c2e4:	9927883a 	add	r19,r19,r4
    c2e8:	1ce9c83a 	sub	r20,r3,r19
    c2ec:	a0005c1e 	bne	r20,zero,c460 <__umoddi3+0x2ec>
    c2f0:	3c400136 	bltu	r7,r17,c2f8 <__umoddi3+0x184>
    c2f4:	81810a36 	bltu	r16,r6,c720 <__umoddi3+0x5ac>
    c2f8:	8185c83a 	sub	r2,r16,r6
    c2fc:	89e3c83a 	sub	r17,r17,r7
    c300:	8089803a 	cmpltu	r4,r16,r2
    c304:	8939c83a 	sub	fp,r17,r4
    c308:	e007883a 	mov	r3,fp
    c30c:	00003b06 	br	c3fc <__umoddi3+0x288>
    c310:	3000041e 	bne	r6,zero,c324 <__umoddi3+0x1b0>
    c314:	000b883a 	mov	r5,zero
    c318:	01000044 	movi	r4,1
    c31c:	000c8300 	call	c830 <__udivsi3>
    c320:	1027883a 	mov	r19,r2
    c324:	00bfffd4 	movui	r2,65535
    c328:	14c0442e 	bgeu	r2,r19,c43c <__umoddi3+0x2c8>
    c32c:	00804034 	movhi	r2,256
    c330:	10bfffc4 	addi	r2,r2,-1
    c334:	14c0ec36 	bltu	r2,r19,c6e8 <__umoddi3+0x574>
    c338:	00800404 	movi	r2,16
    c33c:	9886d83a 	srl	r3,r19,r2
    c340:	01000074 	movhi	r4,1
    c344:	2108cb04 	addi	r4,r4,9004
    c348:	20c7883a 	add	r3,r4,r3
    c34c:	18c00003 	ldbu	r3,0(r3)
    c350:	1887883a 	add	r3,r3,r2
    c354:	00800804 	movi	r2,32
    c358:	10e5c83a 	sub	r18,r2,r3
    c35c:	9000ab1e 	bne	r18,zero,c60c <__umoddi3+0x498>
    c360:	982cd43a 	srli	r22,r19,16
    c364:	8ce3c83a 	sub	r17,r17,r19
    c368:	9dffffcc 	andi	r23,r19,65535
    c36c:	b00b883a 	mov	r5,r22
    c370:	8809883a 	mov	r4,r17
    c374:	000c8940 	call	c894 <__umodsi3>
    c378:	b00b883a 	mov	r5,r22
    c37c:	8809883a 	mov	r4,r17
    c380:	102b883a 	mov	r21,r2
    c384:	000c8300 	call	c830 <__udivsi3>
    c388:	b80b883a 	mov	r5,r23
    c38c:	1009883a 	mov	r4,r2
    c390:	000c8ec0 	call	c8ec <__mulsi3>
    c394:	a82a943a 	slli	r21,r21,16
    c398:	a006d43a 	srli	r3,r20,16
    c39c:	1d46b03a 	or	r3,r3,r21
    c3a0:	1880042e 	bgeu	r3,r2,c3b4 <__umoddi3+0x240>
    c3a4:	1cc7883a 	add	r3,r3,r19
    c3a8:	1cc00236 	bltu	r3,r19,c3b4 <__umoddi3+0x240>
    c3ac:	1880012e 	bgeu	r3,r2,c3b4 <__umoddi3+0x240>
    c3b0:	1cc7883a 	add	r3,r3,r19
    c3b4:	18a1c83a 	sub	r16,r3,r2
    c3b8:	b00b883a 	mov	r5,r22
    c3bc:	8009883a 	mov	r4,r16
    c3c0:	000c8940 	call	c894 <__umodsi3>
    c3c4:	1023883a 	mov	r17,r2
    c3c8:	b00b883a 	mov	r5,r22
    c3cc:	8009883a 	mov	r4,r16
    c3d0:	000c8300 	call	c830 <__udivsi3>
    c3d4:	8822943a 	slli	r17,r17,16
    c3d8:	b80b883a 	mov	r5,r23
    c3dc:	1009883a 	mov	r4,r2
    c3e0:	000c8ec0 	call	c8ec <__mulsi3>
    c3e4:	a53fffcc 	andi	r20,r20,65535
    c3e8:	a446b03a 	or	r3,r20,r17
    c3ec:	18bfac2e 	bgeu	r3,r2,c2a0 <__umoddi3+0x12c>
    c3f0:	003fa706 	br	c290 <__umoddi3+0x11c>
    c3f4:	2005883a 	mov	r2,r4
    c3f8:	2807883a 	mov	r3,r5
    c3fc:	dfc00c17 	ldw	ra,48(sp)
    c400:	df000b17 	ldw	fp,44(sp)
    c404:	ddc00a17 	ldw	r23,40(sp)
    c408:	dd800917 	ldw	r22,36(sp)
    c40c:	dd400817 	ldw	r21,32(sp)
    c410:	dd000717 	ldw	r20,28(sp)
    c414:	dcc00617 	ldw	r19,24(sp)
    c418:	dc800517 	ldw	r18,20(sp)
    c41c:	dc400417 	ldw	r17,16(sp)
    c420:	dc000317 	ldw	r16,12(sp)
    c424:	dec00d04 	addi	sp,sp,52
    c428:	f800283a 	ret
    c42c:	04c03fc4 	movi	r19,255
    c430:	99c9803a 	cmpltu	r4,r19,r7
    c434:	200890fa 	slli	r4,r4,3
    c438:	003fa406 	br	c2cc <__umoddi3+0x158>
    c43c:	00803fc4 	movi	r2,255
    c440:	14c5803a 	cmpltu	r2,r2,r19
    c444:	100490fa 	slli	r2,r2,3
    c448:	003fbc06 	br	c33c <__umoddi3+0x1c8>
    c44c:	00804034 	movhi	r2,256
    c450:	10bfffc4 	addi	r2,r2,-1
    c454:	1180a636 	bltu	r2,r6,c6f0 <__umoddi3+0x57c>
    c458:	01000404 	movi	r4,16
    c45c:	003f5c06 	br	c1d0 <__umoddi3+0x5c>
    c460:	3d0e983a 	sll	r7,r7,r20
    c464:	34ead83a 	srl	r21,r6,r19
    c468:	8cc6d83a 	srl	r3,r17,r19
    c46c:	8d10983a 	sll	r8,r17,r20
    c470:	3d6ab03a 	or	r21,r7,r21
    c474:	a82cd43a 	srli	r22,r21,16
    c478:	84e2d83a 	srl	r17,r16,r19
    c47c:	1809883a 	mov	r4,r3
    c480:	b00b883a 	mov	r5,r22
    c484:	8a22b03a 	or	r17,r17,r8
    c488:	3524983a 	sll	r18,r6,r20
    c48c:	dc400015 	stw	r17,0(sp)
    c490:	d8c00115 	stw	r3,4(sp)
    c494:	000c8940 	call	c894 <__umodsi3>
    c498:	d8c00117 	ldw	r3,4(sp)
    c49c:	b00b883a 	mov	r5,r22
    c4a0:	1039883a 	mov	fp,r2
    c4a4:	1809883a 	mov	r4,r3
    c4a8:	000c8300 	call	c830 <__udivsi3>
    c4ac:	adffffcc 	andi	r23,r21,65535
    c4b0:	100b883a 	mov	r5,r2
    c4b4:	b809883a 	mov	r4,r23
    c4b8:	1023883a 	mov	r17,r2
    c4bc:	000c8ec0 	call	c8ec <__mulsi3>
    c4c0:	d9400017 	ldw	r5,0(sp)
    c4c4:	e008943a 	slli	r4,fp,16
    c4c8:	8520983a 	sll	r16,r16,r20
    c4cc:	2806d43a 	srli	r3,r5,16
    c4d0:	1906b03a 	or	r3,r3,r4
    c4d4:	1880042e 	bgeu	r3,r2,c4e8 <__umoddi3+0x374>
    c4d8:	1d47883a 	add	r3,r3,r21
    c4dc:	893fffc4 	addi	r4,r17,-1
    c4e0:	1d40892e 	bgeu	r3,r21,c708 <__umoddi3+0x594>
    c4e4:	2023883a 	mov	r17,r4
    c4e8:	18b9c83a 	sub	fp,r3,r2
    c4ec:	b00b883a 	mov	r5,r22
    c4f0:	e009883a 	mov	r4,fp
    c4f4:	000c8940 	call	c894 <__umodsi3>
    c4f8:	b00b883a 	mov	r5,r22
    c4fc:	e009883a 	mov	r4,fp
    c500:	d8800215 	stw	r2,8(sp)
    c504:	000c8300 	call	c830 <__udivsi3>
    c508:	100b883a 	mov	r5,r2
    c50c:	b809883a 	mov	r4,r23
    c510:	102d883a 	mov	r22,r2
    c514:	000c8ec0 	call	c8ec <__mulsi3>
    c518:	d9800217 	ldw	r6,8(sp)
    c51c:	d8c00017 	ldw	r3,0(sp)
    c520:	300c943a 	slli	r6,r6,16
    c524:	1a3fffcc 	andi	r8,r3,65535
    c528:	4190b03a 	or	r8,r8,r6
    c52c:	4080042e 	bgeu	r8,r2,c540 <__umoddi3+0x3cc>
    c530:	4551883a 	add	r8,r8,r21
    c534:	b0ffffc4 	addi	r3,r22,-1
    c538:	45406f2e 	bgeu	r8,r21,c6f8 <__umoddi3+0x584>
    c53c:	182d883a 	mov	r22,r3
    c540:	880e943a 	slli	r7,r17,16
    c544:	9006d43a 	srli	r3,r18,16
    c548:	91bfffcc 	andi	r6,r18,65535
    c54c:	3dacb03a 	or	r22,r7,r22
    c550:	b02ed43a 	srli	r23,r22,16
    c554:	b5bfffcc 	andi	r22,r22,65535
    c558:	300b883a 	mov	r5,r6
    c55c:	b009883a 	mov	r4,r22
    c560:	40a3c83a 	sub	r17,r8,r2
    c564:	d8c00115 	stw	r3,4(sp)
    c568:	d9800215 	stw	r6,8(sp)
    c56c:	000c8ec0 	call	c8ec <__mulsi3>
    c570:	d9800217 	ldw	r6,8(sp)
    c574:	b809883a 	mov	r4,r23
    c578:	1039883a 	mov	fp,r2
    c57c:	300b883a 	mov	r5,r6
    c580:	000c8ec0 	call	c8ec <__mulsi3>
    c584:	d8c00117 	ldw	r3,4(sp)
    c588:	b809883a 	mov	r4,r23
    c58c:	d8800215 	stw	r2,8(sp)
    c590:	180b883a 	mov	r5,r3
    c594:	000c8ec0 	call	c8ec <__mulsi3>
    c598:	d8c00117 	ldw	r3,4(sp)
    c59c:	b009883a 	mov	r4,r22
    c5a0:	102f883a 	mov	r23,r2
    c5a4:	180b883a 	mov	r5,r3
    c5a8:	000c8ec0 	call	c8ec <__mulsi3>
    c5ac:	d9800217 	ldw	r6,8(sp)
    c5b0:	e006d43a 	srli	r3,fp,16
    c5b4:	1185883a 	add	r2,r2,r6
    c5b8:	1885883a 	add	r2,r3,r2
    c5bc:	1180022e 	bgeu	r2,r6,c5c8 <__umoddi3+0x454>
    c5c0:	00c00074 	movhi	r3,1
    c5c4:	b8ef883a 	add	r23,r23,r3
    c5c8:	1006d43a 	srli	r3,r2,16
    c5cc:	1004943a 	slli	r2,r2,16
    c5d0:	e73fffcc 	andi	fp,fp,65535
    c5d4:	1dc7883a 	add	r3,r3,r23
    c5d8:	1739883a 	add	fp,r2,fp
    c5dc:	88c03a36 	bltu	r17,r3,c6c8 <__umoddi3+0x554>
    c5e0:	88c05126 	beq	r17,r3,c728 <__umoddi3+0x5b4>
    c5e4:	88c9c83a 	sub	r4,r17,r3
    c5e8:	e00f883a 	mov	r7,fp
    c5ec:	81cfc83a 	sub	r7,r16,r7
    c5f0:	81c7803a 	cmpltu	r3,r16,r7
    c5f4:	20c7c83a 	sub	r3,r4,r3
    c5f8:	1cc4983a 	sll	r2,r3,r19
    c5fc:	3d0ed83a 	srl	r7,r7,r20
    c600:	1d06d83a 	srl	r3,r3,r20
    c604:	11c4b03a 	or	r2,r2,r7
    c608:	003f7c06 	br	c3fc <__umoddi3+0x288>
    c60c:	9ca6983a 	sll	r19,r19,r18
    c610:	88f8d83a 	srl	fp,r17,r3
    c614:	80c4d83a 	srl	r2,r16,r3
    c618:	982cd43a 	srli	r22,r19,16
    c61c:	8ca2983a 	sll	r17,r17,r18
    c620:	e009883a 	mov	r4,fp
    c624:	b00b883a 	mov	r5,r22
    c628:	146ab03a 	or	r21,r2,r17
    c62c:	000c8940 	call	c894 <__umodsi3>
    c630:	b00b883a 	mov	r5,r22
    c634:	e009883a 	mov	r4,fp
    c638:	1029883a 	mov	r20,r2
    c63c:	9dffffcc 	andi	r23,r19,65535
    c640:	000c8300 	call	c830 <__udivsi3>
    c644:	b809883a 	mov	r4,r23
    c648:	100b883a 	mov	r5,r2
    c64c:	000c8ec0 	call	c8ec <__mulsi3>
    c650:	a008943a 	slli	r4,r20,16
    c654:	a806d43a 	srli	r3,r21,16
    c658:	84a8983a 	sll	r20,r16,r18
    c65c:	1906b03a 	or	r3,r3,r4
    c660:	1880042e 	bgeu	r3,r2,c674 <__umoddi3+0x500>
    c664:	1cc7883a 	add	r3,r3,r19
    c668:	1cc00236 	bltu	r3,r19,c674 <__umoddi3+0x500>
    c66c:	1880012e 	bgeu	r3,r2,c674 <__umoddi3+0x500>
    c670:	1cc7883a 	add	r3,r3,r19
    c674:	18a3c83a 	sub	r17,r3,r2
    c678:	b00b883a 	mov	r5,r22
    c67c:	8809883a 	mov	r4,r17
    c680:	000c8940 	call	c894 <__umodsi3>
    c684:	b00b883a 	mov	r5,r22
    c688:	8809883a 	mov	r4,r17
    c68c:	1021883a 	mov	r16,r2
    c690:	000c8300 	call	c830 <__udivsi3>
    c694:	100b883a 	mov	r5,r2
    c698:	b809883a 	mov	r4,r23
    c69c:	8020943a 	slli	r16,r16,16
    c6a0:	000c8ec0 	call	c8ec <__mulsi3>
    c6a4:	a8ffffcc 	andi	r3,r21,65535
    c6a8:	1c06b03a 	or	r3,r3,r16
    c6ac:	1880042e 	bgeu	r3,r2,c6c0 <__umoddi3+0x54c>
    c6b0:	1cc7883a 	add	r3,r3,r19
    c6b4:	1cc00236 	bltu	r3,r19,c6c0 <__umoddi3+0x54c>
    c6b8:	1880012e 	bgeu	r3,r2,c6c0 <__umoddi3+0x54c>
    c6bc:	1cc7883a 	add	r3,r3,r19
    c6c0:	18a3c83a 	sub	r17,r3,r2
    c6c4:	003f2906 	br	c36c <__umoddi3+0x1f8>
    c6c8:	e48fc83a 	sub	r7,fp,r18
    c6cc:	1d49c83a 	sub	r4,r3,r21
    c6d0:	e1f9803a 	cmpltu	fp,fp,r7
    c6d4:	2739c83a 	sub	fp,r4,fp
    c6d8:	8f09c83a 	sub	r4,r17,fp
    c6dc:	003fc306 	br	c5ec <__umoddi3+0x478>
    c6e0:	01000604 	movi	r4,24
    c6e4:	003ef906 	br	c2cc <__umoddi3+0x158>
    c6e8:	00800604 	movi	r2,24
    c6ec:	003f1306 	br	c33c <__umoddi3+0x1c8>
    c6f0:	01000604 	movi	r4,24
    c6f4:	003eb606 	br	c1d0 <__umoddi3+0x5c>
    c6f8:	40bf902e 	bgeu	r8,r2,c53c <__umoddi3+0x3c8>
    c6fc:	b5bfff84 	addi	r22,r22,-2
    c700:	4551883a 	add	r8,r8,r21
    c704:	003f8e06 	br	c540 <__umoddi3+0x3cc>
    c708:	18bf762e 	bgeu	r3,r2,c4e4 <__umoddi3+0x370>
    c70c:	8c7fff84 	addi	r17,r17,-2
    c710:	1d47883a 	add	r3,r3,r21
    c714:	003f7406 	br	c4e8 <__umoddi3+0x374>
    c718:	1cc7883a 	add	r3,r3,r19
    c71c:	003ecd06 	br	c254 <__umoddi3+0xe0>
    c720:	8005883a 	mov	r2,r16
    c724:	003ef806 	br	c308 <__umoddi3+0x194>
    c728:	873fe736 	bltu	r16,fp,c6c8 <__umoddi3+0x554>
    c72c:	e00f883a 	mov	r7,fp
    c730:	0009883a 	mov	r4,zero
    c734:	003fad06 	br	c5ec <__umoddi3+0x478>

0000c738 <__divsi3>:
    c738:	20001b16 	blt	r4,zero,c7a8 <__divsi3+0x70>
    c73c:	000f883a 	mov	r7,zero
    c740:	28001616 	blt	r5,zero,c79c <__divsi3+0x64>
    c744:	200d883a 	mov	r6,r4
    c748:	29001a2e 	bgeu	r5,r4,c7b4 <__divsi3+0x7c>
    c74c:	00800804 	movi	r2,32
    c750:	00c00044 	movi	r3,1
    c754:	00000106 	br	c75c <__divsi3+0x24>
    c758:	10000d26 	beq	r2,zero,c790 <__divsi3+0x58>
    c75c:	294b883a 	add	r5,r5,r5
    c760:	10bfffc4 	addi	r2,r2,-1
    c764:	18c7883a 	add	r3,r3,r3
    c768:	293ffb36 	bltu	r5,r4,c758 <__divsi3+0x20>
    c76c:	0005883a 	mov	r2,zero
    c770:	18000726 	beq	r3,zero,c790 <__divsi3+0x58>
    c774:	0005883a 	mov	r2,zero
    c778:	31400236 	bltu	r6,r5,c784 <__divsi3+0x4c>
    c77c:	314dc83a 	sub	r6,r6,r5
    c780:	10c4b03a 	or	r2,r2,r3
    c784:	1806d07a 	srli	r3,r3,1
    c788:	280ad07a 	srli	r5,r5,1
    c78c:	183ffa1e 	bne	r3,zero,c778 <__divsi3+0x40>
    c790:	38000126 	beq	r7,zero,c798 <__divsi3+0x60>
    c794:	0085c83a 	sub	r2,zero,r2
    c798:	f800283a 	ret
    c79c:	014bc83a 	sub	r5,zero,r5
    c7a0:	39c0005c 	xori	r7,r7,1
    c7a4:	003fe706 	br	c744 <__divsi3+0xc>
    c7a8:	0109c83a 	sub	r4,zero,r4
    c7ac:	01c00044 	movi	r7,1
    c7b0:	003fe306 	br	c740 <__divsi3+0x8>
    c7b4:	00c00044 	movi	r3,1
    c7b8:	003fee06 	br	c774 <__divsi3+0x3c>

0000c7bc <__modsi3>:
    c7bc:	20001716 	blt	r4,zero,c81c <__modsi3+0x60>
    c7c0:	000f883a 	mov	r7,zero
    c7c4:	2005883a 	mov	r2,r4
    c7c8:	28001216 	blt	r5,zero,c814 <__modsi3+0x58>
    c7cc:	2900162e 	bgeu	r5,r4,c828 <__modsi3+0x6c>
    c7d0:	01800804 	movi	r6,32
    c7d4:	00c00044 	movi	r3,1
    c7d8:	00000106 	br	c7e0 <__modsi3+0x24>
    c7dc:	30000a26 	beq	r6,zero,c808 <__modsi3+0x4c>
    c7e0:	294b883a 	add	r5,r5,r5
    c7e4:	31bfffc4 	addi	r6,r6,-1
    c7e8:	18c7883a 	add	r3,r3,r3
    c7ec:	293ffb36 	bltu	r5,r4,c7dc <__modsi3+0x20>
    c7f0:	18000526 	beq	r3,zero,c808 <__modsi3+0x4c>
    c7f4:	1806d07a 	srli	r3,r3,1
    c7f8:	11400136 	bltu	r2,r5,c800 <__modsi3+0x44>
    c7fc:	1145c83a 	sub	r2,r2,r5
    c800:	280ad07a 	srli	r5,r5,1
    c804:	183ffb1e 	bne	r3,zero,c7f4 <__modsi3+0x38>
    c808:	38000126 	beq	r7,zero,c810 <__modsi3+0x54>
    c80c:	0085c83a 	sub	r2,zero,r2
    c810:	f800283a 	ret
    c814:	014bc83a 	sub	r5,zero,r5
    c818:	003fec06 	br	c7cc <__modsi3+0x10>
    c81c:	0109c83a 	sub	r4,zero,r4
    c820:	01c00044 	movi	r7,1
    c824:	003fe706 	br	c7c4 <__modsi3+0x8>
    c828:	00c00044 	movi	r3,1
    c82c:	003ff106 	br	c7f4 <__modsi3+0x38>

0000c830 <__udivsi3>:
    c830:	200d883a 	mov	r6,r4
    c834:	2900152e 	bgeu	r5,r4,c88c <__udivsi3+0x5c>
    c838:	28001416 	blt	r5,zero,c88c <__udivsi3+0x5c>
    c83c:	00800804 	movi	r2,32
    c840:	00c00044 	movi	r3,1
    c844:	00000206 	br	c850 <__udivsi3+0x20>
    c848:	10000e26 	beq	r2,zero,c884 <__udivsi3+0x54>
    c84c:	28000516 	blt	r5,zero,c864 <__udivsi3+0x34>
    c850:	294b883a 	add	r5,r5,r5
    c854:	10bfffc4 	addi	r2,r2,-1
    c858:	18c7883a 	add	r3,r3,r3
    c85c:	293ffa36 	bltu	r5,r4,c848 <__udivsi3+0x18>
    c860:	18000826 	beq	r3,zero,c884 <__udivsi3+0x54>
    c864:	0005883a 	mov	r2,zero
    c868:	31400236 	bltu	r6,r5,c874 <__udivsi3+0x44>
    c86c:	314dc83a 	sub	r6,r6,r5
    c870:	10c4b03a 	or	r2,r2,r3
    c874:	1806d07a 	srli	r3,r3,1
    c878:	280ad07a 	srli	r5,r5,1
    c87c:	183ffa1e 	bne	r3,zero,c868 <__udivsi3+0x38>
    c880:	f800283a 	ret
    c884:	0005883a 	mov	r2,zero
    c888:	f800283a 	ret
    c88c:	00c00044 	movi	r3,1
    c890:	003ff406 	br	c864 <__udivsi3+0x34>

0000c894 <__umodsi3>:
    c894:	2005883a 	mov	r2,r4
    c898:	2900122e 	bgeu	r5,r4,c8e4 <__umodsi3+0x50>
    c89c:	28001116 	blt	r5,zero,c8e4 <__umodsi3+0x50>
    c8a0:	01800804 	movi	r6,32
    c8a4:	00c00044 	movi	r3,1
    c8a8:	00000206 	br	c8b4 <__umodsi3+0x20>
    c8ac:	30000c26 	beq	r6,zero,c8e0 <__umodsi3+0x4c>
    c8b0:	28000516 	blt	r5,zero,c8c8 <__umodsi3+0x34>
    c8b4:	294b883a 	add	r5,r5,r5
    c8b8:	31bfffc4 	addi	r6,r6,-1
    c8bc:	18c7883a 	add	r3,r3,r3
    c8c0:	293ffa36 	bltu	r5,r4,c8ac <__umodsi3+0x18>
    c8c4:	18000626 	beq	r3,zero,c8e0 <__umodsi3+0x4c>
    c8c8:	1806d07a 	srli	r3,r3,1
    c8cc:	11400136 	bltu	r2,r5,c8d4 <__umodsi3+0x40>
    c8d0:	1145c83a 	sub	r2,r2,r5
    c8d4:	280ad07a 	srli	r5,r5,1
    c8d8:	183ffb1e 	bne	r3,zero,c8c8 <__umodsi3+0x34>
    c8dc:	f800283a 	ret
    c8e0:	f800283a 	ret
    c8e4:	00c00044 	movi	r3,1
    c8e8:	003ff706 	br	c8c8 <__umodsi3+0x34>

0000c8ec <__mulsi3>:
    c8ec:	0005883a 	mov	r2,zero
    c8f0:	20000726 	beq	r4,zero,c910 <__mulsi3+0x24>
    c8f4:	20c0004c 	andi	r3,r4,1
    c8f8:	2008d07a 	srli	r4,r4,1
    c8fc:	18000126 	beq	r3,zero,c904 <__mulsi3+0x18>
    c900:	1145883a 	add	r2,r2,r5
    c904:	294b883a 	add	r5,r5,r5
    c908:	203ffa1e 	bne	r4,zero,c8f4 <__mulsi3+0x8>
    c90c:	f800283a 	ret
    c910:	f800283a 	ret

0000c914 <__adddf3>:
    c914:	02c00434 	movhi	r11,16
    c918:	5affffc4 	addi	r11,r11,-1
    c91c:	2806d7fa 	srli	r3,r5,31
    c920:	2ad4703a 	and	r10,r5,r11
    c924:	3ad2703a 	and	r9,r7,r11
    c928:	3804d53a 	srli	r2,r7,20
    c92c:	3018d77a 	srli	r12,r6,29
    c930:	280ad53a 	srli	r5,r5,20
    c934:	501490fa 	slli	r10,r10,3
    c938:	2010d77a 	srli	r8,r4,29
    c93c:	481290fa 	slli	r9,r9,3
    c940:	380ed7fa 	srli	r7,r7,31
    c944:	defffb04 	addi	sp,sp,-20
    c948:	dc800215 	stw	r18,8(sp)
    c94c:	dc400115 	stw	r17,4(sp)
    c950:	dc000015 	stw	r16,0(sp)
    c954:	dfc00415 	stw	ra,16(sp)
    c958:	dcc00315 	stw	r19,12(sp)
    c95c:	1c803fcc 	andi	r18,r3,255
    c960:	2c01ffcc 	andi	r16,r5,2047
    c964:	5210b03a 	or	r8,r10,r8
    c968:	202290fa 	slli	r17,r4,3
    c96c:	1081ffcc 	andi	r2,r2,2047
    c970:	4b12b03a 	or	r9,r9,r12
    c974:	300c90fa 	slli	r6,r6,3
    c978:	91c07526 	beq	r18,r7,cb50 <__adddf3+0x23c>
    c97c:	8087c83a 	sub	r3,r16,r2
    c980:	00c0ab0e 	bge	zero,r3,cc30 <__adddf3+0x31c>
    c984:	10002a1e 	bne	r2,zero,ca30 <__adddf3+0x11c>
    c988:	4984b03a 	or	r2,r9,r6
    c98c:	1000961e 	bne	r2,zero,cbe8 <__adddf3+0x2d4>
    c990:	888001cc 	andi	r2,r17,7
    c994:	10000726 	beq	r2,zero,c9b4 <__adddf3+0xa0>
    c998:	888003cc 	andi	r2,r17,15
    c99c:	00c00104 	movi	r3,4
    c9a0:	10c00426 	beq	r2,r3,c9b4 <__adddf3+0xa0>
    c9a4:	88c7883a 	add	r3,r17,r3
    c9a8:	1c63803a 	cmpltu	r17,r3,r17
    c9ac:	4451883a 	add	r8,r8,r17
    c9b0:	1823883a 	mov	r17,r3
    c9b4:	4080202c 	andhi	r2,r8,128
    c9b8:	10005926 	beq	r2,zero,cb20 <__adddf3+0x20c>
    c9bc:	84000044 	addi	r16,r16,1
    c9c0:	0081ffc4 	movi	r2,2047
    c9c4:	8080ba26 	beq	r16,r2,ccb0 <__adddf3+0x39c>
    c9c8:	00bfe034 	movhi	r2,65408
    c9cc:	10bfffc4 	addi	r2,r2,-1
    c9d0:	4090703a 	and	r8,r8,r2
    c9d4:	4004977a 	slli	r2,r8,29
    c9d8:	4010927a 	slli	r8,r8,9
    c9dc:	8822d0fa 	srli	r17,r17,3
    c9e0:	8401ffcc 	andi	r16,r16,2047
    c9e4:	4010d33a 	srli	r8,r8,12
    c9e8:	9007883a 	mov	r3,r18
    c9ec:	1444b03a 	or	r2,r2,r17
    c9f0:	8401ffcc 	andi	r16,r16,2047
    c9f4:	8020953a 	slli	r16,r16,20
    c9f8:	18c03fcc 	andi	r3,r3,255
    c9fc:	01000434 	movhi	r4,16
    ca00:	213fffc4 	addi	r4,r4,-1
    ca04:	180697fa 	slli	r3,r3,31
    ca08:	4110703a 	and	r8,r8,r4
    ca0c:	4410b03a 	or	r8,r8,r16
    ca10:	40c6b03a 	or	r3,r8,r3
    ca14:	dfc00417 	ldw	ra,16(sp)
    ca18:	dcc00317 	ldw	r19,12(sp)
    ca1c:	dc800217 	ldw	r18,8(sp)
    ca20:	dc400117 	ldw	r17,4(sp)
    ca24:	dc000017 	ldw	r16,0(sp)
    ca28:	dec00504 	addi	sp,sp,20
    ca2c:	f800283a 	ret
    ca30:	0081ffc4 	movi	r2,2047
    ca34:	80bfd626 	beq	r16,r2,c990 <__adddf3+0x7c>
    ca38:	4a402034 	orhi	r9,r9,128
    ca3c:	00800e04 	movi	r2,56
    ca40:	10c09f16 	blt	r2,r3,ccc0 <__adddf3+0x3ac>
    ca44:	008007c4 	movi	r2,31
    ca48:	10c0c216 	blt	r2,r3,cd54 <__adddf3+0x440>
    ca4c:	00800804 	movi	r2,32
    ca50:	10c5c83a 	sub	r2,r2,r3
    ca54:	488a983a 	sll	r5,r9,r2
    ca58:	30c8d83a 	srl	r4,r6,r3
    ca5c:	3084983a 	sll	r2,r6,r2
    ca60:	48c6d83a 	srl	r3,r9,r3
    ca64:	290cb03a 	or	r6,r5,r4
    ca68:	1004c03a 	cmpne	r2,r2,zero
    ca6c:	308cb03a 	or	r6,r6,r2
    ca70:	898dc83a 	sub	r6,r17,r6
    ca74:	89a3803a 	cmpltu	r17,r17,r6
    ca78:	40d1c83a 	sub	r8,r8,r3
    ca7c:	4451c83a 	sub	r8,r8,r17
    ca80:	3023883a 	mov	r17,r6
    ca84:	4080202c 	andhi	r2,r8,128
    ca88:	10002326 	beq	r2,zero,cb18 <__adddf3+0x204>
    ca8c:	04c02034 	movhi	r19,128
    ca90:	9cffffc4 	addi	r19,r19,-1
    ca94:	44e6703a 	and	r19,r8,r19
    ca98:	98007626 	beq	r19,zero,cc74 <__adddf3+0x360>
    ca9c:	9809883a 	mov	r4,r19
    caa0:	000f1540 	call	f154 <__clzsi2>
    caa4:	10fffe04 	addi	r3,r2,-8
    caa8:	010007c4 	movi	r4,31
    caac:	20c07716 	blt	r4,r3,cc8c <__adddf3+0x378>
    cab0:	00800804 	movi	r2,32
    cab4:	10c5c83a 	sub	r2,r2,r3
    cab8:	8884d83a 	srl	r2,r17,r2
    cabc:	98d0983a 	sll	r8,r19,r3
    cac0:	88e2983a 	sll	r17,r17,r3
    cac4:	1204b03a 	or	r2,r2,r8
    cac8:	1c007416 	blt	r3,r16,cc9c <__adddf3+0x388>
    cacc:	1c21c83a 	sub	r16,r3,r16
    cad0:	82000044 	addi	r8,r16,1
    cad4:	00c007c4 	movi	r3,31
    cad8:	1a009116 	blt	r3,r8,cd20 <__adddf3+0x40c>
    cadc:	00c00804 	movi	r3,32
    cae0:	1a07c83a 	sub	r3,r3,r8
    cae4:	8a08d83a 	srl	r4,r17,r8
    cae8:	88e2983a 	sll	r17,r17,r3
    caec:	10c6983a 	sll	r3,r2,r3
    caf0:	1210d83a 	srl	r8,r2,r8
    caf4:	8804c03a 	cmpne	r2,r17,zero
    caf8:	1906b03a 	or	r3,r3,r4
    cafc:	18a2b03a 	or	r17,r3,r2
    cb00:	0021883a 	mov	r16,zero
    cb04:	003fa206 	br	c990 <__adddf3+0x7c>
    cb08:	1890b03a 	or	r8,r3,r2
    cb0c:	40017d26 	beq	r8,zero,d104 <__adddf3+0x7f0>
    cb10:	1011883a 	mov	r8,r2
    cb14:	1823883a 	mov	r17,r3
    cb18:	888001cc 	andi	r2,r17,7
    cb1c:	103f9e1e 	bne	r2,zero,c998 <__adddf3+0x84>
    cb20:	4004977a 	slli	r2,r8,29
    cb24:	8822d0fa 	srli	r17,r17,3
    cb28:	4010d0fa 	srli	r8,r8,3
    cb2c:	9007883a 	mov	r3,r18
    cb30:	1444b03a 	or	r2,r2,r17
    cb34:	0101ffc4 	movi	r4,2047
    cb38:	81002426 	beq	r16,r4,cbcc <__adddf3+0x2b8>
    cb3c:	8120703a 	and	r16,r16,r4
    cb40:	01000434 	movhi	r4,16
    cb44:	213fffc4 	addi	r4,r4,-1
    cb48:	4110703a 	and	r8,r8,r4
    cb4c:	003fa806 	br	c9f0 <__adddf3+0xdc>
    cb50:	8089c83a 	sub	r4,r16,r2
    cb54:	01005e0e 	bge	zero,r4,ccd0 <__adddf3+0x3bc>
    cb58:	10002b26 	beq	r2,zero,cc08 <__adddf3+0x2f4>
    cb5c:	0081ffc4 	movi	r2,2047
    cb60:	80bf8b26 	beq	r16,r2,c990 <__adddf3+0x7c>
    cb64:	4a402034 	orhi	r9,r9,128
    cb68:	00800e04 	movi	r2,56
    cb6c:	1100a40e 	bge	r2,r4,ce00 <__adddf3+0x4ec>
    cb70:	498cb03a 	or	r6,r9,r6
    cb74:	300ac03a 	cmpne	r5,r6,zero
    cb78:	0013883a 	mov	r9,zero
    cb7c:	2c4b883a 	add	r5,r5,r17
    cb80:	2c63803a 	cmpltu	r17,r5,r17
    cb84:	4a11883a 	add	r8,r9,r8
    cb88:	8a11883a 	add	r8,r17,r8
    cb8c:	2823883a 	mov	r17,r5
    cb90:	4080202c 	andhi	r2,r8,128
    cb94:	103fe026 	beq	r2,zero,cb18 <__adddf3+0x204>
    cb98:	84000044 	addi	r16,r16,1
    cb9c:	0081ffc4 	movi	r2,2047
    cba0:	8080d226 	beq	r16,r2,ceec <__adddf3+0x5d8>
    cba4:	00bfe034 	movhi	r2,65408
    cba8:	10bfffc4 	addi	r2,r2,-1
    cbac:	4090703a 	and	r8,r8,r2
    cbb0:	880ad07a 	srli	r5,r17,1
    cbb4:	400897fa 	slli	r4,r8,31
    cbb8:	88c0004c 	andi	r3,r17,1
    cbbc:	28e2b03a 	or	r17,r5,r3
    cbc0:	4010d07a 	srli	r8,r8,1
    cbc4:	2462b03a 	or	r17,r4,r17
    cbc8:	003f7106 	br	c990 <__adddf3+0x7c>
    cbcc:	4088b03a 	or	r4,r8,r2
    cbd0:	20014526 	beq	r4,zero,d0e8 <__adddf3+0x7d4>
    cbd4:	01000434 	movhi	r4,16
    cbd8:	42000234 	orhi	r8,r8,8
    cbdc:	213fffc4 	addi	r4,r4,-1
    cbe0:	4110703a 	and	r8,r8,r4
    cbe4:	003f8206 	br	c9f0 <__adddf3+0xdc>
    cbe8:	18ffffc4 	addi	r3,r3,-1
    cbec:	1800491e 	bne	r3,zero,cd14 <__adddf3+0x400>
    cbf0:	898bc83a 	sub	r5,r17,r6
    cbf4:	8963803a 	cmpltu	r17,r17,r5
    cbf8:	4251c83a 	sub	r8,r8,r9
    cbfc:	4451c83a 	sub	r8,r8,r17
    cc00:	2823883a 	mov	r17,r5
    cc04:	003f9f06 	br	ca84 <__adddf3+0x170>
    cc08:	4984b03a 	or	r2,r9,r6
    cc0c:	103f6026 	beq	r2,zero,c990 <__adddf3+0x7c>
    cc10:	213fffc4 	addi	r4,r4,-1
    cc14:	2000931e 	bne	r4,zero,ce64 <__adddf3+0x550>
    cc18:	898d883a 	add	r6,r17,r6
    cc1c:	3463803a 	cmpltu	r17,r6,r17
    cc20:	4251883a 	add	r8,r8,r9
    cc24:	8a11883a 	add	r8,r17,r8
    cc28:	3023883a 	mov	r17,r6
    cc2c:	003fd806 	br	cb90 <__adddf3+0x27c>
    cc30:	1800541e 	bne	r3,zero,cd84 <__adddf3+0x470>
    cc34:	80800044 	addi	r2,r16,1
    cc38:	1081ffcc 	andi	r2,r2,2047
    cc3c:	00c00044 	movi	r3,1
    cc40:	1880a00e 	bge	r3,r2,cec4 <__adddf3+0x5b0>
    cc44:	8989c83a 	sub	r4,r17,r6
    cc48:	8905803a 	cmpltu	r2,r17,r4
    cc4c:	4267c83a 	sub	r19,r8,r9
    cc50:	98a7c83a 	sub	r19,r19,r2
    cc54:	9880202c 	andhi	r2,r19,128
    cc58:	10006326 	beq	r2,zero,cde8 <__adddf3+0x4d4>
    cc5c:	3463c83a 	sub	r17,r6,r17
    cc60:	4a07c83a 	sub	r3,r9,r8
    cc64:	344d803a 	cmpltu	r6,r6,r17
    cc68:	19a7c83a 	sub	r19,r3,r6
    cc6c:	3825883a 	mov	r18,r7
    cc70:	983f8a1e 	bne	r19,zero,ca9c <__adddf3+0x188>
    cc74:	8809883a 	mov	r4,r17
    cc78:	000f1540 	call	f154 <__clzsi2>
    cc7c:	10800804 	addi	r2,r2,32
    cc80:	10fffe04 	addi	r3,r2,-8
    cc84:	010007c4 	movi	r4,31
    cc88:	20ff890e 	bge	r4,r3,cab0 <__adddf3+0x19c>
    cc8c:	10bff604 	addi	r2,r2,-40
    cc90:	8884983a 	sll	r2,r17,r2
    cc94:	0023883a 	mov	r17,zero
    cc98:	1c3f8c0e 	bge	r3,r16,cacc <__adddf3+0x1b8>
    cc9c:	023fe034 	movhi	r8,65408
    cca0:	423fffc4 	addi	r8,r8,-1
    cca4:	80e1c83a 	sub	r16,r16,r3
    cca8:	1210703a 	and	r8,r2,r8
    ccac:	003f3806 	br	c990 <__adddf3+0x7c>
    ccb0:	9007883a 	mov	r3,r18
    ccb4:	0011883a 	mov	r8,zero
    ccb8:	0005883a 	mov	r2,zero
    ccbc:	003f4c06 	br	c9f0 <__adddf3+0xdc>
    ccc0:	498cb03a 	or	r6,r9,r6
    ccc4:	300cc03a 	cmpne	r6,r6,zero
    ccc8:	0007883a 	mov	r3,zero
    cccc:	003f6806 	br	ca70 <__adddf3+0x15c>
    ccd0:	20009c1e 	bne	r4,zero,cf44 <__adddf3+0x630>
    ccd4:	80800044 	addi	r2,r16,1
    ccd8:	1141ffcc 	andi	r5,r2,2047
    ccdc:	01000044 	movi	r4,1
    cce0:	2140670e 	bge	r4,r5,ce80 <__adddf3+0x56c>
    cce4:	0101ffc4 	movi	r4,2047
    cce8:	11007f26 	beq	r2,r4,cee8 <__adddf3+0x5d4>
    ccec:	898d883a 	add	r6,r17,r6
    ccf0:	4247883a 	add	r3,r8,r9
    ccf4:	3451803a 	cmpltu	r8,r6,r17
    ccf8:	40d1883a 	add	r8,r8,r3
    ccfc:	402297fa 	slli	r17,r8,31
    cd00:	300cd07a 	srli	r6,r6,1
    cd04:	4010d07a 	srli	r8,r8,1
    cd08:	1021883a 	mov	r16,r2
    cd0c:	89a2b03a 	or	r17,r17,r6
    cd10:	003f1f06 	br	c990 <__adddf3+0x7c>
    cd14:	0081ffc4 	movi	r2,2047
    cd18:	80bf481e 	bne	r16,r2,ca3c <__adddf3+0x128>
    cd1c:	003f1c06 	br	c990 <__adddf3+0x7c>
    cd20:	843ff844 	addi	r16,r16,-31
    cd24:	01000804 	movi	r4,32
    cd28:	1406d83a 	srl	r3,r2,r16
    cd2c:	41005026 	beq	r8,r4,ce70 <__adddf3+0x55c>
    cd30:	01001004 	movi	r4,64
    cd34:	2211c83a 	sub	r8,r4,r8
    cd38:	1204983a 	sll	r2,r2,r8
    cd3c:	88a2b03a 	or	r17,r17,r2
    cd40:	8822c03a 	cmpne	r17,r17,zero
    cd44:	1c62b03a 	or	r17,r3,r17
    cd48:	0011883a 	mov	r8,zero
    cd4c:	0021883a 	mov	r16,zero
    cd50:	003f7106 	br	cb18 <__adddf3+0x204>
    cd54:	193ff804 	addi	r4,r3,-32
    cd58:	00800804 	movi	r2,32
    cd5c:	4908d83a 	srl	r4,r9,r4
    cd60:	18804526 	beq	r3,r2,ce78 <__adddf3+0x564>
    cd64:	00801004 	movi	r2,64
    cd68:	10c5c83a 	sub	r2,r2,r3
    cd6c:	4886983a 	sll	r3,r9,r2
    cd70:	198cb03a 	or	r6,r3,r6
    cd74:	300cc03a 	cmpne	r6,r6,zero
    cd78:	218cb03a 	or	r6,r4,r6
    cd7c:	0007883a 	mov	r3,zero
    cd80:	003f3b06 	br	ca70 <__adddf3+0x15c>
    cd84:	80002a26 	beq	r16,zero,ce30 <__adddf3+0x51c>
    cd88:	0101ffc4 	movi	r4,2047
    cd8c:	11006826 	beq	r2,r4,cf30 <__adddf3+0x61c>
    cd90:	00c7c83a 	sub	r3,zero,r3
    cd94:	42002034 	orhi	r8,r8,128
    cd98:	01000e04 	movi	r4,56
    cd9c:	20c07c16 	blt	r4,r3,cf90 <__adddf3+0x67c>
    cda0:	010007c4 	movi	r4,31
    cda4:	20c0da16 	blt	r4,r3,d110 <__adddf3+0x7fc>
    cda8:	01000804 	movi	r4,32
    cdac:	20c9c83a 	sub	r4,r4,r3
    cdb0:	4114983a 	sll	r10,r8,r4
    cdb4:	88cad83a 	srl	r5,r17,r3
    cdb8:	8908983a 	sll	r4,r17,r4
    cdbc:	40c6d83a 	srl	r3,r8,r3
    cdc0:	5162b03a 	or	r17,r10,r5
    cdc4:	2008c03a 	cmpne	r4,r4,zero
    cdc8:	8922b03a 	or	r17,r17,r4
    cdcc:	3463c83a 	sub	r17,r6,r17
    cdd0:	48c7c83a 	sub	r3,r9,r3
    cdd4:	344d803a 	cmpltu	r6,r6,r17
    cdd8:	1991c83a 	sub	r8,r3,r6
    cddc:	1021883a 	mov	r16,r2
    cde0:	3825883a 	mov	r18,r7
    cde4:	003f2706 	br	ca84 <__adddf3+0x170>
    cde8:	24d0b03a 	or	r8,r4,r19
    cdec:	40001b1e 	bne	r8,zero,ce5c <__adddf3+0x548>
    cdf0:	0005883a 	mov	r2,zero
    cdf4:	0007883a 	mov	r3,zero
    cdf8:	0021883a 	mov	r16,zero
    cdfc:	003f4d06 	br	cb34 <__adddf3+0x220>
    ce00:	008007c4 	movi	r2,31
    ce04:	11003c16 	blt	r2,r4,cef8 <__adddf3+0x5e4>
    ce08:	00800804 	movi	r2,32
    ce0c:	1105c83a 	sub	r2,r2,r4
    ce10:	488e983a 	sll	r7,r9,r2
    ce14:	310ad83a 	srl	r5,r6,r4
    ce18:	3084983a 	sll	r2,r6,r2
    ce1c:	4912d83a 	srl	r9,r9,r4
    ce20:	394ab03a 	or	r5,r7,r5
    ce24:	1004c03a 	cmpne	r2,r2,zero
    ce28:	288ab03a 	or	r5,r5,r2
    ce2c:	003f5306 	br	cb7c <__adddf3+0x268>
    ce30:	4448b03a 	or	r4,r8,r17
    ce34:	20003e26 	beq	r4,zero,cf30 <__adddf3+0x61c>
    ce38:	00c6303a 	nor	r3,zero,r3
    ce3c:	18003a1e 	bne	r3,zero,cf28 <__adddf3+0x614>
    ce40:	3463c83a 	sub	r17,r6,r17
    ce44:	4a07c83a 	sub	r3,r9,r8
    ce48:	344d803a 	cmpltu	r6,r6,r17
    ce4c:	1991c83a 	sub	r8,r3,r6
    ce50:	1021883a 	mov	r16,r2
    ce54:	3825883a 	mov	r18,r7
    ce58:	003f0a06 	br	ca84 <__adddf3+0x170>
    ce5c:	2023883a 	mov	r17,r4
    ce60:	003f0d06 	br	ca98 <__adddf3+0x184>
    ce64:	0081ffc4 	movi	r2,2047
    ce68:	80bf3f1e 	bne	r16,r2,cb68 <__adddf3+0x254>
    ce6c:	003ec806 	br	c990 <__adddf3+0x7c>
    ce70:	0005883a 	mov	r2,zero
    ce74:	003fb106 	br	cd3c <__adddf3+0x428>
    ce78:	0007883a 	mov	r3,zero
    ce7c:	003fbc06 	br	cd70 <__adddf3+0x45c>
    ce80:	4444b03a 	or	r2,r8,r17
    ce84:	8000871e 	bne	r16,zero,d0a4 <__adddf3+0x790>
    ce88:	1000ba26 	beq	r2,zero,d174 <__adddf3+0x860>
    ce8c:	4984b03a 	or	r2,r9,r6
    ce90:	103ebf26 	beq	r2,zero,c990 <__adddf3+0x7c>
    ce94:	8985883a 	add	r2,r17,r6
    ce98:	4247883a 	add	r3,r8,r9
    ce9c:	1451803a 	cmpltu	r8,r2,r17
    cea0:	40d1883a 	add	r8,r8,r3
    cea4:	40c0202c 	andhi	r3,r8,128
    cea8:	1023883a 	mov	r17,r2
    ceac:	183f1a26 	beq	r3,zero,cb18 <__adddf3+0x204>
    ceb0:	00bfe034 	movhi	r2,65408
    ceb4:	10bfffc4 	addi	r2,r2,-1
    ceb8:	2021883a 	mov	r16,r4
    cebc:	4090703a 	and	r8,r8,r2
    cec0:	003eb306 	br	c990 <__adddf3+0x7c>
    cec4:	4444b03a 	or	r2,r8,r17
    cec8:	8000291e 	bne	r16,zero,cf70 <__adddf3+0x65c>
    cecc:	10004b1e 	bne	r2,zero,cffc <__adddf3+0x6e8>
    ced0:	4990b03a 	or	r8,r9,r6
    ced4:	40008b26 	beq	r8,zero,d104 <__adddf3+0x7f0>
    ced8:	4811883a 	mov	r8,r9
    cedc:	3023883a 	mov	r17,r6
    cee0:	3825883a 	mov	r18,r7
    cee4:	003eaa06 	br	c990 <__adddf3+0x7c>
    cee8:	1021883a 	mov	r16,r2
    ceec:	0011883a 	mov	r8,zero
    cef0:	0005883a 	mov	r2,zero
    cef4:	003f0f06 	br	cb34 <__adddf3+0x220>
    cef8:	217ff804 	addi	r5,r4,-32
    cefc:	00800804 	movi	r2,32
    cf00:	494ad83a 	srl	r5,r9,r5
    cf04:	20807d26 	beq	r4,r2,d0fc <__adddf3+0x7e8>
    cf08:	00801004 	movi	r2,64
    cf0c:	1109c83a 	sub	r4,r2,r4
    cf10:	4912983a 	sll	r9,r9,r4
    cf14:	498cb03a 	or	r6,r9,r6
    cf18:	300cc03a 	cmpne	r6,r6,zero
    cf1c:	298ab03a 	or	r5,r5,r6
    cf20:	0013883a 	mov	r9,zero
    cf24:	003f1506 	br	cb7c <__adddf3+0x268>
    cf28:	0101ffc4 	movi	r4,2047
    cf2c:	113f9a1e 	bne	r2,r4,cd98 <__adddf3+0x484>
    cf30:	4811883a 	mov	r8,r9
    cf34:	3023883a 	mov	r17,r6
    cf38:	1021883a 	mov	r16,r2
    cf3c:	3825883a 	mov	r18,r7
    cf40:	003e9306 	br	c990 <__adddf3+0x7c>
    cf44:	8000161e 	bne	r16,zero,cfa0 <__adddf3+0x68c>
    cf48:	444ab03a 	or	r5,r8,r17
    cf4c:	28005126 	beq	r5,zero,d094 <__adddf3+0x780>
    cf50:	0108303a 	nor	r4,zero,r4
    cf54:	20004d1e 	bne	r4,zero,d08c <__adddf3+0x778>
    cf58:	89a3883a 	add	r17,r17,r6
    cf5c:	4253883a 	add	r9,r8,r9
    cf60:	898d803a 	cmpltu	r6,r17,r6
    cf64:	3251883a 	add	r8,r6,r9
    cf68:	1021883a 	mov	r16,r2
    cf6c:	003f0806 	br	cb90 <__adddf3+0x27c>
    cf70:	1000301e 	bne	r2,zero,d034 <__adddf3+0x720>
    cf74:	4984b03a 	or	r2,r9,r6
    cf78:	10007126 	beq	r2,zero,d140 <__adddf3+0x82c>
    cf7c:	4811883a 	mov	r8,r9
    cf80:	3023883a 	mov	r17,r6
    cf84:	3825883a 	mov	r18,r7
    cf88:	0401ffc4 	movi	r16,2047
    cf8c:	003e8006 	br	c990 <__adddf3+0x7c>
    cf90:	4462b03a 	or	r17,r8,r17
    cf94:	8822c03a 	cmpne	r17,r17,zero
    cf98:	0007883a 	mov	r3,zero
    cf9c:	003f8b06 	br	cdcc <__adddf3+0x4b8>
    cfa0:	0141ffc4 	movi	r5,2047
    cfa4:	11403b26 	beq	r2,r5,d094 <__adddf3+0x780>
    cfa8:	0109c83a 	sub	r4,zero,r4
    cfac:	42002034 	orhi	r8,r8,128
    cfb0:	01400e04 	movi	r5,56
    cfb4:	29006716 	blt	r5,r4,d154 <__adddf3+0x840>
    cfb8:	014007c4 	movi	r5,31
    cfbc:	29007016 	blt	r5,r4,d180 <__adddf3+0x86c>
    cfc0:	01400804 	movi	r5,32
    cfc4:	290bc83a 	sub	r5,r5,r4
    cfc8:	4154983a 	sll	r10,r8,r5
    cfcc:	890ed83a 	srl	r7,r17,r4
    cfd0:	894a983a 	sll	r5,r17,r5
    cfd4:	4108d83a 	srl	r4,r8,r4
    cfd8:	51e2b03a 	or	r17,r10,r7
    cfdc:	280ac03a 	cmpne	r5,r5,zero
    cfe0:	8962b03a 	or	r17,r17,r5
    cfe4:	89a3883a 	add	r17,r17,r6
    cfe8:	2253883a 	add	r9,r4,r9
    cfec:	898d803a 	cmpltu	r6,r17,r6
    cff0:	3251883a 	add	r8,r6,r9
    cff4:	1021883a 	mov	r16,r2
    cff8:	003ee506 	br	cb90 <__adddf3+0x27c>
    cffc:	4984b03a 	or	r2,r9,r6
    d000:	103e6326 	beq	r2,zero,c990 <__adddf3+0x7c>
    d004:	8987c83a 	sub	r3,r17,r6
    d008:	88c9803a 	cmpltu	r4,r17,r3
    d00c:	4245c83a 	sub	r2,r8,r9
    d010:	1105c83a 	sub	r2,r2,r4
    d014:	1100202c 	andhi	r4,r2,128
    d018:	203ebb26 	beq	r4,zero,cb08 <__adddf3+0x1f4>
    d01c:	3463c83a 	sub	r17,r6,r17
    d020:	4a07c83a 	sub	r3,r9,r8
    d024:	344d803a 	cmpltu	r6,r6,r17
    d028:	1991c83a 	sub	r8,r3,r6
    d02c:	3825883a 	mov	r18,r7
    d030:	003e5706 	br	c990 <__adddf3+0x7c>
    d034:	4984b03a 	or	r2,r9,r6
    d038:	10002e26 	beq	r2,zero,d0f4 <__adddf3+0x7e0>
    d03c:	4004d0fa 	srli	r2,r8,3
    d040:	8822d0fa 	srli	r17,r17,3
    d044:	4010977a 	slli	r8,r8,29
    d048:	10c0022c 	andhi	r3,r2,8
    d04c:	4462b03a 	or	r17,r8,r17
    d050:	18000826 	beq	r3,zero,d074 <__adddf3+0x760>
    d054:	4808d0fa 	srli	r4,r9,3
    d058:	20c0022c 	andhi	r3,r4,8
    d05c:	1800051e 	bne	r3,zero,d074 <__adddf3+0x760>
    d060:	300cd0fa 	srli	r6,r6,3
    d064:	4806977a 	slli	r3,r9,29
    d068:	2005883a 	mov	r2,r4
    d06c:	3825883a 	mov	r18,r7
    d070:	19a2b03a 	or	r17,r3,r6
    d074:	8810d77a 	srli	r8,r17,29
    d078:	100490fa 	slli	r2,r2,3
    d07c:	882290fa 	slli	r17,r17,3
    d080:	0401ffc4 	movi	r16,2047
    d084:	4090b03a 	or	r8,r8,r2
    d088:	003e4106 	br	c990 <__adddf3+0x7c>
    d08c:	0141ffc4 	movi	r5,2047
    d090:	117fc71e 	bne	r2,r5,cfb0 <__adddf3+0x69c>
    d094:	4811883a 	mov	r8,r9
    d098:	3023883a 	mov	r17,r6
    d09c:	1021883a 	mov	r16,r2
    d0a0:	003e3b06 	br	c990 <__adddf3+0x7c>
    d0a4:	10002f26 	beq	r2,zero,d164 <__adddf3+0x850>
    d0a8:	4984b03a 	or	r2,r9,r6
    d0ac:	10001126 	beq	r2,zero,d0f4 <__adddf3+0x7e0>
    d0b0:	4004d0fa 	srli	r2,r8,3
    d0b4:	8822d0fa 	srli	r17,r17,3
    d0b8:	4010977a 	slli	r8,r8,29
    d0bc:	10c0022c 	andhi	r3,r2,8
    d0c0:	4462b03a 	or	r17,r8,r17
    d0c4:	183feb26 	beq	r3,zero,d074 <__adddf3+0x760>
    d0c8:	4808d0fa 	srli	r4,r9,3
    d0cc:	20c0022c 	andhi	r3,r4,8
    d0d0:	183fe81e 	bne	r3,zero,d074 <__adddf3+0x760>
    d0d4:	300cd0fa 	srli	r6,r6,3
    d0d8:	4806977a 	slli	r3,r9,29
    d0dc:	2005883a 	mov	r2,r4
    d0e0:	19a2b03a 	or	r17,r3,r6
    d0e4:	003fe306 	br	d074 <__adddf3+0x760>
    d0e8:	0011883a 	mov	r8,zero
    d0ec:	0005883a 	mov	r2,zero
    d0f0:	003e3f06 	br	c9f0 <__adddf3+0xdc>
    d0f4:	0401ffc4 	movi	r16,2047
    d0f8:	003e2506 	br	c990 <__adddf3+0x7c>
    d0fc:	0013883a 	mov	r9,zero
    d100:	003f8406 	br	cf14 <__adddf3+0x600>
    d104:	0005883a 	mov	r2,zero
    d108:	0007883a 	mov	r3,zero
    d10c:	003e8906 	br	cb34 <__adddf3+0x220>
    d110:	197ff804 	addi	r5,r3,-32
    d114:	01000804 	movi	r4,32
    d118:	414ad83a 	srl	r5,r8,r5
    d11c:	19002426 	beq	r3,r4,d1b0 <__adddf3+0x89c>
    d120:	01001004 	movi	r4,64
    d124:	20c7c83a 	sub	r3,r4,r3
    d128:	40c6983a 	sll	r3,r8,r3
    d12c:	1c46b03a 	or	r3,r3,r17
    d130:	1806c03a 	cmpne	r3,r3,zero
    d134:	28e2b03a 	or	r17,r5,r3
    d138:	0007883a 	mov	r3,zero
    d13c:	003f2306 	br	cdcc <__adddf3+0x4b8>
    d140:	0007883a 	mov	r3,zero
    d144:	5811883a 	mov	r8,r11
    d148:	00bfffc4 	movi	r2,-1
    d14c:	0401ffc4 	movi	r16,2047
    d150:	003e7806 	br	cb34 <__adddf3+0x220>
    d154:	4462b03a 	or	r17,r8,r17
    d158:	8822c03a 	cmpne	r17,r17,zero
    d15c:	0009883a 	mov	r4,zero
    d160:	003fa006 	br	cfe4 <__adddf3+0x6d0>
    d164:	4811883a 	mov	r8,r9
    d168:	3023883a 	mov	r17,r6
    d16c:	0401ffc4 	movi	r16,2047
    d170:	003e0706 	br	c990 <__adddf3+0x7c>
    d174:	4811883a 	mov	r8,r9
    d178:	3023883a 	mov	r17,r6
    d17c:	003e0406 	br	c990 <__adddf3+0x7c>
    d180:	21fff804 	addi	r7,r4,-32
    d184:	01400804 	movi	r5,32
    d188:	41ced83a 	srl	r7,r8,r7
    d18c:	21400a26 	beq	r4,r5,d1b8 <__adddf3+0x8a4>
    d190:	01401004 	movi	r5,64
    d194:	2909c83a 	sub	r4,r5,r4
    d198:	4108983a 	sll	r4,r8,r4
    d19c:	2448b03a 	or	r4,r4,r17
    d1a0:	2008c03a 	cmpne	r4,r4,zero
    d1a4:	3922b03a 	or	r17,r7,r4
    d1a8:	0009883a 	mov	r4,zero
    d1ac:	003f8d06 	br	cfe4 <__adddf3+0x6d0>
    d1b0:	0007883a 	mov	r3,zero
    d1b4:	003fdd06 	br	d12c <__adddf3+0x818>
    d1b8:	0009883a 	mov	r4,zero
    d1bc:	003ff706 	br	d19c <__adddf3+0x888>

0000d1c0 <__divdf3>:
    d1c0:	defff004 	addi	sp,sp,-64
    d1c4:	dc800815 	stw	r18,32(sp)
    d1c8:	2824d53a 	srli	r18,r5,20
    d1cc:	dd800c15 	stw	r22,48(sp)
    d1d0:	282cd7fa 	srli	r22,r5,31
    d1d4:	dc000615 	stw	r16,24(sp)
    d1d8:	04000434 	movhi	r16,16
    d1dc:	843fffc4 	addi	r16,r16,-1
    d1e0:	dfc00f15 	stw	ra,60(sp)
    d1e4:	df000e15 	stw	fp,56(sp)
    d1e8:	ddc00d15 	stw	r23,52(sp)
    d1ec:	dd400b15 	stw	r21,44(sp)
    d1f0:	dd000a15 	stw	r20,40(sp)
    d1f4:	dcc00915 	stw	r19,36(sp)
    d1f8:	dc400715 	stw	r17,28(sp)
    d1fc:	9481ffcc 	andi	r18,r18,2047
    d200:	2c20703a 	and	r16,r5,r16
    d204:	b2003fcc 	andi	r8,r22,255
    d208:	90006126 	beq	r18,zero,d390 <__divdf3+0x1d0>
    d20c:	0081ffc4 	movi	r2,2047
    d210:	202b883a 	mov	r21,r4
    d214:	90803726 	beq	r18,r2,d2f4 <__divdf3+0x134>
    d218:	80800434 	orhi	r2,r16,16
    d21c:	100490fa 	slli	r2,r2,3
    d220:	2020d77a 	srli	r16,r4,29
    d224:	202a90fa 	slli	r21,r4,3
    d228:	94bf0044 	addi	r18,r18,-1023
    d22c:	80a0b03a 	or	r16,r16,r2
    d230:	0013883a 	mov	r9,zero
    d234:	000b883a 	mov	r5,zero
    d238:	3806d53a 	srli	r3,r7,20
    d23c:	382ed7fa 	srli	r23,r7,31
    d240:	04400434 	movhi	r17,16
    d244:	8c7fffc4 	addi	r17,r17,-1
    d248:	18c1ffcc 	andi	r3,r3,2047
    d24c:	3029883a 	mov	r20,r6
    d250:	3c62703a 	and	r17,r7,r17
    d254:	bf003fcc 	andi	fp,r23,255
    d258:	18006e26 	beq	r3,zero,d414 <__divdf3+0x254>
    d25c:	0081ffc4 	movi	r2,2047
    d260:	18806626 	beq	r3,r2,d3fc <__divdf3+0x23c>
    d264:	88800434 	orhi	r2,r17,16
    d268:	100490fa 	slli	r2,r2,3
    d26c:	3022d77a 	srli	r17,r6,29
    d270:	302890fa 	slli	r20,r6,3
    d274:	18ff0044 	addi	r3,r3,-1023
    d278:	88a2b03a 	or	r17,r17,r2
    d27c:	000f883a 	mov	r7,zero
    d280:	b5e6f03a 	xor	r19,r22,r23
    d284:	3a4cb03a 	or	r6,r7,r9
    d288:	008003c4 	movi	r2,15
    d28c:	9809883a 	mov	r4,r19
    d290:	90c7c83a 	sub	r3,r18,r3
    d294:	9cc03fcc 	andi	r19,r19,255
    d298:	11809636 	bltu	r2,r6,d4f4 <__divdf3+0x334>
    d29c:	300c90ba 	slli	r6,r6,2
    d2a0:	00800074 	movhi	r2,1
    d2a4:	10b4ad04 	addi	r2,r2,-11596
    d2a8:	308d883a 	add	r6,r6,r2
    d2ac:	30800017 	ldw	r2,0(r6)
    d2b0:	1000683a 	jmp	r2
    d2b4:	0000d4f4 	movhi	zero,851
    d2b8:	0000d32c 	andhi	zero,zero,844
    d2bc:	0000d4e4 	muli	zero,zero,851
    d2c0:	0000d320 	cmpeqi	zero,zero,844
    d2c4:	0000d4e4 	muli	zero,zero,851
    d2c8:	0000d4b8 	rdprs	zero,zero,850
    d2cc:	0000d4e4 	muli	zero,zero,851
    d2d0:	0000d320 	cmpeqi	zero,zero,844
    d2d4:	0000d32c 	andhi	zero,zero,844
    d2d8:	0000d32c 	andhi	zero,zero,844
    d2dc:	0000d4b8 	rdprs	zero,zero,850
    d2e0:	0000d320 	cmpeqi	zero,zero,844
    d2e4:	0000d310 	cmplti	zero,zero,844
    d2e8:	0000d310 	cmplti	zero,zero,844
    d2ec:	0000d310 	cmplti	zero,zero,844
    d2f0:	0000d87c 	xorhi	zero,zero,865
    d2f4:	2404b03a 	or	r2,r4,r16
    d2f8:	10006c1e 	bne	r2,zero,d4ac <__divdf3+0x2ec>
    d2fc:	02400204 	movi	r9,8
    d300:	0021883a 	mov	r16,zero
    d304:	002b883a 	mov	r21,zero
    d308:	01400084 	movi	r5,2
    d30c:	003fca06 	br	d238 <__divdf3+0x78>
    d310:	8023883a 	mov	r17,r16
    d314:	a829883a 	mov	r20,r21
    d318:	4039883a 	mov	fp,r8
    d31c:	280f883a 	mov	r7,r5
    d320:	00800084 	movi	r2,2
    d324:	3881601e 	bne	r7,r2,d8a8 <__divdf3+0x6e8>
    d328:	e027883a 	mov	r19,fp
    d32c:	9900004c 	andi	r4,r19,1
    d330:	0081ffc4 	movi	r2,2047
    d334:	0021883a 	mov	r16,zero
    d338:	002b883a 	mov	r21,zero
    d33c:	1004953a 	slli	r2,r2,20
    d340:	20c03fcc 	andi	r3,r4,255
    d344:	01400434 	movhi	r5,16
    d348:	297fffc4 	addi	r5,r5,-1
    d34c:	180697fa 	slli	r3,r3,31
    d350:	8160703a 	and	r16,r16,r5
    d354:	80a0b03a 	or	r16,r16,r2
    d358:	80c6b03a 	or	r3,r16,r3
    d35c:	a805883a 	mov	r2,r21
    d360:	dfc00f17 	ldw	ra,60(sp)
    d364:	df000e17 	ldw	fp,56(sp)
    d368:	ddc00d17 	ldw	r23,52(sp)
    d36c:	dd800c17 	ldw	r22,48(sp)
    d370:	dd400b17 	ldw	r21,44(sp)
    d374:	dd000a17 	ldw	r20,40(sp)
    d378:	dcc00917 	ldw	r19,36(sp)
    d37c:	dc800817 	ldw	r18,32(sp)
    d380:	dc400717 	ldw	r17,28(sp)
    d384:	dc000617 	ldw	r16,24(sp)
    d388:	dec01004 	addi	sp,sp,64
    d38c:	f800283a 	ret
    d390:	2404b03a 	or	r2,r4,r16
    d394:	2023883a 	mov	r17,r4
    d398:	10003f26 	beq	r2,zero,d498 <__divdf3+0x2d8>
    d39c:	80015e26 	beq	r16,zero,d918 <__divdf3+0x758>
    d3a0:	8009883a 	mov	r4,r16
    d3a4:	d9800215 	stw	r6,8(sp)
    d3a8:	d9c00515 	stw	r7,20(sp)
    d3ac:	da000415 	stw	r8,16(sp)
    d3b0:	000f1540 	call	f154 <__clzsi2>
    d3b4:	d9800217 	ldw	r6,8(sp)
    d3b8:	d9c00517 	ldw	r7,20(sp)
    d3bc:	da000417 	ldw	r8,16(sp)
    d3c0:	113ffd44 	addi	r4,r2,-11
    d3c4:	00c00704 	movi	r3,28
    d3c8:	19014f16 	blt	r3,r4,d908 <__divdf3+0x748>
    d3cc:	00c00744 	movi	r3,29
    d3d0:	157ffe04 	addi	r21,r2,-8
    d3d4:	1907c83a 	sub	r3,r3,r4
    d3d8:	8560983a 	sll	r16,r16,r21
    d3dc:	88c6d83a 	srl	r3,r17,r3
    d3e0:	8d6a983a 	sll	r21,r17,r21
    d3e4:	1c20b03a 	or	r16,r3,r16
    d3e8:	1080fcc4 	addi	r2,r2,1011
    d3ec:	00a5c83a 	sub	r18,zero,r2
    d3f0:	0013883a 	mov	r9,zero
    d3f4:	000b883a 	mov	r5,zero
    d3f8:	003f8f06 	br	d238 <__divdf3+0x78>
    d3fc:	3444b03a 	or	r2,r6,r17
    d400:	1000231e 	bne	r2,zero,d490 <__divdf3+0x2d0>
    d404:	0023883a 	mov	r17,zero
    d408:	0029883a 	mov	r20,zero
    d40c:	01c00084 	movi	r7,2
    d410:	003f9b06 	br	d280 <__divdf3+0xc0>
    d414:	3444b03a 	or	r2,r6,r17
    d418:	10001926 	beq	r2,zero,d480 <__divdf3+0x2c0>
    d41c:	88014b26 	beq	r17,zero,d94c <__divdf3+0x78c>
    d420:	8809883a 	mov	r4,r17
    d424:	d9400115 	stw	r5,4(sp)
    d428:	d9800215 	stw	r6,8(sp)
    d42c:	da000415 	stw	r8,16(sp)
    d430:	da400315 	stw	r9,12(sp)
    d434:	000f1540 	call	f154 <__clzsi2>
    d438:	d9400117 	ldw	r5,4(sp)
    d43c:	d9800217 	ldw	r6,8(sp)
    d440:	da000417 	ldw	r8,16(sp)
    d444:	da400317 	ldw	r9,12(sp)
    d448:	113ffd44 	addi	r4,r2,-11
    d44c:	00c00704 	movi	r3,28
    d450:	19013a16 	blt	r3,r4,d93c <__divdf3+0x77c>
    d454:	00c00744 	movi	r3,29
    d458:	153ffe04 	addi	r20,r2,-8
    d45c:	1907c83a 	sub	r3,r3,r4
    d460:	8d22983a 	sll	r17,r17,r20
    d464:	30c6d83a 	srl	r3,r6,r3
    d468:	3528983a 	sll	r20,r6,r20
    d46c:	1c62b03a 	or	r17,r3,r17
    d470:	1080fcc4 	addi	r2,r2,1011
    d474:	0087c83a 	sub	r3,zero,r2
    d478:	000f883a 	mov	r7,zero
    d47c:	003f8006 	br	d280 <__divdf3+0xc0>
    d480:	0023883a 	mov	r17,zero
    d484:	0029883a 	mov	r20,zero
    d488:	01c00044 	movi	r7,1
    d48c:	003f7c06 	br	d280 <__divdf3+0xc0>
    d490:	01c000c4 	movi	r7,3
    d494:	003f7a06 	br	d280 <__divdf3+0xc0>
    d498:	02400104 	movi	r9,4
    d49c:	0021883a 	mov	r16,zero
    d4a0:	002b883a 	mov	r21,zero
    d4a4:	01400044 	movi	r5,1
    d4a8:	003f6306 	br	d238 <__divdf3+0x78>
    d4ac:	02400304 	movi	r9,12
    d4b0:	014000c4 	movi	r5,3
    d4b4:	003f6006 	br	d238 <__divdf3+0x78>
    d4b8:	04000434 	movhi	r16,16
    d4bc:	0009883a 	mov	r4,zero
    d4c0:	843fffc4 	addi	r16,r16,-1
    d4c4:	057fffc4 	movi	r21,-1
    d4c8:	0081ffc4 	movi	r2,2047
    d4cc:	003f9b06 	br	d33c <__divdf3+0x17c>
    d4d0:	00c00044 	movi	r3,1
    d4d4:	1887c83a 	sub	r3,r3,r2
    d4d8:	01000e04 	movi	r4,56
    d4dc:	20c1530e 	bge	r4,r3,da2c <__divdf3+0x86c>
    d4e0:	9900004c 	andi	r4,r19,1
    d4e4:	0005883a 	mov	r2,zero
    d4e8:	0021883a 	mov	r16,zero
    d4ec:	002b883a 	mov	r21,zero
    d4f0:	003f9206 	br	d33c <__divdf3+0x17c>
    d4f4:	8c012e36 	bltu	r17,r16,d9b0 <__divdf3+0x7f0>
    d4f8:	84412c26 	beq	r16,r17,d9ac <__divdf3+0x7ec>
    d4fc:	a82f883a 	mov	r23,r21
    d500:	18ffffc4 	addi	r3,r3,-1
    d504:	002b883a 	mov	r21,zero
    d508:	a004d63a 	srli	r2,r20,24
    d50c:	8822923a 	slli	r17,r17,8
    d510:	a028923a 	slli	r20,r20,8
    d514:	8009883a 	mov	r4,r16
    d518:	88acb03a 	or	r22,r17,r2
    d51c:	dd000015 	stw	r20,0(sp)
    d520:	b028d43a 	srli	r20,r22,16
    d524:	d8c00215 	stw	r3,8(sp)
    d528:	b4bfffcc 	andi	r18,r22,65535
    d52c:	a00b883a 	mov	r5,r20
    d530:	000c8300 	call	c830 <__udivsi3>
    d534:	100b883a 	mov	r5,r2
    d538:	9009883a 	mov	r4,r18
    d53c:	1023883a 	mov	r17,r2
    d540:	000c8ec0 	call	c8ec <__mulsi3>
    d544:	8009883a 	mov	r4,r16
    d548:	a00b883a 	mov	r5,r20
    d54c:	1039883a 	mov	fp,r2
    d550:	000c8940 	call	c894 <__umodsi3>
    d554:	1004943a 	slli	r2,r2,16
    d558:	b808d43a 	srli	r4,r23,16
    d55c:	d8c00217 	ldw	r3,8(sp)
    d560:	2084b03a 	or	r2,r4,r2
    d564:	1700062e 	bgeu	r2,fp,d580 <__divdf3+0x3c0>
    d568:	1585883a 	add	r2,r2,r22
    d56c:	893fffc4 	addi	r4,r17,-1
    d570:	15811d36 	bltu	r2,r22,d9e8 <__divdf3+0x828>
    d574:	17011c2e 	bgeu	r2,fp,d9e8 <__divdf3+0x828>
    d578:	8c7fff84 	addi	r17,r17,-2
    d57c:	1585883a 	add	r2,r2,r22
    d580:	1739c83a 	sub	fp,r2,fp
    d584:	a00b883a 	mov	r5,r20
    d588:	e009883a 	mov	r4,fp
    d58c:	d8c00215 	stw	r3,8(sp)
    d590:	000c8300 	call	c830 <__udivsi3>
    d594:	100b883a 	mov	r5,r2
    d598:	9009883a 	mov	r4,r18
    d59c:	1021883a 	mov	r16,r2
    d5a0:	000c8ec0 	call	c8ec <__mulsi3>
    d5a4:	a00b883a 	mov	r5,r20
    d5a8:	e009883a 	mov	r4,fp
    d5ac:	d8800415 	stw	r2,16(sp)
    d5b0:	000c8940 	call	c894 <__umodsi3>
    d5b4:	1004943a 	slli	r2,r2,16
    d5b8:	da000417 	ldw	r8,16(sp)
    d5bc:	bdffffcc 	andi	r23,r23,65535
    d5c0:	b884b03a 	or	r2,r23,r2
    d5c4:	d8c00217 	ldw	r3,8(sp)
    d5c8:	1200062e 	bgeu	r2,r8,d5e4 <__divdf3+0x424>
    d5cc:	1585883a 	add	r2,r2,r22
    d5d0:	813fffc4 	addi	r4,r16,-1
    d5d4:	15810236 	bltu	r2,r22,d9e0 <__divdf3+0x820>
    d5d8:	1201012e 	bgeu	r2,r8,d9e0 <__divdf3+0x820>
    d5dc:	843fff84 	addi	r16,r16,-2
    d5e0:	1585883a 	add	r2,r2,r22
    d5e4:	8822943a 	slli	r17,r17,16
    d5e8:	d9800017 	ldw	r6,0(sp)
    d5ec:	1211c83a 	sub	r8,r2,r8
    d5f0:	8c22b03a 	or	r17,r17,r16
    d5f4:	373fffcc 	andi	fp,r6,65535
    d5f8:	8abfffcc 	andi	r10,r17,65535
    d5fc:	8820d43a 	srli	r16,r17,16
    d600:	5009883a 	mov	r4,r10
    d604:	e00b883a 	mov	r5,fp
    d608:	302ed43a 	srli	r23,r6,16
    d60c:	d8c00215 	stw	r3,8(sp)
    d610:	da000415 	stw	r8,16(sp)
    d614:	da800115 	stw	r10,4(sp)
    d618:	000c8ec0 	call	c8ec <__mulsi3>
    d61c:	800b883a 	mov	r5,r16
    d620:	e009883a 	mov	r4,fp
    d624:	d8800515 	stw	r2,20(sp)
    d628:	000c8ec0 	call	c8ec <__mulsi3>
    d62c:	8009883a 	mov	r4,r16
    d630:	b80b883a 	mov	r5,r23
    d634:	d8800315 	stw	r2,12(sp)
    d638:	000c8ec0 	call	c8ec <__mulsi3>
    d63c:	da800117 	ldw	r10,4(sp)
    d640:	b80b883a 	mov	r5,r23
    d644:	1021883a 	mov	r16,r2
    d648:	5009883a 	mov	r4,r10
    d64c:	000c8ec0 	call	c8ec <__mulsi3>
    d650:	d9c00517 	ldw	r7,20(sp)
    d654:	da400317 	ldw	r9,12(sp)
    d658:	d8c00217 	ldw	r3,8(sp)
    d65c:	3808d43a 	srli	r4,r7,16
    d660:	1245883a 	add	r2,r2,r9
    d664:	da000417 	ldw	r8,16(sp)
    d668:	2085883a 	add	r2,r4,r2
    d66c:	1240022e 	bgeu	r2,r9,d678 <__divdf3+0x4b8>
    d670:	01000074 	movhi	r4,1
    d674:	8121883a 	add	r16,r16,r4
    d678:	1008d43a 	srli	r4,r2,16
    d67c:	1004943a 	slli	r2,r2,16
    d680:	39ffffcc 	andi	r7,r7,65535
    d684:	2409883a 	add	r4,r4,r16
    d688:	11c5883a 	add	r2,r2,r7
    d68c:	4100bb36 	bltu	r8,r4,d97c <__divdf3+0x7bc>
    d690:	4100d726 	beq	r8,r4,d9f0 <__divdf3+0x830>
    d694:	4109c83a 	sub	r4,r8,r4
    d698:	a8a1c83a 	sub	r16,r21,r2
    d69c:	ac2b803a 	cmpltu	r21,r21,r16
    d6a0:	256bc83a 	sub	r21,r4,r21
    d6a4:	b540d926 	beq	r22,r21,da0c <__divdf3+0x84c>
    d6a8:	a00b883a 	mov	r5,r20
    d6ac:	a809883a 	mov	r4,r21
    d6b0:	d8c00215 	stw	r3,8(sp)
    d6b4:	000c8300 	call	c830 <__udivsi3>
    d6b8:	100b883a 	mov	r5,r2
    d6bc:	9009883a 	mov	r4,r18
    d6c0:	d8800515 	stw	r2,20(sp)
    d6c4:	000c8ec0 	call	c8ec <__mulsi3>
    d6c8:	a809883a 	mov	r4,r21
    d6cc:	a00b883a 	mov	r5,r20
    d6d0:	d8800415 	stw	r2,16(sp)
    d6d4:	000c8940 	call	c894 <__umodsi3>
    d6d8:	1004943a 	slli	r2,r2,16
    d6dc:	8008d43a 	srli	r4,r16,16
    d6e0:	da000417 	ldw	r8,16(sp)
    d6e4:	d8c00217 	ldw	r3,8(sp)
    d6e8:	2084b03a 	or	r2,r4,r2
    d6ec:	d9c00517 	ldw	r7,20(sp)
    d6f0:	1200062e 	bgeu	r2,r8,d70c <__divdf3+0x54c>
    d6f4:	1585883a 	add	r2,r2,r22
    d6f8:	393fffc4 	addi	r4,r7,-1
    d6fc:	1580c536 	bltu	r2,r22,da14 <__divdf3+0x854>
    d700:	1200c42e 	bgeu	r2,r8,da14 <__divdf3+0x854>
    d704:	39ffff84 	addi	r7,r7,-2
    d708:	1585883a 	add	r2,r2,r22
    d70c:	122bc83a 	sub	r21,r2,r8
    d710:	a00b883a 	mov	r5,r20
    d714:	a809883a 	mov	r4,r21
    d718:	d8c00215 	stw	r3,8(sp)
    d71c:	d9c00515 	stw	r7,20(sp)
    d720:	000c8300 	call	c830 <__udivsi3>
    d724:	9009883a 	mov	r4,r18
    d728:	100b883a 	mov	r5,r2
    d72c:	d8800415 	stw	r2,16(sp)
    d730:	000c8ec0 	call	c8ec <__mulsi3>
    d734:	a809883a 	mov	r4,r21
    d738:	a00b883a 	mov	r5,r20
    d73c:	1025883a 	mov	r18,r2
    d740:	000c8940 	call	c894 <__umodsi3>
    d744:	1004943a 	slli	r2,r2,16
    d748:	813fffcc 	andi	r4,r16,65535
    d74c:	d8c00217 	ldw	r3,8(sp)
    d750:	20a0b03a 	or	r16,r4,r2
    d754:	d9c00517 	ldw	r7,20(sp)
    d758:	da000417 	ldw	r8,16(sp)
    d75c:	8480062e 	bgeu	r16,r18,d778 <__divdf3+0x5b8>
    d760:	85a1883a 	add	r16,r16,r22
    d764:	40bfffc4 	addi	r2,r8,-1
    d768:	8580ac36 	bltu	r16,r22,da1c <__divdf3+0x85c>
    d76c:	8480ab2e 	bgeu	r16,r18,da1c <__divdf3+0x85c>
    d770:	423fff84 	addi	r8,r8,-2
    d774:	85a1883a 	add	r16,r16,r22
    d778:	3804943a 	slli	r2,r7,16
    d77c:	84a1c83a 	sub	r16,r16,r18
    d780:	e009883a 	mov	r4,fp
    d784:	1228b03a 	or	r20,r2,r8
    d788:	a1ffffcc 	andi	r7,r20,65535
    d78c:	a024d43a 	srli	r18,r20,16
    d790:	380b883a 	mov	r5,r7
    d794:	d8c00215 	stw	r3,8(sp)
    d798:	d9c00515 	stw	r7,20(sp)
    d79c:	000c8ec0 	call	c8ec <__mulsi3>
    d7a0:	900b883a 	mov	r5,r18
    d7a4:	e009883a 	mov	r4,fp
    d7a8:	102b883a 	mov	r21,r2
    d7ac:	000c8ec0 	call	c8ec <__mulsi3>
    d7b0:	900b883a 	mov	r5,r18
    d7b4:	b809883a 	mov	r4,r23
    d7b8:	1039883a 	mov	fp,r2
    d7bc:	000c8ec0 	call	c8ec <__mulsi3>
    d7c0:	d9c00517 	ldw	r7,20(sp)
    d7c4:	b80b883a 	mov	r5,r23
    d7c8:	1025883a 	mov	r18,r2
    d7cc:	3809883a 	mov	r4,r7
    d7d0:	000c8ec0 	call	c8ec <__mulsi3>
    d7d4:	a808d43a 	srli	r4,r21,16
    d7d8:	1705883a 	add	r2,r2,fp
    d7dc:	d8c00217 	ldw	r3,8(sp)
    d7e0:	2085883a 	add	r2,r4,r2
    d7e4:	1700022e 	bgeu	r2,fp,d7f0 <__divdf3+0x630>
    d7e8:	01000074 	movhi	r4,1
    d7ec:	9125883a 	add	r18,r18,r4
    d7f0:	1008d43a 	srli	r4,r2,16
    d7f4:	1004943a 	slli	r2,r2,16
    d7f8:	ad7fffcc 	andi	r21,r21,65535
    d7fc:	2489883a 	add	r4,r4,r18
    d800:	1545883a 	add	r2,r2,r21
    d804:	81003836 	bltu	r16,r4,d8e8 <__divdf3+0x728>
    d808:	81003626 	beq	r16,r4,d8e4 <__divdf3+0x724>
    d80c:	a5000054 	ori	r20,r20,1
    d810:	1880ffc4 	addi	r2,r3,1023
    d814:	00bf2e0e 	bge	zero,r2,d4d0 <__divdf3+0x310>
    d818:	a10001cc 	andi	r4,r20,7
    d81c:	20000726 	beq	r4,zero,d83c <__divdf3+0x67c>
    d820:	a10003cc 	andi	r4,r20,15
    d824:	01400104 	movi	r5,4
    d828:	21400426 	beq	r4,r5,d83c <__divdf3+0x67c>
    d82c:	a149883a 	add	r4,r20,r5
    d830:	2529803a 	cmpltu	r20,r4,r20
    d834:	8d23883a 	add	r17,r17,r20
    d838:	2029883a 	mov	r20,r4
    d83c:	8900402c 	andhi	r4,r17,256
    d840:	20000426 	beq	r4,zero,d854 <__divdf3+0x694>
    d844:	18810004 	addi	r2,r3,1024
    d848:	00ffc034 	movhi	r3,65280
    d84c:	18ffffc4 	addi	r3,r3,-1
    d850:	88e2703a 	and	r17,r17,r3
    d854:	00c1ff84 	movi	r3,2046
    d858:	18beb416 	blt	r3,r2,d32c <__divdf3+0x16c>
    d85c:	a028d0fa 	srli	r20,r20,3
    d860:	882a977a 	slli	r21,r17,29
    d864:	8820927a 	slli	r16,r17,9
    d868:	1081ffcc 	andi	r2,r2,2047
    d86c:	ad2ab03a 	or	r21,r21,r20
    d870:	8020d33a 	srli	r16,r16,12
    d874:	9900004c 	andi	r4,r19,1
    d878:	003eb006 	br	d33c <__divdf3+0x17c>
    d87c:	8080022c 	andhi	r2,r16,8
    d880:	10001226 	beq	r2,zero,d8cc <__divdf3+0x70c>
    d884:	8880022c 	andhi	r2,r17,8
    d888:	1000101e 	bne	r2,zero,d8cc <__divdf3+0x70c>
    d88c:	00800434 	movhi	r2,16
    d890:	8c000234 	orhi	r16,r17,8
    d894:	10bfffc4 	addi	r2,r2,-1
    d898:	b809883a 	mov	r4,r23
    d89c:	80a0703a 	and	r16,r16,r2
    d8a0:	a02b883a 	mov	r21,r20
    d8a4:	003f0806 	br	d4c8 <__divdf3+0x308>
    d8a8:	008000c4 	movi	r2,3
    d8ac:	3880b126 	beq	r7,r2,db74 <__divdf3+0x9b4>
    d8b0:	00800044 	movi	r2,1
    d8b4:	38805b1e 	bne	r7,r2,da24 <__divdf3+0x864>
    d8b8:	e009883a 	mov	r4,fp
    d8bc:	0005883a 	mov	r2,zero
    d8c0:	0021883a 	mov	r16,zero
    d8c4:	002b883a 	mov	r21,zero
    d8c8:	003e9c06 	br	d33c <__divdf3+0x17c>
    d8cc:	00800434 	movhi	r2,16
    d8d0:	84000234 	orhi	r16,r16,8
    d8d4:	10bfffc4 	addi	r2,r2,-1
    d8d8:	b009883a 	mov	r4,r22
    d8dc:	80a0703a 	and	r16,r16,r2
    d8e0:	003ef906 	br	d4c8 <__divdf3+0x308>
    d8e4:	103fca26 	beq	r2,zero,d810 <__divdf3+0x650>
    d8e8:	b421883a 	add	r16,r22,r16
    d8ec:	a17fffc4 	addi	r5,r20,-1
    d8f0:	8580422e 	bgeu	r16,r22,d9fc <__divdf3+0x83c>
    d8f4:	2829883a 	mov	r20,r5
    d8f8:	813fc41e 	bne	r16,r4,d80c <__divdf3+0x64c>
    d8fc:	d9800017 	ldw	r6,0(sp)
    d900:	30bfc21e 	bne	r6,r2,d80c <__divdf3+0x64c>
    d904:	003fc206 	br	d810 <__divdf3+0x650>
    d908:	143ff604 	addi	r16,r2,-40
    d90c:	8c20983a 	sll	r16,r17,r16
    d910:	002b883a 	mov	r21,zero
    d914:	003eb406 	br	d3e8 <__divdf3+0x228>
    d918:	d9800215 	stw	r6,8(sp)
    d91c:	d9c00515 	stw	r7,20(sp)
    d920:	da000415 	stw	r8,16(sp)
    d924:	000f1540 	call	f154 <__clzsi2>
    d928:	10800804 	addi	r2,r2,32
    d92c:	da000417 	ldw	r8,16(sp)
    d930:	d9c00517 	ldw	r7,20(sp)
    d934:	d9800217 	ldw	r6,8(sp)
    d938:	003ea106 	br	d3c0 <__divdf3+0x200>
    d93c:	147ff604 	addi	r17,r2,-40
    d940:	3462983a 	sll	r17,r6,r17
    d944:	0029883a 	mov	r20,zero
    d948:	003ec906 	br	d470 <__divdf3+0x2b0>
    d94c:	3009883a 	mov	r4,r6
    d950:	d9400115 	stw	r5,4(sp)
    d954:	d9800215 	stw	r6,8(sp)
    d958:	da000415 	stw	r8,16(sp)
    d95c:	da400315 	stw	r9,12(sp)
    d960:	000f1540 	call	f154 <__clzsi2>
    d964:	10800804 	addi	r2,r2,32
    d968:	da400317 	ldw	r9,12(sp)
    d96c:	da000417 	ldw	r8,16(sp)
    d970:	d9800217 	ldw	r6,8(sp)
    d974:	d9400117 	ldw	r5,4(sp)
    d978:	003eb306 	br	d448 <__divdf3+0x288>
    d97c:	d9800017 	ldw	r6,0(sp)
    d980:	a9ab883a 	add	r21,r21,r6
    d984:	a98b803a 	cmpltu	r5,r21,r6
    d988:	2d8b883a 	add	r5,r5,r22
    d98c:	2a11883a 	add	r8,r5,r8
    d990:	897fffc4 	addi	r5,r17,-1
    d994:	b2000c2e 	bgeu	r22,r8,d9c8 <__divdf3+0x808>
    d998:	41003f36 	bltu	r8,r4,da98 <__divdf3+0x8d8>
    d99c:	22006c26 	beq	r4,r8,db50 <__divdf3+0x990>
    d9a0:	4109c83a 	sub	r4,r8,r4
    d9a4:	2823883a 	mov	r17,r5
    d9a8:	003f3b06 	br	d698 <__divdf3+0x4d8>
    d9ac:	ad3ed336 	bltu	r21,r20,d4fc <__divdf3+0x33c>
    d9b0:	a804d07a 	srli	r2,r21,1
    d9b4:	802e97fa 	slli	r23,r16,31
    d9b8:	a82a97fa 	slli	r21,r21,31
    d9bc:	8020d07a 	srli	r16,r16,1
    d9c0:	b8aeb03a 	or	r23,r23,r2
    d9c4:	003ed006 	br	d508 <__divdf3+0x348>
    d9c8:	b23ff51e 	bne	r22,r8,d9a0 <__divdf3+0x7e0>
    d9cc:	d9800017 	ldw	r6,0(sp)
    d9d0:	a9bff12e 	bgeu	r21,r6,d998 <__divdf3+0x7d8>
    d9d4:	b109c83a 	sub	r4,r22,r4
    d9d8:	2823883a 	mov	r17,r5
    d9dc:	003f2e06 	br	d698 <__divdf3+0x4d8>
    d9e0:	2021883a 	mov	r16,r4
    d9e4:	003eff06 	br	d5e4 <__divdf3+0x424>
    d9e8:	2023883a 	mov	r17,r4
    d9ec:	003ee406 	br	d580 <__divdf3+0x3c0>
    d9f0:	a8bfe236 	bltu	r21,r2,d97c <__divdf3+0x7bc>
    d9f4:	0009883a 	mov	r4,zero
    d9f8:	003f2706 	br	d698 <__divdf3+0x4d8>
    d9fc:	81002d36 	bltu	r16,r4,dab4 <__divdf3+0x8f4>
    da00:	24005626 	beq	r4,r16,db5c <__divdf3+0x99c>
    da04:	2829883a 	mov	r20,r5
    da08:	003f8006 	br	d80c <__divdf3+0x64c>
    da0c:	053fffc4 	movi	r20,-1
    da10:	003f7f06 	br	d810 <__divdf3+0x650>
    da14:	200f883a 	mov	r7,r4
    da18:	003f3c06 	br	d70c <__divdf3+0x54c>
    da1c:	1011883a 	mov	r8,r2
    da20:	003f5506 	br	d778 <__divdf3+0x5b8>
    da24:	e027883a 	mov	r19,fp
    da28:	003f7906 	br	d810 <__divdf3+0x650>
    da2c:	010007c4 	movi	r4,31
    da30:	20c02816 	blt	r4,r3,dad4 <__divdf3+0x914>
    da34:	00800804 	movi	r2,32
    da38:	10c5c83a 	sub	r2,r2,r3
    da3c:	888a983a 	sll	r5,r17,r2
    da40:	a0c8d83a 	srl	r4,r20,r3
    da44:	a084983a 	sll	r2,r20,r2
    da48:	88e2d83a 	srl	r17,r17,r3
    da4c:	2906b03a 	or	r3,r5,r4
    da50:	1004c03a 	cmpne	r2,r2,zero
    da54:	1886b03a 	or	r3,r3,r2
    da58:	188001cc 	andi	r2,r3,7
    da5c:	10000726 	beq	r2,zero,da7c <__divdf3+0x8bc>
    da60:	188003cc 	andi	r2,r3,15
    da64:	01000104 	movi	r4,4
    da68:	11000426 	beq	r2,r4,da7c <__divdf3+0x8bc>
    da6c:	1805883a 	mov	r2,r3
    da70:	10c00104 	addi	r3,r2,4
    da74:	1885803a 	cmpltu	r2,r3,r2
    da78:	88a3883a 	add	r17,r17,r2
    da7c:	8880202c 	andhi	r2,r17,128
    da80:	10002926 	beq	r2,zero,db28 <__divdf3+0x968>
    da84:	9900004c 	andi	r4,r19,1
    da88:	00800044 	movi	r2,1
    da8c:	0021883a 	mov	r16,zero
    da90:	002b883a 	mov	r21,zero
    da94:	003e2906 	br	d33c <__divdf3+0x17c>
    da98:	d9800017 	ldw	r6,0(sp)
    da9c:	8c7fff84 	addi	r17,r17,-2
    daa0:	a9ab883a 	add	r21,r21,r6
    daa4:	a98b803a 	cmpltu	r5,r21,r6
    daa8:	2d8b883a 	add	r5,r5,r22
    daac:	2a11883a 	add	r8,r5,r8
    dab0:	003ef806 	br	d694 <__divdf3+0x4d4>
    dab4:	d9800017 	ldw	r6,0(sp)
    dab8:	318f883a 	add	r7,r6,r6
    dabc:	398b803a 	cmpltu	r5,r7,r6
    dac0:	2d8d883a 	add	r6,r5,r22
    dac4:	81a1883a 	add	r16,r16,r6
    dac8:	a17fff84 	addi	r5,r20,-2
    dacc:	d9c00015 	stw	r7,0(sp)
    dad0:	003f8806 	br	d8f4 <__divdf3+0x734>
    dad4:	013ff844 	movi	r4,-31
    dad8:	2085c83a 	sub	r2,r4,r2
    dadc:	8888d83a 	srl	r4,r17,r2
    dae0:	00800804 	movi	r2,32
    dae4:	18802126 	beq	r3,r2,db6c <__divdf3+0x9ac>
    dae8:	04001004 	movi	r16,64
    daec:	80c7c83a 	sub	r3,r16,r3
    daf0:	88e0983a 	sll	r16,r17,r3
    daf4:	8504b03a 	or	r2,r16,r20
    daf8:	1004c03a 	cmpne	r2,r2,zero
    dafc:	2084b03a 	or	r2,r4,r2
    db00:	144001cc 	andi	r17,r2,7
    db04:	88000d1e 	bne	r17,zero,db3c <__divdf3+0x97c>
    db08:	0021883a 	mov	r16,zero
    db0c:	102ad0fa 	srli	r21,r2,3
    db10:	9900004c 	andi	r4,r19,1
    db14:	0005883a 	mov	r2,zero
    db18:	ac6ab03a 	or	r21,r21,r17
    db1c:	003e0706 	br	d33c <__divdf3+0x17c>
    db20:	1007883a 	mov	r3,r2
    db24:	0023883a 	mov	r17,zero
    db28:	8820927a 	slli	r16,r17,9
    db2c:	1805883a 	mov	r2,r3
    db30:	8822977a 	slli	r17,r17,29
    db34:	8020d33a 	srli	r16,r16,12
    db38:	003ff406 	br	db0c <__divdf3+0x94c>
    db3c:	10c003cc 	andi	r3,r2,15
    db40:	01000104 	movi	r4,4
    db44:	193ff626 	beq	r3,r4,db20 <__divdf3+0x960>
    db48:	0023883a 	mov	r17,zero
    db4c:	003fc806 	br	da70 <__divdf3+0x8b0>
    db50:	a8bfd136 	bltu	r21,r2,da98 <__divdf3+0x8d8>
    db54:	2823883a 	mov	r17,r5
    db58:	003fa606 	br	d9f4 <__divdf3+0x834>
    db5c:	d9800017 	ldw	r6,0(sp)
    db60:	30bfd436 	bltu	r6,r2,dab4 <__divdf3+0x8f4>
    db64:	2829883a 	mov	r20,r5
    db68:	003f6406 	br	d8fc <__divdf3+0x73c>
    db6c:	0021883a 	mov	r16,zero
    db70:	003fe006 	br	daf4 <__divdf3+0x934>
    db74:	00800434 	movhi	r2,16
    db78:	8c000234 	orhi	r16,r17,8
    db7c:	10bfffc4 	addi	r2,r2,-1
    db80:	e009883a 	mov	r4,fp
    db84:	80a0703a 	and	r16,r16,r2
    db88:	a02b883a 	mov	r21,r20
    db8c:	003e4e06 	br	d4c8 <__divdf3+0x308>

0000db90 <__eqdf2>:
    db90:	2804d53a 	srli	r2,r5,20
    db94:	3806d53a 	srli	r3,r7,20
    db98:	02000434 	movhi	r8,16
    db9c:	423fffc4 	addi	r8,r8,-1
    dba0:	1081ffcc 	andi	r2,r2,2047
    dba4:	0281ffc4 	movi	r10,2047
    dba8:	2a12703a 	and	r9,r5,r8
    dbac:	18c1ffcc 	andi	r3,r3,2047
    dbb0:	3a10703a 	and	r8,r7,r8
    dbb4:	280ad7fa 	srli	r5,r5,31
    dbb8:	380ed7fa 	srli	r7,r7,31
    dbbc:	12801026 	beq	r2,r10,dc00 <__eqdf2+0x70>
    dbc0:	0281ffc4 	movi	r10,2047
    dbc4:	1a800a26 	beq	r3,r10,dbf0 <__eqdf2+0x60>
    dbc8:	10c00226 	beq	r2,r3,dbd4 <__eqdf2+0x44>
    dbcc:	00800044 	movi	r2,1
    dbd0:	f800283a 	ret
    dbd4:	4a3ffd1e 	bne	r9,r8,dbcc <__eqdf2+0x3c>
    dbd8:	21bffc1e 	bne	r4,r6,dbcc <__eqdf2+0x3c>
    dbdc:	29c00c26 	beq	r5,r7,dc10 <__eqdf2+0x80>
    dbe0:	103ffa1e 	bne	r2,zero,dbcc <__eqdf2+0x3c>
    dbe4:	2244b03a 	or	r2,r4,r9
    dbe8:	1004c03a 	cmpne	r2,r2,zero
    dbec:	f800283a 	ret
    dbf0:	3214b03a 	or	r10,r6,r8
    dbf4:	503ff426 	beq	r10,zero,dbc8 <__eqdf2+0x38>
    dbf8:	00800044 	movi	r2,1
    dbfc:	f800283a 	ret
    dc00:	2254b03a 	or	r10,r4,r9
    dc04:	503fee26 	beq	r10,zero,dbc0 <__eqdf2+0x30>
    dc08:	00800044 	movi	r2,1
    dc0c:	f800283a 	ret
    dc10:	0005883a 	mov	r2,zero
    dc14:	f800283a 	ret

0000dc18 <__gedf2>:
    dc18:	2804d53a 	srli	r2,r5,20
    dc1c:	3806d53a 	srli	r3,r7,20
    dc20:	02000434 	movhi	r8,16
    dc24:	423fffc4 	addi	r8,r8,-1
    dc28:	1081ffcc 	andi	r2,r2,2047
    dc2c:	0241ffc4 	movi	r9,2047
    dc30:	2a14703a 	and	r10,r5,r8
    dc34:	18c1ffcc 	andi	r3,r3,2047
    dc38:	3a10703a 	and	r8,r7,r8
    dc3c:	280ad7fa 	srli	r5,r5,31
    dc40:	380ed7fa 	srli	r7,r7,31
    dc44:	12401d26 	beq	r2,r9,dcbc <__gedf2+0xa4>
    dc48:	0241ffc4 	movi	r9,2047
    dc4c:	1a401226 	beq	r3,r9,dc98 <__gedf2+0x80>
    dc50:	1000081e 	bne	r2,zero,dc74 <__gedf2+0x5c>
    dc54:	2296b03a 	or	r11,r4,r10
    dc58:	5813003a 	cmpeq	r9,r11,zero
    dc5c:	1800091e 	bne	r3,zero,dc84 <__gedf2+0x6c>
    dc60:	3218b03a 	or	r12,r6,r8
    dc64:	6000071e 	bne	r12,zero,dc84 <__gedf2+0x6c>
    dc68:	0005883a 	mov	r2,zero
    dc6c:	5800101e 	bne	r11,zero,dcb0 <__gedf2+0x98>
    dc70:	f800283a 	ret
    dc74:	18000c1e 	bne	r3,zero,dca8 <__gedf2+0x90>
    dc78:	3212b03a 	or	r9,r6,r8
    dc7c:	48000c26 	beq	r9,zero,dcb0 <__gedf2+0x98>
    dc80:	0013883a 	mov	r9,zero
    dc84:	39c03fcc 	andi	r7,r7,255
    dc88:	48000826 	beq	r9,zero,dcac <__gedf2+0x94>
    dc8c:	38000926 	beq	r7,zero,dcb4 <__gedf2+0x9c>
    dc90:	00800044 	movi	r2,1
    dc94:	f800283a 	ret
    dc98:	3212b03a 	or	r9,r6,r8
    dc9c:	483fec26 	beq	r9,zero,dc50 <__gedf2+0x38>
    dca0:	00bfff84 	movi	r2,-2
    dca4:	f800283a 	ret
    dca8:	39c03fcc 	andi	r7,r7,255
    dcac:	29c00626 	beq	r5,r7,dcc8 <__gedf2+0xb0>
    dcb0:	283ff726 	beq	r5,zero,dc90 <__gedf2+0x78>
    dcb4:	00bfffc4 	movi	r2,-1
    dcb8:	f800283a 	ret
    dcbc:	2292b03a 	or	r9,r4,r10
    dcc0:	483fe126 	beq	r9,zero,dc48 <__gedf2+0x30>
    dcc4:	003ff606 	br	dca0 <__gedf2+0x88>
    dcc8:	18bff916 	blt	r3,r2,dcb0 <__gedf2+0x98>
    dccc:	10c00316 	blt	r2,r3,dcdc <__gedf2+0xc4>
    dcd0:	42bff736 	bltu	r8,r10,dcb0 <__gedf2+0x98>
    dcd4:	52000326 	beq	r10,r8,dce4 <__gedf2+0xcc>
    dcd8:	5200042e 	bgeu	r10,r8,dcec <__gedf2+0xd4>
    dcdc:	283fec1e 	bne	r5,zero,dc90 <__gedf2+0x78>
    dce0:	003ff406 	br	dcb4 <__gedf2+0x9c>
    dce4:	313ff236 	bltu	r6,r4,dcb0 <__gedf2+0x98>
    dce8:	21bffc36 	bltu	r4,r6,dcdc <__gedf2+0xc4>
    dcec:	0005883a 	mov	r2,zero
    dcf0:	f800283a 	ret

0000dcf4 <__ledf2>:
    dcf4:	2804d53a 	srli	r2,r5,20
    dcf8:	3810d53a 	srli	r8,r7,20
    dcfc:	00c00434 	movhi	r3,16
    dd00:	18ffffc4 	addi	r3,r3,-1
    dd04:	1081ffcc 	andi	r2,r2,2047
    dd08:	0241ffc4 	movi	r9,2047
    dd0c:	28d4703a 	and	r10,r5,r3
    dd10:	4201ffcc 	andi	r8,r8,2047
    dd14:	38c6703a 	and	r3,r7,r3
    dd18:	280ad7fa 	srli	r5,r5,31
    dd1c:	380ed7fa 	srli	r7,r7,31
    dd20:	12401f26 	beq	r2,r9,dda0 <__ledf2+0xac>
    dd24:	0241ffc4 	movi	r9,2047
    dd28:	42401426 	beq	r8,r9,dd7c <__ledf2+0x88>
    dd2c:	1000091e 	bne	r2,zero,dd54 <__ledf2+0x60>
    dd30:	2296b03a 	or	r11,r4,r10
    dd34:	5813003a 	cmpeq	r9,r11,zero
    dd38:	29403fcc 	andi	r5,r5,255
    dd3c:	40000a1e 	bne	r8,zero,dd68 <__ledf2+0x74>
    dd40:	30d8b03a 	or	r12,r6,r3
    dd44:	6000081e 	bne	r12,zero,dd68 <__ledf2+0x74>
    dd48:	0005883a 	mov	r2,zero
    dd4c:	5800111e 	bne	r11,zero,dd94 <__ledf2+0xa0>
    dd50:	f800283a 	ret
    dd54:	29403fcc 	andi	r5,r5,255
    dd58:	40000c1e 	bne	r8,zero,dd8c <__ledf2+0x98>
    dd5c:	30d2b03a 	or	r9,r6,r3
    dd60:	48000c26 	beq	r9,zero,dd94 <__ledf2+0xa0>
    dd64:	0013883a 	mov	r9,zero
    dd68:	39c03fcc 	andi	r7,r7,255
    dd6c:	48000826 	beq	r9,zero,dd90 <__ledf2+0x9c>
    dd70:	38001126 	beq	r7,zero,ddb8 <__ledf2+0xc4>
    dd74:	00800044 	movi	r2,1
    dd78:	f800283a 	ret
    dd7c:	30d2b03a 	or	r9,r6,r3
    dd80:	483fea26 	beq	r9,zero,dd2c <__ledf2+0x38>
    dd84:	00800084 	movi	r2,2
    dd88:	f800283a 	ret
    dd8c:	39c03fcc 	andi	r7,r7,255
    dd90:	39400726 	beq	r7,r5,ddb0 <__ledf2+0xbc>
    dd94:	2800081e 	bne	r5,zero,ddb8 <__ledf2+0xc4>
    dd98:	00800044 	movi	r2,1
    dd9c:	f800283a 	ret
    dda0:	2292b03a 	or	r9,r4,r10
    dda4:	483fdf26 	beq	r9,zero,dd24 <__ledf2+0x30>
    dda8:	00800084 	movi	r2,2
    ddac:	f800283a 	ret
    ddb0:	4080030e 	bge	r8,r2,ddc0 <__ledf2+0xcc>
    ddb4:	383fef26 	beq	r7,zero,dd74 <__ledf2+0x80>
    ddb8:	00bfffc4 	movi	r2,-1
    ddbc:	f800283a 	ret
    ddc0:	123feb16 	blt	r2,r8,dd70 <__ledf2+0x7c>
    ddc4:	1abff336 	bltu	r3,r10,dd94 <__ledf2+0xa0>
    ddc8:	50c00326 	beq	r10,r3,ddd8 <__ledf2+0xe4>
    ddcc:	50c0042e 	bgeu	r10,r3,dde0 <__ledf2+0xec>
    ddd0:	283fe81e 	bne	r5,zero,dd74 <__ledf2+0x80>
    ddd4:	003ff806 	br	ddb8 <__ledf2+0xc4>
    ddd8:	313fee36 	bltu	r6,r4,dd94 <__ledf2+0xa0>
    dddc:	21bffc36 	bltu	r4,r6,ddd0 <__ledf2+0xdc>
    dde0:	0005883a 	mov	r2,zero
    dde4:	f800283a 	ret

0000dde8 <__muldf3>:
    dde8:	deffee04 	addi	sp,sp,-72
    ddec:	dd000c15 	stw	r20,48(sp)
    ddf0:	2828d53a 	srli	r20,r5,20
    ddf4:	ddc00f15 	stw	r23,60(sp)
    ddf8:	282ed7fa 	srli	r23,r5,31
    ddfc:	dc000815 	stw	r16,32(sp)
    de00:	04000434 	movhi	r16,16
    de04:	dcc00b15 	stw	r19,44(sp)
    de08:	843fffc4 	addi	r16,r16,-1
    de0c:	dfc01115 	stw	ra,68(sp)
    de10:	df001015 	stw	fp,64(sp)
    de14:	dd800e15 	stw	r22,56(sp)
    de18:	dd400d15 	stw	r21,52(sp)
    de1c:	dc800a15 	stw	r18,40(sp)
    de20:	dc400915 	stw	r17,36(sp)
    de24:	a501ffcc 	andi	r20,r20,2047
    de28:	2c20703a 	and	r16,r5,r16
    de2c:	b827883a 	mov	r19,r23
    de30:	ba403fcc 	andi	r9,r23,255
    de34:	a0006026 	beq	r20,zero,dfb8 <__muldf3+0x1d0>
    de38:	0081ffc4 	movi	r2,2047
    de3c:	202d883a 	mov	r22,r4
    de40:	a0803626 	beq	r20,r2,df1c <__muldf3+0x134>
    de44:	84000434 	orhi	r16,r16,16
    de48:	200ad77a 	srli	r5,r4,29
    de4c:	800490fa 	slli	r2,r16,3
    de50:	202c90fa 	slli	r22,r4,3
    de54:	a53f0044 	addi	r20,r20,-1023
    de58:	28a0b03a 	or	r16,r5,r2
    de5c:	002b883a 	mov	r21,zero
    de60:	000b883a 	mov	r5,zero
    de64:	3804d53a 	srli	r2,r7,20
    de68:	3838d7fa 	srli	fp,r7,31
    de6c:	04400434 	movhi	r17,16
    de70:	8c7fffc4 	addi	r17,r17,-1
    de74:	1081ffcc 	andi	r2,r2,2047
    de78:	3025883a 	mov	r18,r6
    de7c:	3c62703a 	and	r17,r7,r17
    de80:	e2803fcc 	andi	r10,fp,255
    de84:	10006d26 	beq	r2,zero,e03c <__muldf3+0x254>
    de88:	00c1ffc4 	movi	r3,2047
    de8c:	10c06526 	beq	r2,r3,e024 <__muldf3+0x23c>
    de90:	8c400434 	orhi	r17,r17,16
    de94:	300ed77a 	srli	r7,r6,29
    de98:	880690fa 	slli	r3,r17,3
    de9c:	302490fa 	slli	r18,r6,3
    dea0:	10bf0044 	addi	r2,r2,-1023
    dea4:	38e2b03a 	or	r17,r7,r3
    dea8:	000f883a 	mov	r7,zero
    deac:	a087883a 	add	r3,r20,r2
    deb0:	010003c4 	movi	r4,15
    deb4:	3d44b03a 	or	r2,r7,r21
    deb8:	e5ccf03a 	xor	r6,fp,r23
    debc:	1a000044 	addi	r8,r3,1
    dec0:	20809b36 	bltu	r4,r2,e130 <__muldf3+0x348>
    dec4:	100490ba 	slli	r2,r2,2
    dec8:	01000074 	movhi	r4,1
    decc:	2137b704 	addi	r4,r4,-8484
    ded0:	1105883a 	add	r2,r2,r4
    ded4:	10800017 	ldw	r2,0(r2)
    ded8:	1000683a 	jmp	r2
    dedc:	0000e130 	cmpltui	zero,zero,900
    dee0:	0000df3c 	xorhi	zero,zero,892
    dee4:	0000df3c 	xorhi	zero,zero,892
    dee8:	0000df38 	rdprs	zero,zero,892
    deec:	0000e10c 	andi	zero,zero,900
    def0:	0000e10c 	andi	zero,zero,900
    def4:	0000e0f4 	movhi	zero,899
    def8:	0000df38 	rdprs	zero,zero,892
    defc:	0000e10c 	andi	zero,zero,900
    df00:	0000e0f4 	movhi	zero,899
    df04:	0000e10c 	andi	zero,zero,900
    df08:	0000df38 	rdprs	zero,zero,892
    df0c:	0000e11c 	xori	zero,zero,900
    df10:	0000e11c 	xori	zero,zero,900
    df14:	0000e11c 	xori	zero,zero,900
    df18:	0000e47c 	xorhi	zero,zero,913
    df1c:	2404b03a 	or	r2,r4,r16
    df20:	1000711e 	bne	r2,zero,e0e8 <__muldf3+0x300>
    df24:	05400204 	movi	r21,8
    df28:	0021883a 	mov	r16,zero
    df2c:	002d883a 	mov	r22,zero
    df30:	01400084 	movi	r5,2
    df34:	003fcb06 	br	de64 <__muldf3+0x7c>
    df38:	500d883a 	mov	r6,r10
    df3c:	00800084 	movi	r2,2
    df40:	38805926 	beq	r7,r2,e0a8 <__muldf3+0x2c0>
    df44:	008000c4 	movi	r2,3
    df48:	3881bb26 	beq	r7,r2,e638 <__muldf3+0x850>
    df4c:	00800044 	movi	r2,1
    df50:	3881961e 	bne	r7,r2,e5ac <__muldf3+0x7c4>
    df54:	3027883a 	mov	r19,r6
    df58:	0005883a 	mov	r2,zero
    df5c:	0021883a 	mov	r16,zero
    df60:	002d883a 	mov	r22,zero
    df64:	1004953a 	slli	r2,r2,20
    df68:	98c03fcc 	andi	r3,r19,255
    df6c:	04400434 	movhi	r17,16
    df70:	8c7fffc4 	addi	r17,r17,-1
    df74:	180697fa 	slli	r3,r3,31
    df78:	8460703a 	and	r16,r16,r17
    df7c:	80a0b03a 	or	r16,r16,r2
    df80:	80c6b03a 	or	r3,r16,r3
    df84:	b005883a 	mov	r2,r22
    df88:	dfc01117 	ldw	ra,68(sp)
    df8c:	df001017 	ldw	fp,64(sp)
    df90:	ddc00f17 	ldw	r23,60(sp)
    df94:	dd800e17 	ldw	r22,56(sp)
    df98:	dd400d17 	ldw	r21,52(sp)
    df9c:	dd000c17 	ldw	r20,48(sp)
    dfa0:	dcc00b17 	ldw	r19,44(sp)
    dfa4:	dc800a17 	ldw	r18,40(sp)
    dfa8:	dc400917 	ldw	r17,36(sp)
    dfac:	dc000817 	ldw	r16,32(sp)
    dfb0:	dec01204 	addi	sp,sp,72
    dfb4:	f800283a 	ret
    dfb8:	2404b03a 	or	r2,r4,r16
    dfbc:	202b883a 	mov	r21,r4
    dfc0:	10004426 	beq	r2,zero,e0d4 <__muldf3+0x2ec>
    dfc4:	80015126 	beq	r16,zero,e50c <__muldf3+0x724>
    dfc8:	8009883a 	mov	r4,r16
    dfcc:	d9800715 	stw	r6,28(sp)
    dfd0:	d9c00215 	stw	r7,8(sp)
    dfd4:	da400415 	stw	r9,16(sp)
    dfd8:	000f1540 	call	f154 <__clzsi2>
    dfdc:	d9800717 	ldw	r6,28(sp)
    dfe0:	d9c00217 	ldw	r7,8(sp)
    dfe4:	da400417 	ldw	r9,16(sp)
    dfe8:	113ffd44 	addi	r4,r2,-11
    dfec:	00c00704 	movi	r3,28
    dff0:	19014216 	blt	r3,r4,e4fc <__muldf3+0x714>
    dff4:	00c00744 	movi	r3,29
    dff8:	15bffe04 	addi	r22,r2,-8
    dffc:	1907c83a 	sub	r3,r3,r4
    e000:	85a0983a 	sll	r16,r16,r22
    e004:	a8c6d83a 	srl	r3,r21,r3
    e008:	adac983a 	sll	r22,r21,r22
    e00c:	1c20b03a 	or	r16,r3,r16
    e010:	1080fcc4 	addi	r2,r2,1011
    e014:	00a9c83a 	sub	r20,zero,r2
    e018:	002b883a 	mov	r21,zero
    e01c:	000b883a 	mov	r5,zero
    e020:	003f9006 	br	de64 <__muldf3+0x7c>
    e024:	3446b03a 	or	r3,r6,r17
    e028:	1800281e 	bne	r3,zero,e0cc <__muldf3+0x2e4>
    e02c:	0023883a 	mov	r17,zero
    e030:	0025883a 	mov	r18,zero
    e034:	01c00084 	movi	r7,2
    e038:	003f9c06 	br	deac <__muldf3+0xc4>
    e03c:	3446b03a 	or	r3,r6,r17
    e040:	18001e26 	beq	r3,zero,e0bc <__muldf3+0x2d4>
    e044:	88012126 	beq	r17,zero,e4cc <__muldf3+0x6e4>
    e048:	8809883a 	mov	r4,r17
    e04c:	d9400215 	stw	r5,8(sp)
    e050:	d9800715 	stw	r6,28(sp)
    e054:	da400415 	stw	r9,16(sp)
    e058:	da800315 	stw	r10,12(sp)
    e05c:	000f1540 	call	f154 <__clzsi2>
    e060:	d9400217 	ldw	r5,8(sp)
    e064:	d9800717 	ldw	r6,28(sp)
    e068:	da400417 	ldw	r9,16(sp)
    e06c:	da800317 	ldw	r10,12(sp)
    e070:	113ffd44 	addi	r4,r2,-11
    e074:	00c00704 	movi	r3,28
    e078:	19011016 	blt	r3,r4,e4bc <__muldf3+0x6d4>
    e07c:	00c00744 	movi	r3,29
    e080:	14bffe04 	addi	r18,r2,-8
    e084:	1907c83a 	sub	r3,r3,r4
    e088:	8ca2983a 	sll	r17,r17,r18
    e08c:	30c6d83a 	srl	r3,r6,r3
    e090:	34a4983a 	sll	r18,r6,r18
    e094:	1c62b03a 	or	r17,r3,r17
    e098:	1080fcc4 	addi	r2,r2,1011
    e09c:	0085c83a 	sub	r2,zero,r2
    e0a0:	000f883a 	mov	r7,zero
    e0a4:	003f8106 	br	deac <__muldf3+0xc4>
    e0a8:	3027883a 	mov	r19,r6
    e0ac:	0081ffc4 	movi	r2,2047
    e0b0:	0021883a 	mov	r16,zero
    e0b4:	002d883a 	mov	r22,zero
    e0b8:	003faa06 	br	df64 <__muldf3+0x17c>
    e0bc:	0023883a 	mov	r17,zero
    e0c0:	0025883a 	mov	r18,zero
    e0c4:	01c00044 	movi	r7,1
    e0c8:	003f7806 	br	deac <__muldf3+0xc4>
    e0cc:	01c000c4 	movi	r7,3
    e0d0:	003f7606 	br	deac <__muldf3+0xc4>
    e0d4:	05400104 	movi	r21,4
    e0d8:	0021883a 	mov	r16,zero
    e0dc:	002d883a 	mov	r22,zero
    e0e0:	01400044 	movi	r5,1
    e0e4:	003f5f06 	br	de64 <__muldf3+0x7c>
    e0e8:	05400304 	movi	r21,12
    e0ec:	014000c4 	movi	r5,3
    e0f0:	003f5c06 	br	de64 <__muldf3+0x7c>
    e0f4:	04000434 	movhi	r16,16
    e0f8:	0027883a 	mov	r19,zero
    e0fc:	843fffc4 	addi	r16,r16,-1
    e100:	05bfffc4 	movi	r22,-1
    e104:	0081ffc4 	movi	r2,2047
    e108:	003f9606 	br	df64 <__muldf3+0x17c>
    e10c:	8023883a 	mov	r17,r16
    e110:	b025883a 	mov	r18,r22
    e114:	280f883a 	mov	r7,r5
    e118:	003f8806 	br	df3c <__muldf3+0x154>
    e11c:	8023883a 	mov	r17,r16
    e120:	b025883a 	mov	r18,r22
    e124:	480d883a 	mov	r6,r9
    e128:	280f883a 	mov	r7,r5
    e12c:	003f8306 	br	df3c <__muldf3+0x154>
    e130:	b026d43a 	srli	r19,r22,16
    e134:	902ed43a 	srli	r23,r18,16
    e138:	b5bfffcc 	andi	r22,r22,65535
    e13c:	94bfffcc 	andi	r18,r18,65535
    e140:	b00b883a 	mov	r5,r22
    e144:	9009883a 	mov	r4,r18
    e148:	d8c00515 	stw	r3,20(sp)
    e14c:	d9800715 	stw	r6,28(sp)
    e150:	da000615 	stw	r8,24(sp)
    e154:	000c8ec0 	call	c8ec <__mulsi3>
    e158:	980b883a 	mov	r5,r19
    e15c:	9009883a 	mov	r4,r18
    e160:	1029883a 	mov	r20,r2
    e164:	000c8ec0 	call	c8ec <__mulsi3>
    e168:	b80b883a 	mov	r5,r23
    e16c:	9809883a 	mov	r4,r19
    e170:	102b883a 	mov	r21,r2
    e174:	000c8ec0 	call	c8ec <__mulsi3>
    e178:	b809883a 	mov	r4,r23
    e17c:	b00b883a 	mov	r5,r22
    e180:	1039883a 	mov	fp,r2
    e184:	000c8ec0 	call	c8ec <__mulsi3>
    e188:	a008d43a 	srli	r4,r20,16
    e18c:	1545883a 	add	r2,r2,r21
    e190:	d8c00517 	ldw	r3,20(sp)
    e194:	2085883a 	add	r2,r4,r2
    e198:	d9800717 	ldw	r6,28(sp)
    e19c:	da000617 	ldw	r8,24(sp)
    e1a0:	1540022e 	bgeu	r2,r21,e1ac <__muldf3+0x3c4>
    e1a4:	01000074 	movhi	r4,1
    e1a8:	e139883a 	add	fp,fp,r4
    e1ac:	100e943a 	slli	r7,r2,16
    e1b0:	1004d43a 	srli	r2,r2,16
    e1b4:	882ad43a 	srli	r21,r17,16
    e1b8:	a53fffcc 	andi	r20,r20,65535
    e1bc:	8c7fffcc 	andi	r17,r17,65535
    e1c0:	3d29883a 	add	r20,r7,r20
    e1c4:	b00b883a 	mov	r5,r22
    e1c8:	8809883a 	mov	r4,r17
    e1cc:	d8c00515 	stw	r3,20(sp)
    e1d0:	d9800715 	stw	r6,28(sp)
    e1d4:	da000615 	stw	r8,24(sp)
    e1d8:	dd000115 	stw	r20,4(sp)
    e1dc:	d8800015 	stw	r2,0(sp)
    e1e0:	000c8ec0 	call	c8ec <__mulsi3>
    e1e4:	980b883a 	mov	r5,r19
    e1e8:	8809883a 	mov	r4,r17
    e1ec:	d8800215 	stw	r2,8(sp)
    e1f0:	000c8ec0 	call	c8ec <__mulsi3>
    e1f4:	9809883a 	mov	r4,r19
    e1f8:	a80b883a 	mov	r5,r21
    e1fc:	1029883a 	mov	r20,r2
    e200:	000c8ec0 	call	c8ec <__mulsi3>
    e204:	b00b883a 	mov	r5,r22
    e208:	a809883a 	mov	r4,r21
    e20c:	d8800415 	stw	r2,16(sp)
    e210:	000c8ec0 	call	c8ec <__mulsi3>
    e214:	d9c00217 	ldw	r7,8(sp)
    e218:	1505883a 	add	r2,r2,r20
    e21c:	d8c00517 	ldw	r3,20(sp)
    e220:	3826d43a 	srli	r19,r7,16
    e224:	d9800717 	ldw	r6,28(sp)
    e228:	da000617 	ldw	r8,24(sp)
    e22c:	9885883a 	add	r2,r19,r2
    e230:	da400417 	ldw	r9,16(sp)
    e234:	1500022e 	bgeu	r2,r20,e240 <__muldf3+0x458>
    e238:	01000074 	movhi	r4,1
    e23c:	4913883a 	add	r9,r9,r4
    e240:	1028d43a 	srli	r20,r2,16
    e244:	1004943a 	slli	r2,r2,16
    e248:	802cd43a 	srli	r22,r16,16
    e24c:	843fffcc 	andi	r16,r16,65535
    e250:	3cffffcc 	andi	r19,r7,65535
    e254:	9009883a 	mov	r4,r18
    e258:	800b883a 	mov	r5,r16
    e25c:	a269883a 	add	r20,r20,r9
    e260:	d8c00515 	stw	r3,20(sp)
    e264:	d9800715 	stw	r6,28(sp)
    e268:	da000615 	stw	r8,24(sp)
    e26c:	14e7883a 	add	r19,r2,r19
    e270:	000c8ec0 	call	c8ec <__mulsi3>
    e274:	9009883a 	mov	r4,r18
    e278:	b00b883a 	mov	r5,r22
    e27c:	d8800315 	stw	r2,12(sp)
    e280:	000c8ec0 	call	c8ec <__mulsi3>
    e284:	b809883a 	mov	r4,r23
    e288:	b00b883a 	mov	r5,r22
    e28c:	d8800215 	stw	r2,8(sp)
    e290:	000c8ec0 	call	c8ec <__mulsi3>
    e294:	b80b883a 	mov	r5,r23
    e298:	8009883a 	mov	r4,r16
    e29c:	d8800415 	stw	r2,16(sp)
    e2a0:	000c8ec0 	call	c8ec <__mulsi3>
    e2a4:	da800317 	ldw	r10,12(sp)
    e2a8:	d9c00217 	ldw	r7,8(sp)
    e2ac:	d9000017 	ldw	r4,0(sp)
    e2b0:	502ed43a 	srli	r23,r10,16
    e2b4:	11c5883a 	add	r2,r2,r7
    e2b8:	24e5883a 	add	r18,r4,r19
    e2bc:	b885883a 	add	r2,r23,r2
    e2c0:	d8c00517 	ldw	r3,20(sp)
    e2c4:	d9800717 	ldw	r6,28(sp)
    e2c8:	da000617 	ldw	r8,24(sp)
    e2cc:	da400417 	ldw	r9,16(sp)
    e2d0:	11c0022e 	bgeu	r2,r7,e2dc <__muldf3+0x4f4>
    e2d4:	01000074 	movhi	r4,1
    e2d8:	4913883a 	add	r9,r9,r4
    e2dc:	100ed43a 	srli	r7,r2,16
    e2e0:	1004943a 	slli	r2,r2,16
    e2e4:	55ffffcc 	andi	r23,r10,65535
    e2e8:	3a53883a 	add	r9,r7,r9
    e2ec:	8809883a 	mov	r4,r17
    e2f0:	800b883a 	mov	r5,r16
    e2f4:	d8c00515 	stw	r3,20(sp)
    e2f8:	d9800715 	stw	r6,28(sp)
    e2fc:	da000615 	stw	r8,24(sp)
    e300:	da400415 	stw	r9,16(sp)
    e304:	15ef883a 	add	r23,r2,r23
    e308:	000c8ec0 	call	c8ec <__mulsi3>
    e30c:	8809883a 	mov	r4,r17
    e310:	b00b883a 	mov	r5,r22
    e314:	d8800215 	stw	r2,8(sp)
    e318:	000c8ec0 	call	c8ec <__mulsi3>
    e31c:	b00b883a 	mov	r5,r22
    e320:	a809883a 	mov	r4,r21
    e324:	d8800315 	stw	r2,12(sp)
    e328:	000c8ec0 	call	c8ec <__mulsi3>
    e32c:	8009883a 	mov	r4,r16
    e330:	a80b883a 	mov	r5,r21
    e334:	1023883a 	mov	r17,r2
    e338:	000c8ec0 	call	c8ec <__mulsi3>
    e33c:	d9c00217 	ldw	r7,8(sp)
    e340:	da800317 	ldw	r10,12(sp)
    e344:	d8c00517 	ldw	r3,20(sp)
    e348:	3808d43a 	srli	r4,r7,16
    e34c:	1285883a 	add	r2,r2,r10
    e350:	d9800717 	ldw	r6,28(sp)
    e354:	2085883a 	add	r2,r4,r2
    e358:	da000617 	ldw	r8,24(sp)
    e35c:	da400417 	ldw	r9,16(sp)
    e360:	1280022e 	bgeu	r2,r10,e36c <__muldf3+0x584>
    e364:	01000074 	movhi	r4,1
    e368:	8923883a 	add	r17,r17,r4
    e36c:	1008943a 	slli	r4,r2,16
    e370:	39ffffcc 	andi	r7,r7,65535
    e374:	e4b9883a 	add	fp,fp,r18
    e378:	21cf883a 	add	r7,r4,r7
    e37c:	e4e7803a 	cmpltu	r19,fp,r19
    e380:	3d0f883a 	add	r7,r7,r20
    e384:	bf39883a 	add	fp,r23,fp
    e388:	99c9883a 	add	r4,r19,r7
    e38c:	e5ef803a 	cmpltu	r23,fp,r23
    e390:	490b883a 	add	r5,r9,r4
    e394:	1004d43a 	srli	r2,r2,16
    e398:	b965883a 	add	r18,r23,r5
    e39c:	24c9803a 	cmpltu	r4,r4,r19
    e3a0:	3d29803a 	cmpltu	r20,r7,r20
    e3a4:	a128b03a 	or	r20,r20,r4
    e3a8:	95ef803a 	cmpltu	r23,r18,r23
    e3ac:	2a53803a 	cmpltu	r9,r5,r9
    e3b0:	a0a9883a 	add	r20,r20,r2
    e3b4:	4deeb03a 	or	r23,r9,r23
    e3b8:	a5ef883a 	add	r23,r20,r23
    e3bc:	bc63883a 	add	r17,r23,r17
    e3c0:	e004927a 	slli	r2,fp,9
    e3c4:	d9000117 	ldw	r4,4(sp)
    e3c8:	882e927a 	slli	r23,r17,9
    e3cc:	9022d5fa 	srli	r17,r18,23
    e3d0:	e038d5fa 	srli	fp,fp,23
    e3d4:	1104b03a 	or	r2,r2,r4
    e3d8:	9024927a 	slli	r18,r18,9
    e3dc:	1004c03a 	cmpne	r2,r2,zero
    e3e0:	bc62b03a 	or	r17,r23,r17
    e3e4:	1738b03a 	or	fp,r2,fp
    e3e8:	8880402c 	andhi	r2,r17,256
    e3ec:	e4a4b03a 	or	r18,fp,r18
    e3f0:	10000726 	beq	r2,zero,e410 <__muldf3+0x628>
    e3f4:	9006d07a 	srli	r3,r18,1
    e3f8:	880497fa 	slli	r2,r17,31
    e3fc:	9480004c 	andi	r18,r18,1
    e400:	8822d07a 	srli	r17,r17,1
    e404:	1ca4b03a 	or	r18,r3,r18
    e408:	14a4b03a 	or	r18,r2,r18
    e40c:	4007883a 	mov	r3,r8
    e410:	1880ffc4 	addi	r2,r3,1023
    e414:	0080460e 	bge	zero,r2,e530 <__muldf3+0x748>
    e418:	910001cc 	andi	r4,r18,7
    e41c:	20000726 	beq	r4,zero,e43c <__muldf3+0x654>
    e420:	910003cc 	andi	r4,r18,15
    e424:	01400104 	movi	r5,4
    e428:	21400426 	beq	r4,r5,e43c <__muldf3+0x654>
    e42c:	9149883a 	add	r4,r18,r5
    e430:	24a5803a 	cmpltu	r18,r4,r18
    e434:	8ca3883a 	add	r17,r17,r18
    e438:	2025883a 	mov	r18,r4
    e43c:	8900402c 	andhi	r4,r17,256
    e440:	20000426 	beq	r4,zero,e454 <__muldf3+0x66c>
    e444:	18810004 	addi	r2,r3,1024
    e448:	00ffc034 	movhi	r3,65280
    e44c:	18ffffc4 	addi	r3,r3,-1
    e450:	88e2703a 	and	r17,r17,r3
    e454:	00c1ff84 	movi	r3,2046
    e458:	18bf1316 	blt	r3,r2,e0a8 <__muldf3+0x2c0>
    e45c:	882c977a 	slli	r22,r17,29
    e460:	9024d0fa 	srli	r18,r18,3
    e464:	8822927a 	slli	r17,r17,9
    e468:	1081ffcc 	andi	r2,r2,2047
    e46c:	b4acb03a 	or	r22,r22,r18
    e470:	8820d33a 	srli	r16,r17,12
    e474:	3027883a 	mov	r19,r6
    e478:	003eba06 	br	df64 <__muldf3+0x17c>
    e47c:	8080022c 	andhi	r2,r16,8
    e480:	10000926 	beq	r2,zero,e4a8 <__muldf3+0x6c0>
    e484:	8880022c 	andhi	r2,r17,8
    e488:	1000071e 	bne	r2,zero,e4a8 <__muldf3+0x6c0>
    e48c:	00800434 	movhi	r2,16
    e490:	8c000234 	orhi	r16,r17,8
    e494:	10bfffc4 	addi	r2,r2,-1
    e498:	e027883a 	mov	r19,fp
    e49c:	80a0703a 	and	r16,r16,r2
    e4a0:	902d883a 	mov	r22,r18
    e4a4:	003f1706 	br	e104 <__muldf3+0x31c>
    e4a8:	00800434 	movhi	r2,16
    e4ac:	84000234 	orhi	r16,r16,8
    e4b0:	10bfffc4 	addi	r2,r2,-1
    e4b4:	80a0703a 	and	r16,r16,r2
    e4b8:	003f1206 	br	e104 <__muldf3+0x31c>
    e4bc:	147ff604 	addi	r17,r2,-40
    e4c0:	3462983a 	sll	r17,r6,r17
    e4c4:	0025883a 	mov	r18,zero
    e4c8:	003ef306 	br	e098 <__muldf3+0x2b0>
    e4cc:	3009883a 	mov	r4,r6
    e4d0:	d9400215 	stw	r5,8(sp)
    e4d4:	d9800715 	stw	r6,28(sp)
    e4d8:	da400415 	stw	r9,16(sp)
    e4dc:	da800315 	stw	r10,12(sp)
    e4e0:	000f1540 	call	f154 <__clzsi2>
    e4e4:	10800804 	addi	r2,r2,32
    e4e8:	da800317 	ldw	r10,12(sp)
    e4ec:	da400417 	ldw	r9,16(sp)
    e4f0:	d9800717 	ldw	r6,28(sp)
    e4f4:	d9400217 	ldw	r5,8(sp)
    e4f8:	003edd06 	br	e070 <__muldf3+0x288>
    e4fc:	143ff604 	addi	r16,r2,-40
    e500:	ac20983a 	sll	r16,r21,r16
    e504:	002d883a 	mov	r22,zero
    e508:	003ec106 	br	e010 <__muldf3+0x228>
    e50c:	d9800715 	stw	r6,28(sp)
    e510:	d9c00215 	stw	r7,8(sp)
    e514:	da400415 	stw	r9,16(sp)
    e518:	000f1540 	call	f154 <__clzsi2>
    e51c:	10800804 	addi	r2,r2,32
    e520:	da400417 	ldw	r9,16(sp)
    e524:	d9c00217 	ldw	r7,8(sp)
    e528:	d9800717 	ldw	r6,28(sp)
    e52c:	003eae06 	br	dfe8 <__muldf3+0x200>
    e530:	00c00044 	movi	r3,1
    e534:	1887c83a 	sub	r3,r3,r2
    e538:	01000e04 	movi	r4,56
    e53c:	20fe8516 	blt	r4,r3,df54 <__muldf3+0x16c>
    e540:	010007c4 	movi	r4,31
    e544:	20c01b16 	blt	r4,r3,e5b4 <__muldf3+0x7cc>
    e548:	00800804 	movi	r2,32
    e54c:	10c5c83a 	sub	r2,r2,r3
    e550:	888a983a 	sll	r5,r17,r2
    e554:	90c8d83a 	srl	r4,r18,r3
    e558:	9084983a 	sll	r2,r18,r2
    e55c:	88e2d83a 	srl	r17,r17,r3
    e560:	2906b03a 	or	r3,r5,r4
    e564:	1004c03a 	cmpne	r2,r2,zero
    e568:	1886b03a 	or	r3,r3,r2
    e56c:	188001cc 	andi	r2,r3,7
    e570:	10000726 	beq	r2,zero,e590 <__muldf3+0x7a8>
    e574:	188003cc 	andi	r2,r3,15
    e578:	01000104 	movi	r4,4
    e57c:	11000426 	beq	r2,r4,e590 <__muldf3+0x7a8>
    e580:	1805883a 	mov	r2,r3
    e584:	10c00104 	addi	r3,r2,4
    e588:	1885803a 	cmpltu	r2,r3,r2
    e58c:	88a3883a 	add	r17,r17,r2
    e590:	8880202c 	andhi	r2,r17,128
    e594:	10001c26 	beq	r2,zero,e608 <__muldf3+0x820>
    e598:	3027883a 	mov	r19,r6
    e59c:	00800044 	movi	r2,1
    e5a0:	0021883a 	mov	r16,zero
    e5a4:	002d883a 	mov	r22,zero
    e5a8:	003e6e06 	br	df64 <__muldf3+0x17c>
    e5ac:	4007883a 	mov	r3,r8
    e5b0:	003f9706 	br	e410 <__muldf3+0x628>
    e5b4:	017ff844 	movi	r5,-31
    e5b8:	2885c83a 	sub	r2,r5,r2
    e5bc:	888ad83a 	srl	r5,r17,r2
    e5c0:	00800804 	movi	r2,32
    e5c4:	18801a26 	beq	r3,r2,e630 <__muldf3+0x848>
    e5c8:	01001004 	movi	r4,64
    e5cc:	20c7c83a 	sub	r3,r4,r3
    e5d0:	88e2983a 	sll	r17,r17,r3
    e5d4:	8ca4b03a 	or	r18,r17,r18
    e5d8:	9004c03a 	cmpne	r2,r18,zero
    e5dc:	2884b03a 	or	r2,r5,r2
    e5e0:	144001cc 	andi	r17,r2,7
    e5e4:	88000d1e 	bne	r17,zero,e61c <__muldf3+0x834>
    e5e8:	0021883a 	mov	r16,zero
    e5ec:	102cd0fa 	srli	r22,r2,3
    e5f0:	3027883a 	mov	r19,r6
    e5f4:	0005883a 	mov	r2,zero
    e5f8:	b46cb03a 	or	r22,r22,r17
    e5fc:	003e5906 	br	df64 <__muldf3+0x17c>
    e600:	1007883a 	mov	r3,r2
    e604:	0023883a 	mov	r17,zero
    e608:	8820927a 	slli	r16,r17,9
    e60c:	1805883a 	mov	r2,r3
    e610:	8822977a 	slli	r17,r17,29
    e614:	8020d33a 	srli	r16,r16,12
    e618:	003ff406 	br	e5ec <__muldf3+0x804>
    e61c:	10c003cc 	andi	r3,r2,15
    e620:	01000104 	movi	r4,4
    e624:	193ff626 	beq	r3,r4,e600 <__muldf3+0x818>
    e628:	0023883a 	mov	r17,zero
    e62c:	003fd506 	br	e584 <__muldf3+0x79c>
    e630:	0023883a 	mov	r17,zero
    e634:	003fe706 	br	e5d4 <__muldf3+0x7ec>
    e638:	00800434 	movhi	r2,16
    e63c:	8c000234 	orhi	r16,r17,8
    e640:	10bfffc4 	addi	r2,r2,-1
    e644:	3027883a 	mov	r19,r6
    e648:	80a0703a 	and	r16,r16,r2
    e64c:	902d883a 	mov	r22,r18
    e650:	003eac06 	br	e104 <__muldf3+0x31c>

0000e654 <__subdf3>:
    e654:	02000434 	movhi	r8,16
    e658:	423fffc4 	addi	r8,r8,-1
    e65c:	defffb04 	addi	sp,sp,-20
    e660:	2a14703a 	and	r10,r5,r8
    e664:	3812d53a 	srli	r9,r7,20
    e668:	3a10703a 	and	r8,r7,r8
    e66c:	2006d77a 	srli	r3,r4,29
    e670:	3004d77a 	srli	r2,r6,29
    e674:	dc000015 	stw	r16,0(sp)
    e678:	501490fa 	slli	r10,r10,3
    e67c:	2820d53a 	srli	r16,r5,20
    e680:	401090fa 	slli	r8,r8,3
    e684:	dc800215 	stw	r18,8(sp)
    e688:	dc400115 	stw	r17,4(sp)
    e68c:	dfc00415 	stw	ra,16(sp)
    e690:	202290fa 	slli	r17,r4,3
    e694:	dcc00315 	stw	r19,12(sp)
    e698:	4a41ffcc 	andi	r9,r9,2047
    e69c:	0101ffc4 	movi	r4,2047
    e6a0:	2824d7fa 	srli	r18,r5,31
    e6a4:	8401ffcc 	andi	r16,r16,2047
    e6a8:	50c6b03a 	or	r3,r10,r3
    e6ac:	380ed7fa 	srli	r7,r7,31
    e6b0:	408ab03a 	or	r5,r8,r2
    e6b4:	300c90fa 	slli	r6,r6,3
    e6b8:	49009626 	beq	r9,r4,e914 <__subdf3+0x2c0>
    e6bc:	39c0005c 	xori	r7,r7,1
    e6c0:	8245c83a 	sub	r2,r16,r9
    e6c4:	3c807426 	beq	r7,r18,e898 <__subdf3+0x244>
    e6c8:	0080af0e 	bge	zero,r2,e988 <__subdf3+0x334>
    e6cc:	48002a1e 	bne	r9,zero,e778 <__subdf3+0x124>
    e6d0:	2988b03a 	or	r4,r5,r6
    e6d4:	20009a1e 	bne	r4,zero,e940 <__subdf3+0x2ec>
    e6d8:	888001cc 	andi	r2,r17,7
    e6dc:	10000726 	beq	r2,zero,e6fc <__subdf3+0xa8>
    e6e0:	888003cc 	andi	r2,r17,15
    e6e4:	01000104 	movi	r4,4
    e6e8:	11000426 	beq	r2,r4,e6fc <__subdf3+0xa8>
    e6ec:	890b883a 	add	r5,r17,r4
    e6f0:	2c63803a 	cmpltu	r17,r5,r17
    e6f4:	1c47883a 	add	r3,r3,r17
    e6f8:	2823883a 	mov	r17,r5
    e6fc:	1880202c 	andhi	r2,r3,128
    e700:	10005926 	beq	r2,zero,e868 <__subdf3+0x214>
    e704:	84000044 	addi	r16,r16,1
    e708:	0081ffc4 	movi	r2,2047
    e70c:	8080be26 	beq	r16,r2,ea08 <__subdf3+0x3b4>
    e710:	017fe034 	movhi	r5,65408
    e714:	297fffc4 	addi	r5,r5,-1
    e718:	1946703a 	and	r3,r3,r5
    e71c:	1804977a 	slli	r2,r3,29
    e720:	1806927a 	slli	r3,r3,9
    e724:	8822d0fa 	srli	r17,r17,3
    e728:	8401ffcc 	andi	r16,r16,2047
    e72c:	180ad33a 	srli	r5,r3,12
    e730:	9100004c 	andi	r4,r18,1
    e734:	1444b03a 	or	r2,r2,r17
    e738:	80c1ffcc 	andi	r3,r16,2047
    e73c:	1820953a 	slli	r16,r3,20
    e740:	20c03fcc 	andi	r3,r4,255
    e744:	180897fa 	slli	r4,r3,31
    e748:	00c00434 	movhi	r3,16
    e74c:	18ffffc4 	addi	r3,r3,-1
    e750:	28c6703a 	and	r3,r5,r3
    e754:	1c06b03a 	or	r3,r3,r16
    e758:	1906b03a 	or	r3,r3,r4
    e75c:	dfc00417 	ldw	ra,16(sp)
    e760:	dcc00317 	ldw	r19,12(sp)
    e764:	dc800217 	ldw	r18,8(sp)
    e768:	dc400117 	ldw	r17,4(sp)
    e76c:	dc000017 	ldw	r16,0(sp)
    e770:	dec00504 	addi	sp,sp,20
    e774:	f800283a 	ret
    e778:	0101ffc4 	movi	r4,2047
    e77c:	813fd626 	beq	r16,r4,e6d8 <__subdf3+0x84>
    e780:	29402034 	orhi	r5,r5,128
    e784:	01000e04 	movi	r4,56
    e788:	2080a316 	blt	r4,r2,ea18 <__subdf3+0x3c4>
    e78c:	010007c4 	movi	r4,31
    e790:	2080c616 	blt	r4,r2,eaac <__subdf3+0x458>
    e794:	01000804 	movi	r4,32
    e798:	2089c83a 	sub	r4,r4,r2
    e79c:	2910983a 	sll	r8,r5,r4
    e7a0:	308ed83a 	srl	r7,r6,r2
    e7a4:	3108983a 	sll	r4,r6,r4
    e7a8:	2884d83a 	srl	r2,r5,r2
    e7ac:	41ccb03a 	or	r6,r8,r7
    e7b0:	2008c03a 	cmpne	r4,r4,zero
    e7b4:	310cb03a 	or	r6,r6,r4
    e7b8:	898dc83a 	sub	r6,r17,r6
    e7bc:	89a3803a 	cmpltu	r17,r17,r6
    e7c0:	1887c83a 	sub	r3,r3,r2
    e7c4:	1c47c83a 	sub	r3,r3,r17
    e7c8:	3023883a 	mov	r17,r6
    e7cc:	1880202c 	andhi	r2,r3,128
    e7d0:	10002326 	beq	r2,zero,e860 <__subdf3+0x20c>
    e7d4:	04c02034 	movhi	r19,128
    e7d8:	9cffffc4 	addi	r19,r19,-1
    e7dc:	1ce6703a 	and	r19,r3,r19
    e7e0:	98007a26 	beq	r19,zero,e9cc <__subdf3+0x378>
    e7e4:	9809883a 	mov	r4,r19
    e7e8:	000f1540 	call	f154 <__clzsi2>
    e7ec:	113ffe04 	addi	r4,r2,-8
    e7f0:	00c007c4 	movi	r3,31
    e7f4:	19007b16 	blt	r3,r4,e9e4 <__subdf3+0x390>
    e7f8:	00800804 	movi	r2,32
    e7fc:	1105c83a 	sub	r2,r2,r4
    e800:	8884d83a 	srl	r2,r17,r2
    e804:	9906983a 	sll	r3,r19,r4
    e808:	8922983a 	sll	r17,r17,r4
    e80c:	10c4b03a 	or	r2,r2,r3
    e810:	24007816 	blt	r4,r16,e9f4 <__subdf3+0x3a0>
    e814:	2421c83a 	sub	r16,r4,r16
    e818:	80c00044 	addi	r3,r16,1
    e81c:	010007c4 	movi	r4,31
    e820:	20c09516 	blt	r4,r3,ea78 <__subdf3+0x424>
    e824:	01400804 	movi	r5,32
    e828:	28cbc83a 	sub	r5,r5,r3
    e82c:	88c8d83a 	srl	r4,r17,r3
    e830:	8962983a 	sll	r17,r17,r5
    e834:	114a983a 	sll	r5,r2,r5
    e838:	10c6d83a 	srl	r3,r2,r3
    e83c:	8804c03a 	cmpne	r2,r17,zero
    e840:	290ab03a 	or	r5,r5,r4
    e844:	28a2b03a 	or	r17,r5,r2
    e848:	0021883a 	mov	r16,zero
    e84c:	003fa206 	br	e6d8 <__subdf3+0x84>
    e850:	2090b03a 	or	r8,r4,r2
    e854:	40018e26 	beq	r8,zero,ee90 <__subdf3+0x83c>
    e858:	1007883a 	mov	r3,r2
    e85c:	2023883a 	mov	r17,r4
    e860:	888001cc 	andi	r2,r17,7
    e864:	103f9e1e 	bne	r2,zero,e6e0 <__subdf3+0x8c>
    e868:	1804977a 	slli	r2,r3,29
    e86c:	8822d0fa 	srli	r17,r17,3
    e870:	1810d0fa 	srli	r8,r3,3
    e874:	9100004c 	andi	r4,r18,1
    e878:	1444b03a 	or	r2,r2,r17
    e87c:	00c1ffc4 	movi	r3,2047
    e880:	80c02826 	beq	r16,r3,e924 <__subdf3+0x2d0>
    e884:	01400434 	movhi	r5,16
    e888:	297fffc4 	addi	r5,r5,-1
    e88c:	80e0703a 	and	r16,r16,r3
    e890:	414a703a 	and	r5,r8,r5
    e894:	003fa806 	br	e738 <__subdf3+0xe4>
    e898:	0080630e 	bge	zero,r2,ea28 <__subdf3+0x3d4>
    e89c:	48003026 	beq	r9,zero,e960 <__subdf3+0x30c>
    e8a0:	0101ffc4 	movi	r4,2047
    e8a4:	813f8c26 	beq	r16,r4,e6d8 <__subdf3+0x84>
    e8a8:	29402034 	orhi	r5,r5,128
    e8ac:	01000e04 	movi	r4,56
    e8b0:	2080a90e 	bge	r4,r2,eb58 <__subdf3+0x504>
    e8b4:	298cb03a 	or	r6,r5,r6
    e8b8:	3012c03a 	cmpne	r9,r6,zero
    e8bc:	0005883a 	mov	r2,zero
    e8c0:	4c53883a 	add	r9,r9,r17
    e8c4:	4c63803a 	cmpltu	r17,r9,r17
    e8c8:	10c7883a 	add	r3,r2,r3
    e8cc:	88c7883a 	add	r3,r17,r3
    e8d0:	4823883a 	mov	r17,r9
    e8d4:	1880202c 	andhi	r2,r3,128
    e8d8:	1000d026 	beq	r2,zero,ec1c <__subdf3+0x5c8>
    e8dc:	84000044 	addi	r16,r16,1
    e8e0:	0081ffc4 	movi	r2,2047
    e8e4:	8080fe26 	beq	r16,r2,ece0 <__subdf3+0x68c>
    e8e8:	00bfe034 	movhi	r2,65408
    e8ec:	10bfffc4 	addi	r2,r2,-1
    e8f0:	1886703a 	and	r3,r3,r2
    e8f4:	880ad07a 	srli	r5,r17,1
    e8f8:	180497fa 	slli	r2,r3,31
    e8fc:	8900004c 	andi	r4,r17,1
    e900:	2922b03a 	or	r17,r5,r4
    e904:	1806d07a 	srli	r3,r3,1
    e908:	1462b03a 	or	r17,r2,r17
    e90c:	3825883a 	mov	r18,r7
    e910:	003f7106 	br	e6d8 <__subdf3+0x84>
    e914:	2984b03a 	or	r2,r5,r6
    e918:	103f6826 	beq	r2,zero,e6bc <__subdf3+0x68>
    e91c:	39c03fcc 	andi	r7,r7,255
    e920:	003f6706 	br	e6c0 <__subdf3+0x6c>
    e924:	4086b03a 	or	r3,r8,r2
    e928:	18015226 	beq	r3,zero,ee74 <__subdf3+0x820>
    e92c:	00c00434 	movhi	r3,16
    e930:	41400234 	orhi	r5,r8,8
    e934:	18ffffc4 	addi	r3,r3,-1
    e938:	28ca703a 	and	r5,r5,r3
    e93c:	003f7e06 	br	e738 <__subdf3+0xe4>
    e940:	10bfffc4 	addi	r2,r2,-1
    e944:	1000491e 	bne	r2,zero,ea6c <__subdf3+0x418>
    e948:	898fc83a 	sub	r7,r17,r6
    e94c:	89e3803a 	cmpltu	r17,r17,r7
    e950:	1947c83a 	sub	r3,r3,r5
    e954:	1c47c83a 	sub	r3,r3,r17
    e958:	3823883a 	mov	r17,r7
    e95c:	003f9b06 	br	e7cc <__subdf3+0x178>
    e960:	2988b03a 	or	r4,r5,r6
    e964:	203f5c26 	beq	r4,zero,e6d8 <__subdf3+0x84>
    e968:	10bfffc4 	addi	r2,r2,-1
    e96c:	1000931e 	bne	r2,zero,ebbc <__subdf3+0x568>
    e970:	898d883a 	add	r6,r17,r6
    e974:	3463803a 	cmpltu	r17,r6,r17
    e978:	1947883a 	add	r3,r3,r5
    e97c:	88c7883a 	add	r3,r17,r3
    e980:	3023883a 	mov	r17,r6
    e984:	003fd306 	br	e8d4 <__subdf3+0x280>
    e988:	1000541e 	bne	r2,zero,eadc <__subdf3+0x488>
    e98c:	80800044 	addi	r2,r16,1
    e990:	1081ffcc 	andi	r2,r2,2047
    e994:	01000044 	movi	r4,1
    e998:	2080a20e 	bge	r4,r2,ec24 <__subdf3+0x5d0>
    e99c:	8989c83a 	sub	r4,r17,r6
    e9a0:	8905803a 	cmpltu	r2,r17,r4
    e9a4:	1967c83a 	sub	r19,r3,r5
    e9a8:	98a7c83a 	sub	r19,r19,r2
    e9ac:	9880202c 	andhi	r2,r19,128
    e9b0:	10006326 	beq	r2,zero,eb40 <__subdf3+0x4ec>
    e9b4:	3463c83a 	sub	r17,r6,r17
    e9b8:	28c7c83a 	sub	r3,r5,r3
    e9bc:	344d803a 	cmpltu	r6,r6,r17
    e9c0:	19a7c83a 	sub	r19,r3,r6
    e9c4:	3825883a 	mov	r18,r7
    e9c8:	983f861e 	bne	r19,zero,e7e4 <__subdf3+0x190>
    e9cc:	8809883a 	mov	r4,r17
    e9d0:	000f1540 	call	f154 <__clzsi2>
    e9d4:	10800804 	addi	r2,r2,32
    e9d8:	113ffe04 	addi	r4,r2,-8
    e9dc:	00c007c4 	movi	r3,31
    e9e0:	193f850e 	bge	r3,r4,e7f8 <__subdf3+0x1a4>
    e9e4:	10bff604 	addi	r2,r2,-40
    e9e8:	8884983a 	sll	r2,r17,r2
    e9ec:	0023883a 	mov	r17,zero
    e9f0:	243f880e 	bge	r4,r16,e814 <__subdf3+0x1c0>
    e9f4:	00ffe034 	movhi	r3,65408
    e9f8:	18ffffc4 	addi	r3,r3,-1
    e9fc:	8121c83a 	sub	r16,r16,r4
    ea00:	10c6703a 	and	r3,r2,r3
    ea04:	003f3406 	br	e6d8 <__subdf3+0x84>
    ea08:	9100004c 	andi	r4,r18,1
    ea0c:	000b883a 	mov	r5,zero
    ea10:	0005883a 	mov	r2,zero
    ea14:	003f4806 	br	e738 <__subdf3+0xe4>
    ea18:	298cb03a 	or	r6,r5,r6
    ea1c:	300cc03a 	cmpne	r6,r6,zero
    ea20:	0005883a 	mov	r2,zero
    ea24:	003f6406 	br	e7b8 <__subdf3+0x164>
    ea28:	10009a1e 	bne	r2,zero,ec94 <__subdf3+0x640>
    ea2c:	82400044 	addi	r9,r16,1
    ea30:	4881ffcc 	andi	r2,r9,2047
    ea34:	02800044 	movi	r10,1
    ea38:	5080670e 	bge	r10,r2,ebd8 <__subdf3+0x584>
    ea3c:	0081ffc4 	movi	r2,2047
    ea40:	4880af26 	beq	r9,r2,ed00 <__subdf3+0x6ac>
    ea44:	898d883a 	add	r6,r17,r6
    ea48:	1945883a 	add	r2,r3,r5
    ea4c:	3447803a 	cmpltu	r3,r6,r17
    ea50:	1887883a 	add	r3,r3,r2
    ea54:	182297fa 	slli	r17,r3,31
    ea58:	300cd07a 	srli	r6,r6,1
    ea5c:	1806d07a 	srli	r3,r3,1
    ea60:	4821883a 	mov	r16,r9
    ea64:	89a2b03a 	or	r17,r17,r6
    ea68:	003f1b06 	br	e6d8 <__subdf3+0x84>
    ea6c:	0101ffc4 	movi	r4,2047
    ea70:	813f441e 	bne	r16,r4,e784 <__subdf3+0x130>
    ea74:	003f1806 	br	e6d8 <__subdf3+0x84>
    ea78:	843ff844 	addi	r16,r16,-31
    ea7c:	01400804 	movi	r5,32
    ea80:	1408d83a 	srl	r4,r2,r16
    ea84:	19405026 	beq	r3,r5,ebc8 <__subdf3+0x574>
    ea88:	01401004 	movi	r5,64
    ea8c:	28c7c83a 	sub	r3,r5,r3
    ea90:	10c4983a 	sll	r2,r2,r3
    ea94:	88a2b03a 	or	r17,r17,r2
    ea98:	8822c03a 	cmpne	r17,r17,zero
    ea9c:	2462b03a 	or	r17,r4,r17
    eaa0:	0007883a 	mov	r3,zero
    eaa4:	0021883a 	mov	r16,zero
    eaa8:	003f6d06 	br	e860 <__subdf3+0x20c>
    eaac:	11fff804 	addi	r7,r2,-32
    eab0:	01000804 	movi	r4,32
    eab4:	29ced83a 	srl	r7,r5,r7
    eab8:	11004526 	beq	r2,r4,ebd0 <__subdf3+0x57c>
    eabc:	01001004 	movi	r4,64
    eac0:	2089c83a 	sub	r4,r4,r2
    eac4:	2904983a 	sll	r2,r5,r4
    eac8:	118cb03a 	or	r6,r2,r6
    eacc:	300cc03a 	cmpne	r6,r6,zero
    ead0:	398cb03a 	or	r6,r7,r6
    ead4:	0005883a 	mov	r2,zero
    ead8:	003f3706 	br	e7b8 <__subdf3+0x164>
    eadc:	80002a26 	beq	r16,zero,eb88 <__subdf3+0x534>
    eae0:	0101ffc4 	movi	r4,2047
    eae4:	49006626 	beq	r9,r4,ec80 <__subdf3+0x62c>
    eae8:	0085c83a 	sub	r2,zero,r2
    eaec:	18c02034 	orhi	r3,r3,128
    eaf0:	01000e04 	movi	r4,56
    eaf4:	20807e16 	blt	r4,r2,ecf0 <__subdf3+0x69c>
    eaf8:	010007c4 	movi	r4,31
    eafc:	2080e716 	blt	r4,r2,ee9c <__subdf3+0x848>
    eb00:	01000804 	movi	r4,32
    eb04:	2089c83a 	sub	r4,r4,r2
    eb08:	1914983a 	sll	r10,r3,r4
    eb0c:	8890d83a 	srl	r8,r17,r2
    eb10:	8908983a 	sll	r4,r17,r4
    eb14:	1884d83a 	srl	r2,r3,r2
    eb18:	5222b03a 	or	r17,r10,r8
    eb1c:	2006c03a 	cmpne	r3,r4,zero
    eb20:	88e2b03a 	or	r17,r17,r3
    eb24:	3463c83a 	sub	r17,r6,r17
    eb28:	2885c83a 	sub	r2,r5,r2
    eb2c:	344d803a 	cmpltu	r6,r6,r17
    eb30:	1187c83a 	sub	r3,r2,r6
    eb34:	4821883a 	mov	r16,r9
    eb38:	3825883a 	mov	r18,r7
    eb3c:	003f2306 	br	e7cc <__subdf3+0x178>
    eb40:	24d0b03a 	or	r8,r4,r19
    eb44:	40001b1e 	bne	r8,zero,ebb4 <__subdf3+0x560>
    eb48:	0005883a 	mov	r2,zero
    eb4c:	0009883a 	mov	r4,zero
    eb50:	0021883a 	mov	r16,zero
    eb54:	003f4906 	br	e87c <__subdf3+0x228>
    eb58:	010007c4 	movi	r4,31
    eb5c:	20803a16 	blt	r4,r2,ec48 <__subdf3+0x5f4>
    eb60:	01000804 	movi	r4,32
    eb64:	2089c83a 	sub	r4,r4,r2
    eb68:	2912983a 	sll	r9,r5,r4
    eb6c:	3090d83a 	srl	r8,r6,r2
    eb70:	3108983a 	sll	r4,r6,r4
    eb74:	2884d83a 	srl	r2,r5,r2
    eb78:	4a12b03a 	or	r9,r9,r8
    eb7c:	2008c03a 	cmpne	r4,r4,zero
    eb80:	4912b03a 	or	r9,r9,r4
    eb84:	003f4e06 	br	e8c0 <__subdf3+0x26c>
    eb88:	1c48b03a 	or	r4,r3,r17
    eb8c:	20003c26 	beq	r4,zero,ec80 <__subdf3+0x62c>
    eb90:	0084303a 	nor	r2,zero,r2
    eb94:	1000381e 	bne	r2,zero,ec78 <__subdf3+0x624>
    eb98:	3463c83a 	sub	r17,r6,r17
    eb9c:	28c5c83a 	sub	r2,r5,r3
    eba0:	344d803a 	cmpltu	r6,r6,r17
    eba4:	1187c83a 	sub	r3,r2,r6
    eba8:	4821883a 	mov	r16,r9
    ebac:	3825883a 	mov	r18,r7
    ebb0:	003f0606 	br	e7cc <__subdf3+0x178>
    ebb4:	2023883a 	mov	r17,r4
    ebb8:	003f0906 	br	e7e0 <__subdf3+0x18c>
    ebbc:	0101ffc4 	movi	r4,2047
    ebc0:	813f3a1e 	bne	r16,r4,e8ac <__subdf3+0x258>
    ebc4:	003ec406 	br	e6d8 <__subdf3+0x84>
    ebc8:	0005883a 	mov	r2,zero
    ebcc:	003fb106 	br	ea94 <__subdf3+0x440>
    ebd0:	0005883a 	mov	r2,zero
    ebd4:	003fbc06 	br	eac8 <__subdf3+0x474>
    ebd8:	1c44b03a 	or	r2,r3,r17
    ebdc:	80008e1e 	bne	r16,zero,ee18 <__subdf3+0x7c4>
    ebe0:	1000c826 	beq	r2,zero,ef04 <__subdf3+0x8b0>
    ebe4:	2984b03a 	or	r2,r5,r6
    ebe8:	103ebb26 	beq	r2,zero,e6d8 <__subdf3+0x84>
    ebec:	8989883a 	add	r4,r17,r6
    ebf0:	1945883a 	add	r2,r3,r5
    ebf4:	2447803a 	cmpltu	r3,r4,r17
    ebf8:	1887883a 	add	r3,r3,r2
    ebfc:	1880202c 	andhi	r2,r3,128
    ec00:	2023883a 	mov	r17,r4
    ec04:	103f1626 	beq	r2,zero,e860 <__subdf3+0x20c>
    ec08:	00bfe034 	movhi	r2,65408
    ec0c:	10bfffc4 	addi	r2,r2,-1
    ec10:	5021883a 	mov	r16,r10
    ec14:	1886703a 	and	r3,r3,r2
    ec18:	003eaf06 	br	e6d8 <__subdf3+0x84>
    ec1c:	3825883a 	mov	r18,r7
    ec20:	003f0f06 	br	e860 <__subdf3+0x20c>
    ec24:	1c44b03a 	or	r2,r3,r17
    ec28:	8000251e 	bne	r16,zero,ecc0 <__subdf3+0x66c>
    ec2c:	1000661e 	bne	r2,zero,edc8 <__subdf3+0x774>
    ec30:	2990b03a 	or	r8,r5,r6
    ec34:	40009626 	beq	r8,zero,ee90 <__subdf3+0x83c>
    ec38:	2807883a 	mov	r3,r5
    ec3c:	3023883a 	mov	r17,r6
    ec40:	3825883a 	mov	r18,r7
    ec44:	003ea406 	br	e6d8 <__subdf3+0x84>
    ec48:	127ff804 	addi	r9,r2,-32
    ec4c:	01000804 	movi	r4,32
    ec50:	2a52d83a 	srl	r9,r5,r9
    ec54:	11008c26 	beq	r2,r4,ee88 <__subdf3+0x834>
    ec58:	01001004 	movi	r4,64
    ec5c:	2085c83a 	sub	r2,r4,r2
    ec60:	2884983a 	sll	r2,r5,r2
    ec64:	118cb03a 	or	r6,r2,r6
    ec68:	300cc03a 	cmpne	r6,r6,zero
    ec6c:	4992b03a 	or	r9,r9,r6
    ec70:	0005883a 	mov	r2,zero
    ec74:	003f1206 	br	e8c0 <__subdf3+0x26c>
    ec78:	0101ffc4 	movi	r4,2047
    ec7c:	493f9c1e 	bne	r9,r4,eaf0 <__subdf3+0x49c>
    ec80:	2807883a 	mov	r3,r5
    ec84:	3023883a 	mov	r17,r6
    ec88:	4821883a 	mov	r16,r9
    ec8c:	3825883a 	mov	r18,r7
    ec90:	003e9106 	br	e6d8 <__subdf3+0x84>
    ec94:	80001f1e 	bne	r16,zero,ed14 <__subdf3+0x6c0>
    ec98:	1c48b03a 	or	r4,r3,r17
    ec9c:	20005a26 	beq	r4,zero,ee08 <__subdf3+0x7b4>
    eca0:	0084303a 	nor	r2,zero,r2
    eca4:	1000561e 	bne	r2,zero,ee00 <__subdf3+0x7ac>
    eca8:	89a3883a 	add	r17,r17,r6
    ecac:	1945883a 	add	r2,r3,r5
    ecb0:	898d803a 	cmpltu	r6,r17,r6
    ecb4:	3087883a 	add	r3,r6,r2
    ecb8:	4821883a 	mov	r16,r9
    ecbc:	003f0506 	br	e8d4 <__subdf3+0x280>
    ecc0:	10002b1e 	bne	r2,zero,ed70 <__subdf3+0x71c>
    ecc4:	2984b03a 	or	r2,r5,r6
    ecc8:	10008026 	beq	r2,zero,eecc <__subdf3+0x878>
    eccc:	2807883a 	mov	r3,r5
    ecd0:	3023883a 	mov	r17,r6
    ecd4:	3825883a 	mov	r18,r7
    ecd8:	0401ffc4 	movi	r16,2047
    ecdc:	003e7e06 	br	e6d8 <__subdf3+0x84>
    ece0:	3809883a 	mov	r4,r7
    ece4:	0011883a 	mov	r8,zero
    ece8:	0005883a 	mov	r2,zero
    ecec:	003ee306 	br	e87c <__subdf3+0x228>
    ecf0:	1c62b03a 	or	r17,r3,r17
    ecf4:	8822c03a 	cmpne	r17,r17,zero
    ecf8:	0005883a 	mov	r2,zero
    ecfc:	003f8906 	br	eb24 <__subdf3+0x4d0>
    ed00:	3809883a 	mov	r4,r7
    ed04:	4821883a 	mov	r16,r9
    ed08:	0011883a 	mov	r8,zero
    ed0c:	0005883a 	mov	r2,zero
    ed10:	003eda06 	br	e87c <__subdf3+0x228>
    ed14:	0101ffc4 	movi	r4,2047
    ed18:	49003b26 	beq	r9,r4,ee08 <__subdf3+0x7b4>
    ed1c:	0085c83a 	sub	r2,zero,r2
    ed20:	18c02034 	orhi	r3,r3,128
    ed24:	01000e04 	movi	r4,56
    ed28:	20806e16 	blt	r4,r2,eee4 <__subdf3+0x890>
    ed2c:	010007c4 	movi	r4,31
    ed30:	20807716 	blt	r4,r2,ef10 <__subdf3+0x8bc>
    ed34:	01000804 	movi	r4,32
    ed38:	2089c83a 	sub	r4,r4,r2
    ed3c:	1914983a 	sll	r10,r3,r4
    ed40:	8890d83a 	srl	r8,r17,r2
    ed44:	8908983a 	sll	r4,r17,r4
    ed48:	1884d83a 	srl	r2,r3,r2
    ed4c:	5222b03a 	or	r17,r10,r8
    ed50:	2006c03a 	cmpne	r3,r4,zero
    ed54:	88e2b03a 	or	r17,r17,r3
    ed58:	89a3883a 	add	r17,r17,r6
    ed5c:	1145883a 	add	r2,r2,r5
    ed60:	898d803a 	cmpltu	r6,r17,r6
    ed64:	3087883a 	add	r3,r6,r2
    ed68:	4821883a 	mov	r16,r9
    ed6c:	003ed906 	br	e8d4 <__subdf3+0x280>
    ed70:	2984b03a 	or	r2,r5,r6
    ed74:	10004226 	beq	r2,zero,ee80 <__subdf3+0x82c>
    ed78:	1808d0fa 	srli	r4,r3,3
    ed7c:	8822d0fa 	srli	r17,r17,3
    ed80:	1806977a 	slli	r3,r3,29
    ed84:	2080022c 	andhi	r2,r4,8
    ed88:	1c62b03a 	or	r17,r3,r17
    ed8c:	10000826 	beq	r2,zero,edb0 <__subdf3+0x75c>
    ed90:	2812d0fa 	srli	r9,r5,3
    ed94:	4880022c 	andhi	r2,r9,8
    ed98:	1000051e 	bne	r2,zero,edb0 <__subdf3+0x75c>
    ed9c:	300cd0fa 	srli	r6,r6,3
    eda0:	2804977a 	slli	r2,r5,29
    eda4:	4809883a 	mov	r4,r9
    eda8:	3825883a 	mov	r18,r7
    edac:	11a2b03a 	or	r17,r2,r6
    edb0:	8806d77a 	srli	r3,r17,29
    edb4:	200890fa 	slli	r4,r4,3
    edb8:	882290fa 	slli	r17,r17,3
    edbc:	0401ffc4 	movi	r16,2047
    edc0:	1906b03a 	or	r3,r3,r4
    edc4:	003e4406 	br	e6d8 <__subdf3+0x84>
    edc8:	2984b03a 	or	r2,r5,r6
    edcc:	103e4226 	beq	r2,zero,e6d8 <__subdf3+0x84>
    edd0:	8989c83a 	sub	r4,r17,r6
    edd4:	8911803a 	cmpltu	r8,r17,r4
    edd8:	1945c83a 	sub	r2,r3,r5
    eddc:	1205c83a 	sub	r2,r2,r8
    ede0:	1200202c 	andhi	r8,r2,128
    ede4:	403e9a26 	beq	r8,zero,e850 <__subdf3+0x1fc>
    ede8:	3463c83a 	sub	r17,r6,r17
    edec:	28c5c83a 	sub	r2,r5,r3
    edf0:	344d803a 	cmpltu	r6,r6,r17
    edf4:	1187c83a 	sub	r3,r2,r6
    edf8:	3825883a 	mov	r18,r7
    edfc:	003e3606 	br	e6d8 <__subdf3+0x84>
    ee00:	0101ffc4 	movi	r4,2047
    ee04:	493fc71e 	bne	r9,r4,ed24 <__subdf3+0x6d0>
    ee08:	2807883a 	mov	r3,r5
    ee0c:	3023883a 	mov	r17,r6
    ee10:	4821883a 	mov	r16,r9
    ee14:	003e3006 	br	e6d8 <__subdf3+0x84>
    ee18:	10003626 	beq	r2,zero,eef4 <__subdf3+0x8a0>
    ee1c:	2984b03a 	or	r2,r5,r6
    ee20:	10001726 	beq	r2,zero,ee80 <__subdf3+0x82c>
    ee24:	1808d0fa 	srli	r4,r3,3
    ee28:	8822d0fa 	srli	r17,r17,3
    ee2c:	1806977a 	slli	r3,r3,29
    ee30:	2080022c 	andhi	r2,r4,8
    ee34:	1c62b03a 	or	r17,r3,r17
    ee38:	10000726 	beq	r2,zero,ee58 <__subdf3+0x804>
    ee3c:	2812d0fa 	srli	r9,r5,3
    ee40:	4880022c 	andhi	r2,r9,8
    ee44:	1000041e 	bne	r2,zero,ee58 <__subdf3+0x804>
    ee48:	300cd0fa 	srli	r6,r6,3
    ee4c:	2804977a 	slli	r2,r5,29
    ee50:	4809883a 	mov	r4,r9
    ee54:	11a2b03a 	or	r17,r2,r6
    ee58:	8806d77a 	srli	r3,r17,29
    ee5c:	200890fa 	slli	r4,r4,3
    ee60:	882290fa 	slli	r17,r17,3
    ee64:	3825883a 	mov	r18,r7
    ee68:	1906b03a 	or	r3,r3,r4
    ee6c:	0401ffc4 	movi	r16,2047
    ee70:	003e1906 	br	e6d8 <__subdf3+0x84>
    ee74:	000b883a 	mov	r5,zero
    ee78:	0005883a 	mov	r2,zero
    ee7c:	003e2e06 	br	e738 <__subdf3+0xe4>
    ee80:	0401ffc4 	movi	r16,2047
    ee84:	003e1406 	br	e6d8 <__subdf3+0x84>
    ee88:	0005883a 	mov	r2,zero
    ee8c:	003f7506 	br	ec64 <__subdf3+0x610>
    ee90:	0005883a 	mov	r2,zero
    ee94:	0009883a 	mov	r4,zero
    ee98:	003e7806 	br	e87c <__subdf3+0x228>
    ee9c:	123ff804 	addi	r8,r2,-32
    eea0:	01000804 	movi	r4,32
    eea4:	1a10d83a 	srl	r8,r3,r8
    eea8:	11002526 	beq	r2,r4,ef40 <__subdf3+0x8ec>
    eeac:	01001004 	movi	r4,64
    eeb0:	2085c83a 	sub	r2,r4,r2
    eeb4:	1884983a 	sll	r2,r3,r2
    eeb8:	1444b03a 	or	r2,r2,r17
    eebc:	1004c03a 	cmpne	r2,r2,zero
    eec0:	40a2b03a 	or	r17,r8,r2
    eec4:	0005883a 	mov	r2,zero
    eec8:	003f1606 	br	eb24 <__subdf3+0x4d0>
    eecc:	02000434 	movhi	r8,16
    eed0:	0009883a 	mov	r4,zero
    eed4:	423fffc4 	addi	r8,r8,-1
    eed8:	00bfffc4 	movi	r2,-1
    eedc:	0401ffc4 	movi	r16,2047
    eee0:	003e6606 	br	e87c <__subdf3+0x228>
    eee4:	1c62b03a 	or	r17,r3,r17
    eee8:	8822c03a 	cmpne	r17,r17,zero
    eeec:	0005883a 	mov	r2,zero
    eef0:	003f9906 	br	ed58 <__subdf3+0x704>
    eef4:	2807883a 	mov	r3,r5
    eef8:	3023883a 	mov	r17,r6
    eefc:	0401ffc4 	movi	r16,2047
    ef00:	003df506 	br	e6d8 <__subdf3+0x84>
    ef04:	2807883a 	mov	r3,r5
    ef08:	3023883a 	mov	r17,r6
    ef0c:	003df206 	br	e6d8 <__subdf3+0x84>
    ef10:	123ff804 	addi	r8,r2,-32
    ef14:	01000804 	movi	r4,32
    ef18:	1a10d83a 	srl	r8,r3,r8
    ef1c:	11000a26 	beq	r2,r4,ef48 <__subdf3+0x8f4>
    ef20:	01001004 	movi	r4,64
    ef24:	2085c83a 	sub	r2,r4,r2
    ef28:	1884983a 	sll	r2,r3,r2
    ef2c:	1444b03a 	or	r2,r2,r17
    ef30:	1004c03a 	cmpne	r2,r2,zero
    ef34:	40a2b03a 	or	r17,r8,r2
    ef38:	0005883a 	mov	r2,zero
    ef3c:	003f8606 	br	ed58 <__subdf3+0x704>
    ef40:	0005883a 	mov	r2,zero
    ef44:	003fdc06 	br	eeb8 <__subdf3+0x864>
    ef48:	0005883a 	mov	r2,zero
    ef4c:	003ff706 	br	ef2c <__subdf3+0x8d8>

0000ef50 <__fixdfsi>:
    ef50:	280cd53a 	srli	r6,r5,20
    ef54:	00c00434 	movhi	r3,16
    ef58:	18ffffc4 	addi	r3,r3,-1
    ef5c:	3181ffcc 	andi	r6,r6,2047
    ef60:	01c0ff84 	movi	r7,1022
    ef64:	28c6703a 	and	r3,r5,r3
    ef68:	280ad7fa 	srli	r5,r5,31
    ef6c:	3980120e 	bge	r7,r6,efb8 <__fixdfsi+0x68>
    ef70:	00810744 	movi	r2,1053
    ef74:	11800c16 	blt	r2,r6,efa8 <__fixdfsi+0x58>
    ef78:	00810cc4 	movi	r2,1075
    ef7c:	1185c83a 	sub	r2,r2,r6
    ef80:	01c007c4 	movi	r7,31
    ef84:	18c00434 	orhi	r3,r3,16
    ef88:	38800d16 	blt	r7,r2,efc0 <__fixdfsi+0x70>
    ef8c:	31befb44 	addi	r6,r6,-1043
    ef90:	2084d83a 	srl	r2,r4,r2
    ef94:	1986983a 	sll	r3,r3,r6
    ef98:	1884b03a 	or	r2,r3,r2
    ef9c:	28000726 	beq	r5,zero,efbc <__fixdfsi+0x6c>
    efa0:	0085c83a 	sub	r2,zero,r2
    efa4:	f800283a 	ret
    efa8:	00a00034 	movhi	r2,32768
    efac:	10bfffc4 	addi	r2,r2,-1
    efb0:	2885883a 	add	r2,r5,r2
    efb4:	f800283a 	ret
    efb8:	0005883a 	mov	r2,zero
    efbc:	f800283a 	ret
    efc0:	008104c4 	movi	r2,1043
    efc4:	1185c83a 	sub	r2,r2,r6
    efc8:	1884d83a 	srl	r2,r3,r2
    efcc:	003ff306 	br	ef9c <__fixdfsi+0x4c>

0000efd0 <__floatsidf>:
    efd0:	defffd04 	addi	sp,sp,-12
    efd4:	dfc00215 	stw	ra,8(sp)
    efd8:	dc400115 	stw	r17,4(sp)
    efdc:	dc000015 	stw	r16,0(sp)
    efe0:	20002b26 	beq	r4,zero,f090 <__floatsidf+0xc0>
    efe4:	2023883a 	mov	r17,r4
    efe8:	2020d7fa 	srli	r16,r4,31
    efec:	20002d16 	blt	r4,zero,f0a4 <__floatsidf+0xd4>
    eff0:	8809883a 	mov	r4,r17
    eff4:	000f1540 	call	f154 <__clzsi2>
    eff8:	01410784 	movi	r5,1054
    effc:	288bc83a 	sub	r5,r5,r2
    f000:	01010cc4 	movi	r4,1075
    f004:	2149c83a 	sub	r4,r4,r5
    f008:	00c007c4 	movi	r3,31
    f00c:	1900160e 	bge	r3,r4,f068 <__floatsidf+0x98>
    f010:	00c104c4 	movi	r3,1043
    f014:	1947c83a 	sub	r3,r3,r5
    f018:	88c6983a 	sll	r3,r17,r3
    f01c:	00800434 	movhi	r2,16
    f020:	10bfffc4 	addi	r2,r2,-1
    f024:	1886703a 	and	r3,r3,r2
    f028:	2941ffcc 	andi	r5,r5,2047
    f02c:	800d883a 	mov	r6,r16
    f030:	0005883a 	mov	r2,zero
    f034:	280a953a 	slli	r5,r5,20
    f038:	31803fcc 	andi	r6,r6,255
    f03c:	01000434 	movhi	r4,16
    f040:	300c97fa 	slli	r6,r6,31
    f044:	213fffc4 	addi	r4,r4,-1
    f048:	1906703a 	and	r3,r3,r4
    f04c:	1946b03a 	or	r3,r3,r5
    f050:	1986b03a 	or	r3,r3,r6
    f054:	dfc00217 	ldw	ra,8(sp)
    f058:	dc400117 	ldw	r17,4(sp)
    f05c:	dc000017 	ldw	r16,0(sp)
    f060:	dec00304 	addi	sp,sp,12
    f064:	f800283a 	ret
    f068:	00c002c4 	movi	r3,11
    f06c:	1887c83a 	sub	r3,r3,r2
    f070:	88c6d83a 	srl	r3,r17,r3
    f074:	8904983a 	sll	r2,r17,r4
    f078:	01000434 	movhi	r4,16
    f07c:	213fffc4 	addi	r4,r4,-1
    f080:	2941ffcc 	andi	r5,r5,2047
    f084:	1906703a 	and	r3,r3,r4
    f088:	800d883a 	mov	r6,r16
    f08c:	003fe906 	br	f034 <__floatsidf+0x64>
    f090:	000d883a 	mov	r6,zero
    f094:	000b883a 	mov	r5,zero
    f098:	0007883a 	mov	r3,zero
    f09c:	0005883a 	mov	r2,zero
    f0a0:	003fe406 	br	f034 <__floatsidf+0x64>
    f0a4:	0123c83a 	sub	r17,zero,r4
    f0a8:	003fd106 	br	eff0 <__floatsidf+0x20>

0000f0ac <__floatunsidf>:
    f0ac:	defffe04 	addi	sp,sp,-8
    f0b0:	dc000015 	stw	r16,0(sp)
    f0b4:	dfc00115 	stw	ra,4(sp)
    f0b8:	2021883a 	mov	r16,r4
    f0bc:	20002226 	beq	r4,zero,f148 <__floatunsidf+0x9c>
    f0c0:	000f1540 	call	f154 <__clzsi2>
    f0c4:	01010784 	movi	r4,1054
    f0c8:	2089c83a 	sub	r4,r4,r2
    f0cc:	01810cc4 	movi	r6,1075
    f0d0:	310dc83a 	sub	r6,r6,r4
    f0d4:	00c007c4 	movi	r3,31
    f0d8:	1980120e 	bge	r3,r6,f124 <__floatunsidf+0x78>
    f0dc:	00c104c4 	movi	r3,1043
    f0e0:	1907c83a 	sub	r3,r3,r4
    f0e4:	80ca983a 	sll	r5,r16,r3
    f0e8:	00800434 	movhi	r2,16
    f0ec:	10bfffc4 	addi	r2,r2,-1
    f0f0:	2101ffcc 	andi	r4,r4,2047
    f0f4:	0021883a 	mov	r16,zero
    f0f8:	288a703a 	and	r5,r5,r2
    f0fc:	2008953a 	slli	r4,r4,20
    f100:	00c00434 	movhi	r3,16
    f104:	18ffffc4 	addi	r3,r3,-1
    f108:	28c6703a 	and	r3,r5,r3
    f10c:	8005883a 	mov	r2,r16
    f110:	1906b03a 	or	r3,r3,r4
    f114:	dfc00117 	ldw	ra,4(sp)
    f118:	dc000017 	ldw	r16,0(sp)
    f11c:	dec00204 	addi	sp,sp,8
    f120:	f800283a 	ret
    f124:	00c002c4 	movi	r3,11
    f128:	188bc83a 	sub	r5,r3,r2
    f12c:	814ad83a 	srl	r5,r16,r5
    f130:	00c00434 	movhi	r3,16
    f134:	18ffffc4 	addi	r3,r3,-1
    f138:	81a0983a 	sll	r16,r16,r6
    f13c:	2101ffcc 	andi	r4,r4,2047
    f140:	28ca703a 	and	r5,r5,r3
    f144:	003fed06 	br	f0fc <__floatunsidf+0x50>
    f148:	0009883a 	mov	r4,zero
    f14c:	000b883a 	mov	r5,zero
    f150:	003fea06 	br	f0fc <__floatunsidf+0x50>

0000f154 <__clzsi2>:
    f154:	00bfffd4 	movui	r2,65535
    f158:	11000536 	bltu	r2,r4,f170 <__clzsi2+0x1c>
    f15c:	00803fc4 	movi	r2,255
    f160:	11000f36 	bltu	r2,r4,f1a0 <__clzsi2+0x4c>
    f164:	00800804 	movi	r2,32
    f168:	0007883a 	mov	r3,zero
    f16c:	00000506 	br	f184 <__clzsi2+0x30>
    f170:	00804034 	movhi	r2,256
    f174:	10bfffc4 	addi	r2,r2,-1
    f178:	11000c2e 	bgeu	r2,r4,f1ac <__clzsi2+0x58>
    f17c:	00800204 	movi	r2,8
    f180:	00c00604 	movi	r3,24
    f184:	20c8d83a 	srl	r4,r4,r3
    f188:	00c00074 	movhi	r3,1
    f18c:	18c8cb04 	addi	r3,r3,9004
    f190:	1909883a 	add	r4,r3,r4
    f194:	20c00003 	ldbu	r3,0(r4)
    f198:	10c5c83a 	sub	r2,r2,r3
    f19c:	f800283a 	ret
    f1a0:	00800604 	movi	r2,24
    f1a4:	00c00204 	movi	r3,8
    f1a8:	003ff606 	br	f184 <__clzsi2+0x30>
    f1ac:	00800404 	movi	r2,16
    f1b0:	1007883a 	mov	r3,r2
    f1b4:	003ff306 	br	f184 <__clzsi2+0x30>

0000f1b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f1b8:	defffe04 	addi	sp,sp,-8
    f1bc:	dfc00115 	stw	ra,4(sp)
    f1c0:	df000015 	stw	fp,0(sp)
    f1c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f1c8:	d0a00b17 	ldw	r2,-32724(gp)
    f1cc:	10000326 	beq	r2,zero,f1dc <alt_get_errno+0x24>
    f1d0:	d0a00b17 	ldw	r2,-32724(gp)
    f1d4:	103ee83a 	callr	r2
    f1d8:	00000106 	br	f1e0 <alt_get_errno+0x28>
    f1dc:	d0a6d204 	addi	r2,gp,-25784
}
    f1e0:	e037883a 	mov	sp,fp
    f1e4:	dfc00117 	ldw	ra,4(sp)
    f1e8:	df000017 	ldw	fp,0(sp)
    f1ec:	dec00204 	addi	sp,sp,8
    f1f0:	f800283a 	ret

0000f1f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f1f4:	defffb04 	addi	sp,sp,-20
    f1f8:	dfc00415 	stw	ra,16(sp)
    f1fc:	df000315 	stw	fp,12(sp)
    f200:	df000304 	addi	fp,sp,12
    f204:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f208:	e0bfff17 	ldw	r2,-4(fp)
    f20c:	10000816 	blt	r2,zero,f230 <close+0x3c>
    f210:	01400304 	movi	r5,12
    f214:	e13fff17 	ldw	r4,-4(fp)
    f218:	000c8ec0 	call	c8ec <__mulsi3>
    f21c:	1007883a 	mov	r3,r2
    f220:	00800074 	movhi	r2,1
    f224:	108b4b04 	addi	r2,r2,11564
    f228:	1885883a 	add	r2,r3,r2
    f22c:	00000106 	br	f234 <close+0x40>
    f230:	0005883a 	mov	r2,zero
    f234:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f238:	e0bffd17 	ldw	r2,-12(fp)
    f23c:	10001926 	beq	r2,zero,f2a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f240:	e0bffd17 	ldw	r2,-12(fp)
    f244:	10800017 	ldw	r2,0(r2)
    f248:	10800417 	ldw	r2,16(r2)
    f24c:	10000626 	beq	r2,zero,f268 <close+0x74>
    f250:	e0bffd17 	ldw	r2,-12(fp)
    f254:	10800017 	ldw	r2,0(r2)
    f258:	10800417 	ldw	r2,16(r2)
    f25c:	e13ffd17 	ldw	r4,-12(fp)
    f260:	103ee83a 	callr	r2
    f264:	00000106 	br	f26c <close+0x78>
    f268:	0005883a 	mov	r2,zero
    f26c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f270:	e13fff17 	ldw	r4,-4(fp)
    f274:	000f8dc0 	call	f8dc <alt_release_fd>
    if (rval < 0)
    f278:	e0bffe17 	ldw	r2,-8(fp)
    f27c:	1000070e 	bge	r2,zero,f29c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    f280:	000f1b80 	call	f1b8 <alt_get_errno>
    f284:	1007883a 	mov	r3,r2
    f288:	e0bffe17 	ldw	r2,-8(fp)
    f28c:	0085c83a 	sub	r2,zero,r2
    f290:	18800015 	stw	r2,0(r3)
      return -1;
    f294:	00bfffc4 	movi	r2,-1
    f298:	00000706 	br	f2b8 <close+0xc4>
    }
    return 0;
    f29c:	0005883a 	mov	r2,zero
    f2a0:	00000506 	br	f2b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f2a4:	000f1b80 	call	f1b8 <alt_get_errno>
    f2a8:	1007883a 	mov	r3,r2
    f2ac:	00801444 	movi	r2,81
    f2b0:	18800015 	stw	r2,0(r3)
    return -1;
    f2b4:	00bfffc4 	movi	r2,-1
  }
}
    f2b8:	e037883a 	mov	sp,fp
    f2bc:	dfc00117 	ldw	ra,4(sp)
    f2c0:	df000017 	ldw	fp,0(sp)
    f2c4:	dec00204 	addi	sp,sp,8
    f2c8:	f800283a 	ret

0000f2cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f2cc:	defffc04 	addi	sp,sp,-16
    f2d0:	df000315 	stw	fp,12(sp)
    f2d4:	df000304 	addi	fp,sp,12
    f2d8:	e13ffd15 	stw	r4,-12(fp)
    f2dc:	e17ffe15 	stw	r5,-8(fp)
    f2e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f2e4:	e0bfff17 	ldw	r2,-4(fp)
}
    f2e8:	e037883a 	mov	sp,fp
    f2ec:	df000017 	ldw	fp,0(sp)
    f2f0:	dec00104 	addi	sp,sp,4
    f2f4:	f800283a 	ret

0000f2f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2f8:	defffe04 	addi	sp,sp,-8
    f2fc:	dfc00115 	stw	ra,4(sp)
    f300:	df000015 	stw	fp,0(sp)
    f304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f308:	d0a00b17 	ldw	r2,-32724(gp)
    f30c:	10000326 	beq	r2,zero,f31c <alt_get_errno+0x24>
    f310:	d0a00b17 	ldw	r2,-32724(gp)
    f314:	103ee83a 	callr	r2
    f318:	00000106 	br	f320 <alt_get_errno+0x28>
    f31c:	d0a6d204 	addi	r2,gp,-25784
}
    f320:	e037883a 	mov	sp,fp
    f324:	dfc00117 	ldw	ra,4(sp)
    f328:	df000017 	ldw	fp,0(sp)
    f32c:	dec00204 	addi	sp,sp,8
    f330:	f800283a 	ret

0000f334 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f334:	defffb04 	addi	sp,sp,-20
    f338:	dfc00415 	stw	ra,16(sp)
    f33c:	df000315 	stw	fp,12(sp)
    f340:	df000304 	addi	fp,sp,12
    f344:	e13ffe15 	stw	r4,-8(fp)
    f348:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f34c:	e0bffe17 	ldw	r2,-8(fp)
    f350:	10000816 	blt	r2,zero,f374 <fstat+0x40>
    f354:	01400304 	movi	r5,12
    f358:	e13ffe17 	ldw	r4,-8(fp)
    f35c:	000c8ec0 	call	c8ec <__mulsi3>
    f360:	1007883a 	mov	r3,r2
    f364:	00800074 	movhi	r2,1
    f368:	108b4b04 	addi	r2,r2,11564
    f36c:	1885883a 	add	r2,r3,r2
    f370:	00000106 	br	f378 <fstat+0x44>
    f374:	0005883a 	mov	r2,zero
    f378:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f37c:	e0bffd17 	ldw	r2,-12(fp)
    f380:	10001026 	beq	r2,zero,f3c4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f384:	e0bffd17 	ldw	r2,-12(fp)
    f388:	10800017 	ldw	r2,0(r2)
    f38c:	10800817 	ldw	r2,32(r2)
    f390:	10000726 	beq	r2,zero,f3b0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    f394:	e0bffd17 	ldw	r2,-12(fp)
    f398:	10800017 	ldw	r2,0(r2)
    f39c:	10800817 	ldw	r2,32(r2)
    f3a0:	e17fff17 	ldw	r5,-4(fp)
    f3a4:	e13ffd17 	ldw	r4,-12(fp)
    f3a8:	103ee83a 	callr	r2
    f3ac:	00000a06 	br	f3d8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f3b0:	e0bfff17 	ldw	r2,-4(fp)
    f3b4:	00c80004 	movi	r3,8192
    f3b8:	10c00115 	stw	r3,4(r2)
      return 0;
    f3bc:	0005883a 	mov	r2,zero
    f3c0:	00000506 	br	f3d8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f3c4:	000f2f80 	call	f2f8 <alt_get_errno>
    f3c8:	1007883a 	mov	r3,r2
    f3cc:	00801444 	movi	r2,81
    f3d0:	18800015 	stw	r2,0(r3)
    return -1;
    f3d4:	00bfffc4 	movi	r2,-1
  }
}
    f3d8:	e037883a 	mov	sp,fp
    f3dc:	dfc00117 	ldw	ra,4(sp)
    f3e0:	df000017 	ldw	fp,0(sp)
    f3e4:	dec00204 	addi	sp,sp,8
    f3e8:	f800283a 	ret

0000f3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3ec:	defffe04 	addi	sp,sp,-8
    f3f0:	dfc00115 	stw	ra,4(sp)
    f3f4:	df000015 	stw	fp,0(sp)
    f3f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3fc:	d0a00b17 	ldw	r2,-32724(gp)
    f400:	10000326 	beq	r2,zero,f410 <alt_get_errno+0x24>
    f404:	d0a00b17 	ldw	r2,-32724(gp)
    f408:	103ee83a 	callr	r2
    f40c:	00000106 	br	f414 <alt_get_errno+0x28>
    f410:	d0a6d204 	addi	r2,gp,-25784
}
    f414:	e037883a 	mov	sp,fp
    f418:	dfc00117 	ldw	ra,4(sp)
    f41c:	df000017 	ldw	fp,0(sp)
    f420:	dec00204 	addi	sp,sp,8
    f424:	f800283a 	ret

0000f428 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f428:	deffed04 	addi	sp,sp,-76
    f42c:	dfc01215 	stw	ra,72(sp)
    f430:	df001115 	stw	fp,68(sp)
    f434:	df001104 	addi	fp,sp,68
    f438:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f43c:	e0bfff17 	ldw	r2,-4(fp)
    f440:	10000816 	blt	r2,zero,f464 <isatty+0x3c>
    f444:	01400304 	movi	r5,12
    f448:	e13fff17 	ldw	r4,-4(fp)
    f44c:	000c8ec0 	call	c8ec <__mulsi3>
    f450:	1007883a 	mov	r3,r2
    f454:	00800074 	movhi	r2,1
    f458:	108b4b04 	addi	r2,r2,11564
    f45c:	1885883a 	add	r2,r3,r2
    f460:	00000106 	br	f468 <isatty+0x40>
    f464:	0005883a 	mov	r2,zero
    f468:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f46c:	e0bfef17 	ldw	r2,-68(fp)
    f470:	10000e26 	beq	r2,zero,f4ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f474:	e0bfef17 	ldw	r2,-68(fp)
    f478:	10800017 	ldw	r2,0(r2)
    f47c:	10800817 	ldw	r2,32(r2)
    f480:	1000021e 	bne	r2,zero,f48c <isatty+0x64>
    {
      return 1;
    f484:	00800044 	movi	r2,1
    f488:	00000d06 	br	f4c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f48c:	e0bff004 	addi	r2,fp,-64
    f490:	100b883a 	mov	r5,r2
    f494:	e13fff17 	ldw	r4,-4(fp)
    f498:	000f3340 	call	f334 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f49c:	e0bff117 	ldw	r2,-60(fp)
    f4a0:	10880020 	cmpeqi	r2,r2,8192
    f4a4:	10803fcc 	andi	r2,r2,255
    f4a8:	00000506 	br	f4c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4ac:	000f3ec0 	call	f3ec <alt_get_errno>
    f4b0:	1007883a 	mov	r3,r2
    f4b4:	00801444 	movi	r2,81
    f4b8:	18800015 	stw	r2,0(r3)
    return 0;
    f4bc:	0005883a 	mov	r2,zero
  }
}
    f4c0:	e037883a 	mov	sp,fp
    f4c4:	dfc00117 	ldw	ra,4(sp)
    f4c8:	df000017 	ldw	fp,0(sp)
    f4cc:	dec00204 	addi	sp,sp,8
    f4d0:	f800283a 	ret

0000f4d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f4d4:	defffc04 	addi	sp,sp,-16
    f4d8:	df000315 	stw	fp,12(sp)
    f4dc:	df000304 	addi	fp,sp,12
    f4e0:	e13ffd15 	stw	r4,-12(fp)
    f4e4:	e17ffe15 	stw	r5,-8(fp)
    f4e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f4ec:	e0fffe17 	ldw	r3,-8(fp)
    f4f0:	e0bffd17 	ldw	r2,-12(fp)
    f4f4:	18800c26 	beq	r3,r2,f528 <alt_load_section+0x54>
  {
    while( to != end )
    f4f8:	00000806 	br	f51c <alt_load_section+0x48>
    {
      *to++ = *from++;
    f4fc:	e0bffe17 	ldw	r2,-8(fp)
    f500:	10c00104 	addi	r3,r2,4
    f504:	e0fffe15 	stw	r3,-8(fp)
    f508:	e0fffd17 	ldw	r3,-12(fp)
    f50c:	19000104 	addi	r4,r3,4
    f510:	e13ffd15 	stw	r4,-12(fp)
    f514:	18c00017 	ldw	r3,0(r3)
    f518:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f51c:	e0fffe17 	ldw	r3,-8(fp)
    f520:	e0bfff17 	ldw	r2,-4(fp)
    f524:	18bff51e 	bne	r3,r2,f4fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    f528:	0001883a 	nop
    f52c:	e037883a 	mov	sp,fp
    f530:	df000017 	ldw	fp,0(sp)
    f534:	dec00104 	addi	sp,sp,4
    f538:	f800283a 	ret

0000f53c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f53c:	defffe04 	addi	sp,sp,-8
    f540:	dfc00115 	stw	ra,4(sp)
    f544:	df000015 	stw	fp,0(sp)
    f548:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f54c:	01800074 	movhi	r6,1
    f550:	318fd304 	addi	r6,r6,16204
    f554:	01400074 	movhi	r5,1
    f558:	29491804 	addi	r5,r5,9312
    f55c:	01000074 	movhi	r4,1
    f560:	210fd304 	addi	r4,r4,16204
    f564:	000f4d40 	call	f4d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f568:	01800034 	movhi	r6,0
    f56c:	31808c04 	addi	r6,r6,560
    f570:	01400034 	movhi	r5,0
    f574:	29400804 	addi	r5,r5,32
    f578:	01000034 	movhi	r4,0
    f57c:	21000804 	addi	r4,r4,32
    f580:	000f4d40 	call	f4d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f584:	01800074 	movhi	r6,1
    f588:	31891804 	addi	r6,r6,9312
    f58c:	01400074 	movhi	r5,1
    f590:	29467604 	addi	r5,r5,6616
    f594:	01000074 	movhi	r4,1
    f598:	21067604 	addi	r4,r4,6616
    f59c:	000f4d40 	call	f4d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f5a0:	00109200 	call	10920 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f5a4:	0010ae00 	call	10ae0 <alt_icache_flush_all>
}
    f5a8:	0001883a 	nop
    f5ac:	e037883a 	mov	sp,fp
    f5b0:	dfc00117 	ldw	ra,4(sp)
    f5b4:	df000017 	ldw	fp,0(sp)
    f5b8:	dec00204 	addi	sp,sp,8
    f5bc:	f800283a 	ret

0000f5c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f5c0:	defffe04 	addi	sp,sp,-8
    f5c4:	dfc00115 	stw	ra,4(sp)
    f5c8:	df000015 	stw	fp,0(sp)
    f5cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f5d0:	d0a00b17 	ldw	r2,-32724(gp)
    f5d4:	10000326 	beq	r2,zero,f5e4 <alt_get_errno+0x24>
    f5d8:	d0a00b17 	ldw	r2,-32724(gp)
    f5dc:	103ee83a 	callr	r2
    f5e0:	00000106 	br	f5e8 <alt_get_errno+0x28>
    f5e4:	d0a6d204 	addi	r2,gp,-25784
}
    f5e8:	e037883a 	mov	sp,fp
    f5ec:	dfc00117 	ldw	ra,4(sp)
    f5f0:	df000017 	ldw	fp,0(sp)
    f5f4:	dec00204 	addi	sp,sp,8
    f5f8:	f800283a 	ret

0000f5fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f5fc:	defff904 	addi	sp,sp,-28
    f600:	dfc00615 	stw	ra,24(sp)
    f604:	df000515 	stw	fp,20(sp)
    f608:	df000504 	addi	fp,sp,20
    f60c:	e13ffd15 	stw	r4,-12(fp)
    f610:	e17ffe15 	stw	r5,-8(fp)
    f614:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f618:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f61c:	e0bffd17 	ldw	r2,-12(fp)
    f620:	10000816 	blt	r2,zero,f644 <lseek+0x48>
    f624:	01400304 	movi	r5,12
    f628:	e13ffd17 	ldw	r4,-12(fp)
    f62c:	000c8ec0 	call	c8ec <__mulsi3>
    f630:	1007883a 	mov	r3,r2
    f634:	00800074 	movhi	r2,1
    f638:	108b4b04 	addi	r2,r2,11564
    f63c:	1885883a 	add	r2,r3,r2
    f640:	00000106 	br	f648 <lseek+0x4c>
    f644:	0005883a 	mov	r2,zero
    f648:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f64c:	e0bffc17 	ldw	r2,-16(fp)
    f650:	10001026 	beq	r2,zero,f694 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f654:	e0bffc17 	ldw	r2,-16(fp)
    f658:	10800017 	ldw	r2,0(r2)
    f65c:	10800717 	ldw	r2,28(r2)
    f660:	10000926 	beq	r2,zero,f688 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f664:	e0bffc17 	ldw	r2,-16(fp)
    f668:	10800017 	ldw	r2,0(r2)
    f66c:	10800717 	ldw	r2,28(r2)
    f670:	e1bfff17 	ldw	r6,-4(fp)
    f674:	e17ffe17 	ldw	r5,-8(fp)
    f678:	e13ffc17 	ldw	r4,-16(fp)
    f67c:	103ee83a 	callr	r2
    f680:	e0bffb15 	stw	r2,-20(fp)
    f684:	00000506 	br	f69c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f688:	00bfde84 	movi	r2,-134
    f68c:	e0bffb15 	stw	r2,-20(fp)
    f690:	00000206 	br	f69c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f694:	00bfebc4 	movi	r2,-81
    f698:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f69c:	e0bffb17 	ldw	r2,-20(fp)
    f6a0:	1000070e 	bge	r2,zero,f6c0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f6a4:	000f5c00 	call	f5c0 <alt_get_errno>
    f6a8:	1007883a 	mov	r3,r2
    f6ac:	e0bffb17 	ldw	r2,-20(fp)
    f6b0:	0085c83a 	sub	r2,zero,r2
    f6b4:	18800015 	stw	r2,0(r3)
    rc = -1;
    f6b8:	00bfffc4 	movi	r2,-1
    f6bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f6c0:	e0bffb17 	ldw	r2,-20(fp)
}
    f6c4:	e037883a 	mov	sp,fp
    f6c8:	dfc00117 	ldw	ra,4(sp)
    f6cc:	df000017 	ldw	fp,0(sp)
    f6d0:	dec00204 	addi	sp,sp,8
    f6d4:	f800283a 	ret

0000f6d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f6d8:	defffd04 	addi	sp,sp,-12
    f6dc:	dfc00215 	stw	ra,8(sp)
    f6e0:	df000115 	stw	fp,4(sp)
    f6e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f6e8:	0009883a 	mov	r4,zero
    f6ec:	000fbb00 	call	fbb0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f6f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f6f4:	000fbe80 	call	fbe8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f6f8:	01800074 	movhi	r6,1
    f6fc:	31890e04 	addi	r6,r6,9272
    f700:	01400074 	movhi	r5,1
    f704:	29490e04 	addi	r5,r5,9272
    f708:	01000074 	movhi	r4,1
    f70c:	21090e04 	addi	r4,r4,9272
    f710:	0010e840 	call	10e84 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f714:	0010a200 	call	10a20 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f718:	01000074 	movhi	r4,1
    f71c:	2102a004 	addi	r4,r4,2688
    f720:	00116440 	call	11644 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f724:	d0a6d317 	ldw	r2,-25780(gp)
    f728:	d0e6d417 	ldw	r3,-25776(gp)
    f72c:	d126d517 	ldw	r4,-25772(gp)
    f730:	200d883a 	mov	r6,r4
    f734:	180b883a 	mov	r5,r3
    f738:	1009883a 	mov	r4,r2
    f73c:	00003a00 	call	3a0 <main>
    f740:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f744:	01000044 	movi	r4,1
    f748:	000f1f40 	call	f1f4 <close>
  exit (result);
    f74c:	e13fff17 	ldw	r4,-4(fp)
    f750:	00116580 	call	11658 <exit>

0000f754 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f754:	defffe04 	addi	sp,sp,-8
    f758:	df000115 	stw	fp,4(sp)
    f75c:	df000104 	addi	fp,sp,4
    f760:	e13fff15 	stw	r4,-4(fp)
}
    f764:	0001883a 	nop
    f768:	e037883a 	mov	sp,fp
    f76c:	df000017 	ldw	fp,0(sp)
    f770:	dec00104 	addi	sp,sp,4
    f774:	f800283a 	ret

0000f778 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f778:	defffe04 	addi	sp,sp,-8
    f77c:	df000115 	stw	fp,4(sp)
    f780:	df000104 	addi	fp,sp,4
    f784:	e13fff15 	stw	r4,-4(fp)
}
    f788:	0001883a 	nop
    f78c:	e037883a 	mov	sp,fp
    f790:	df000017 	ldw	fp,0(sp)
    f794:	dec00104 	addi	sp,sp,4
    f798:	f800283a 	ret

0000f79c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f79c:	defffe04 	addi	sp,sp,-8
    f7a0:	dfc00115 	stw	ra,4(sp)
    f7a4:	df000015 	stw	fp,0(sp)
    f7a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f7ac:	d0a00b17 	ldw	r2,-32724(gp)
    f7b0:	10000326 	beq	r2,zero,f7c0 <alt_get_errno+0x24>
    f7b4:	d0a00b17 	ldw	r2,-32724(gp)
    f7b8:	103ee83a 	callr	r2
    f7bc:	00000106 	br	f7c4 <alt_get_errno+0x28>
    f7c0:	d0a6d204 	addi	r2,gp,-25784
}
    f7c4:	e037883a 	mov	sp,fp
    f7c8:	dfc00117 	ldw	ra,4(sp)
    f7cc:	df000017 	ldw	fp,0(sp)
    f7d0:	dec00204 	addi	sp,sp,8
    f7d4:	f800283a 	ret

0000f7d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f7d8:	defff904 	addi	sp,sp,-28
    f7dc:	dfc00615 	stw	ra,24(sp)
    f7e0:	df000515 	stw	fp,20(sp)
    f7e4:	df000504 	addi	fp,sp,20
    f7e8:	e13ffd15 	stw	r4,-12(fp)
    f7ec:	e17ffe15 	stw	r5,-8(fp)
    f7f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f7f4:	e0bffd17 	ldw	r2,-12(fp)
    f7f8:	10000816 	blt	r2,zero,f81c <read+0x44>
    f7fc:	01400304 	movi	r5,12
    f800:	e13ffd17 	ldw	r4,-12(fp)
    f804:	000c8ec0 	call	c8ec <__mulsi3>
    f808:	1007883a 	mov	r3,r2
    f80c:	00800074 	movhi	r2,1
    f810:	108b4b04 	addi	r2,r2,11564
    f814:	1885883a 	add	r2,r3,r2
    f818:	00000106 	br	f820 <read+0x48>
    f81c:	0005883a 	mov	r2,zero
    f820:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f824:	e0bffb17 	ldw	r2,-20(fp)
    f828:	10002226 	beq	r2,zero,f8b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f82c:	e0bffb17 	ldw	r2,-20(fp)
    f830:	10800217 	ldw	r2,8(r2)
    f834:	108000cc 	andi	r2,r2,3
    f838:	10800060 	cmpeqi	r2,r2,1
    f83c:	1000181e 	bne	r2,zero,f8a0 <read+0xc8>
        (fd->dev->read))
    f840:	e0bffb17 	ldw	r2,-20(fp)
    f844:	10800017 	ldw	r2,0(r2)
    f848:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f84c:	10001426 	beq	r2,zero,f8a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f850:	e0bffb17 	ldw	r2,-20(fp)
    f854:	10800017 	ldw	r2,0(r2)
    f858:	10800517 	ldw	r2,20(r2)
    f85c:	e0ffff17 	ldw	r3,-4(fp)
    f860:	180d883a 	mov	r6,r3
    f864:	e17ffe17 	ldw	r5,-8(fp)
    f868:	e13ffb17 	ldw	r4,-20(fp)
    f86c:	103ee83a 	callr	r2
    f870:	e0bffc15 	stw	r2,-16(fp)
    f874:	e0bffc17 	ldw	r2,-16(fp)
    f878:	1000070e 	bge	r2,zero,f898 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f87c:	000f79c0 	call	f79c <alt_get_errno>
    f880:	1007883a 	mov	r3,r2
    f884:	e0bffc17 	ldw	r2,-16(fp)
    f888:	0085c83a 	sub	r2,zero,r2
    f88c:	18800015 	stw	r2,0(r3)
          return -1;
    f890:	00bfffc4 	movi	r2,-1
    f894:	00000c06 	br	f8c8 <read+0xf0>
        }
        return rval;
    f898:	e0bffc17 	ldw	r2,-16(fp)
    f89c:	00000a06 	br	f8c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f8a0:	000f79c0 	call	f79c <alt_get_errno>
    f8a4:	1007883a 	mov	r3,r2
    f8a8:	00800344 	movi	r2,13
    f8ac:	18800015 	stw	r2,0(r3)
    f8b0:	00000406 	br	f8c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f8b4:	000f79c0 	call	f79c <alt_get_errno>
    f8b8:	1007883a 	mov	r3,r2
    f8bc:	00801444 	movi	r2,81
    f8c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f8c4:	00bfffc4 	movi	r2,-1
}
    f8c8:	e037883a 	mov	sp,fp
    f8cc:	dfc00117 	ldw	ra,4(sp)
    f8d0:	df000017 	ldw	fp,0(sp)
    f8d4:	dec00204 	addi	sp,sp,8
    f8d8:	f800283a 	ret

0000f8dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f8dc:	defffc04 	addi	sp,sp,-16
    f8e0:	dfc00315 	stw	ra,12(sp)
    f8e4:	df000215 	stw	fp,8(sp)
    f8e8:	dc000115 	stw	r16,4(sp)
    f8ec:	df000204 	addi	fp,sp,8
    f8f0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    f8f4:	e0bffe17 	ldw	r2,-8(fp)
    f8f8:	108000d0 	cmplti	r2,r2,3
    f8fc:	1000111e 	bne	r2,zero,f944 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    f900:	04000074 	movhi	r16,1
    f904:	840b4b04 	addi	r16,r16,11564
    f908:	e0bffe17 	ldw	r2,-8(fp)
    f90c:	01400304 	movi	r5,12
    f910:	1009883a 	mov	r4,r2
    f914:	000c8ec0 	call	c8ec <__mulsi3>
    f918:	8085883a 	add	r2,r16,r2
    f91c:	10800204 	addi	r2,r2,8
    f920:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f924:	04000074 	movhi	r16,1
    f928:	840b4b04 	addi	r16,r16,11564
    f92c:	e0bffe17 	ldw	r2,-8(fp)
    f930:	01400304 	movi	r5,12
    f934:	1009883a 	mov	r4,r2
    f938:	000c8ec0 	call	c8ec <__mulsi3>
    f93c:	8085883a 	add	r2,r16,r2
    f940:	10000015 	stw	zero,0(r2)
  }
}
    f944:	0001883a 	nop
    f948:	e6ffff04 	addi	sp,fp,-4
    f94c:	dfc00217 	ldw	ra,8(sp)
    f950:	df000117 	ldw	fp,4(sp)
    f954:	dc000017 	ldw	r16,0(sp)
    f958:	dec00304 	addi	sp,sp,12
    f95c:	f800283a 	ret

0000f960 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f960:	defff904 	addi	sp,sp,-28
    f964:	df000615 	stw	fp,24(sp)
    f968:	df000604 	addi	fp,sp,24
    f96c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f970:	0005303a 	rdctl	r2,status
    f974:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f978:	e0fffe17 	ldw	r3,-8(fp)
    f97c:	00bfff84 	movi	r2,-2
    f980:	1884703a 	and	r2,r3,r2
    f984:	1001703a 	wrctl	status,r2
  
  return context;
    f988:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f98c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f990:	d0a00c17 	ldw	r2,-32720(gp)
    f994:	10c000c4 	addi	r3,r2,3
    f998:	00bfff04 	movi	r2,-4
    f99c:	1884703a 	and	r2,r3,r2
    f9a0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f9a4:	d0e00c17 	ldw	r3,-32720(gp)
    f9a8:	e0bfff17 	ldw	r2,-4(fp)
    f9ac:	1887883a 	add	r3,r3,r2
    f9b0:	00820034 	movhi	r2,2048
    f9b4:	10800004 	addi	r2,r2,0
    f9b8:	10c0062e 	bgeu	r2,r3,f9d4 <sbrk+0x74>
    f9bc:	e0bffb17 	ldw	r2,-20(fp)
    f9c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9c4:	e0bffa17 	ldw	r2,-24(fp)
    f9c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f9cc:	00bfffc4 	movi	r2,-1
    f9d0:	00000b06 	br	fa00 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f9d4:	d0a00c17 	ldw	r2,-32720(gp)
    f9d8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f9dc:	d0e00c17 	ldw	r3,-32720(gp)
    f9e0:	e0bfff17 	ldw	r2,-4(fp)
    f9e4:	1885883a 	add	r2,r3,r2
    f9e8:	d0a00c15 	stw	r2,-32720(gp)
    f9ec:	e0bffb17 	ldw	r2,-20(fp)
    f9f0:	e0bffc15 	stw	r2,-16(fp)
    f9f4:	e0bffc17 	ldw	r2,-16(fp)
    f9f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f9fc:	e0bffd17 	ldw	r2,-12(fp)
} 
    fa00:	e037883a 	mov	sp,fp
    fa04:	df000017 	ldw	fp,0(sp)
    fa08:	dec00104 	addi	sp,sp,4
    fa0c:	f800283a 	ret

0000fa10 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fa10:	defffd04 	addi	sp,sp,-12
    fa14:	dfc00215 	stw	ra,8(sp)
    fa18:	df000115 	stw	fp,4(sp)
    fa1c:	df000104 	addi	fp,sp,4
    fa20:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fa24:	e13fff17 	ldw	r4,-4(fp)
    fa28:	00107c80 	call	107c8 <alt_busy_sleep>
}
    fa2c:	e037883a 	mov	sp,fp
    fa30:	dfc00117 	ldw	ra,4(sp)
    fa34:	df000017 	ldw	fp,0(sp)
    fa38:	dec00204 	addi	sp,sp,8
    fa3c:	f800283a 	ret

0000fa40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fa40:	defffe04 	addi	sp,sp,-8
    fa44:	dfc00115 	stw	ra,4(sp)
    fa48:	df000015 	stw	fp,0(sp)
    fa4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa50:	d0a00b17 	ldw	r2,-32724(gp)
    fa54:	10000326 	beq	r2,zero,fa64 <alt_get_errno+0x24>
    fa58:	d0a00b17 	ldw	r2,-32724(gp)
    fa5c:	103ee83a 	callr	r2
    fa60:	00000106 	br	fa68 <alt_get_errno+0x28>
    fa64:	d0a6d204 	addi	r2,gp,-25784
}
    fa68:	e037883a 	mov	sp,fp
    fa6c:	dfc00117 	ldw	ra,4(sp)
    fa70:	df000017 	ldw	fp,0(sp)
    fa74:	dec00204 	addi	sp,sp,8
    fa78:	f800283a 	ret

0000fa7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fa7c:	defff904 	addi	sp,sp,-28
    fa80:	dfc00615 	stw	ra,24(sp)
    fa84:	df000515 	stw	fp,20(sp)
    fa88:	df000504 	addi	fp,sp,20
    fa8c:	e13ffd15 	stw	r4,-12(fp)
    fa90:	e17ffe15 	stw	r5,-8(fp)
    fa94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa98:	e0bffd17 	ldw	r2,-12(fp)
    fa9c:	10000816 	blt	r2,zero,fac0 <write+0x44>
    faa0:	01400304 	movi	r5,12
    faa4:	e13ffd17 	ldw	r4,-12(fp)
    faa8:	000c8ec0 	call	c8ec <__mulsi3>
    faac:	1007883a 	mov	r3,r2
    fab0:	00800074 	movhi	r2,1
    fab4:	108b4b04 	addi	r2,r2,11564
    fab8:	1885883a 	add	r2,r3,r2
    fabc:	00000106 	br	fac4 <write+0x48>
    fac0:	0005883a 	mov	r2,zero
    fac4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fac8:	e0bffb17 	ldw	r2,-20(fp)
    facc:	10002126 	beq	r2,zero,fb54 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fad0:	e0bffb17 	ldw	r2,-20(fp)
    fad4:	10800217 	ldw	r2,8(r2)
    fad8:	108000cc 	andi	r2,r2,3
    fadc:	10001826 	beq	r2,zero,fb40 <write+0xc4>
    fae0:	e0bffb17 	ldw	r2,-20(fp)
    fae4:	10800017 	ldw	r2,0(r2)
    fae8:	10800617 	ldw	r2,24(r2)
    faec:	10001426 	beq	r2,zero,fb40 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    faf0:	e0bffb17 	ldw	r2,-20(fp)
    faf4:	10800017 	ldw	r2,0(r2)
    faf8:	10800617 	ldw	r2,24(r2)
    fafc:	e0ffff17 	ldw	r3,-4(fp)
    fb00:	180d883a 	mov	r6,r3
    fb04:	e17ffe17 	ldw	r5,-8(fp)
    fb08:	e13ffb17 	ldw	r4,-20(fp)
    fb0c:	103ee83a 	callr	r2
    fb10:	e0bffc15 	stw	r2,-16(fp)
    fb14:	e0bffc17 	ldw	r2,-16(fp)
    fb18:	1000070e 	bge	r2,zero,fb38 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    fb1c:	000fa400 	call	fa40 <alt_get_errno>
    fb20:	1007883a 	mov	r3,r2
    fb24:	e0bffc17 	ldw	r2,-16(fp)
    fb28:	0085c83a 	sub	r2,zero,r2
    fb2c:	18800015 	stw	r2,0(r3)
        return -1;
    fb30:	00bfffc4 	movi	r2,-1
    fb34:	00000c06 	br	fb68 <write+0xec>
      }
      return rval;
    fb38:	e0bffc17 	ldw	r2,-16(fp)
    fb3c:	00000a06 	br	fb68 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fb40:	000fa400 	call	fa40 <alt_get_errno>
    fb44:	1007883a 	mov	r3,r2
    fb48:	00800344 	movi	r2,13
    fb4c:	18800015 	stw	r2,0(r3)
    fb50:	00000406 	br	fb64 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fb54:	000fa400 	call	fa40 <alt_get_errno>
    fb58:	1007883a 	mov	r3,r2
    fb5c:	00801444 	movi	r2,81
    fb60:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fb64:	00bfffc4 	movi	r2,-1
}
    fb68:	e037883a 	mov	sp,fp
    fb6c:	dfc00117 	ldw	ra,4(sp)
    fb70:	df000017 	ldw	fp,0(sp)
    fb74:	dec00204 	addi	sp,sp,8
    fb78:	f800283a 	ret

0000fb7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fb7c:	defffd04 	addi	sp,sp,-12
    fb80:	dfc00215 	stw	ra,8(sp)
    fb84:	df000115 	stw	fp,4(sp)
    fb88:	df000104 	addi	fp,sp,4
    fb8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fb90:	d1600804 	addi	r5,gp,-32736
    fb94:	e13fff17 	ldw	r4,-4(fp)
    fb98:	001097c0 	call	1097c <alt_dev_llist_insert>
}
    fb9c:	e037883a 	mov	sp,fp
    fba0:	dfc00117 	ldw	ra,4(sp)
    fba4:	df000017 	ldw	fp,0(sp)
    fba8:	dec00204 	addi	sp,sp,8
    fbac:	f800283a 	ret

0000fbb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fbb0:	defffd04 	addi	sp,sp,-12
    fbb4:	dfc00215 	stw	ra,8(sp)
    fbb8:	df000115 	stw	fp,4(sp)
    fbbc:	df000104 	addi	fp,sp,4
    fbc0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    fbc4:	00113280 	call	11328 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fbc8:	00800044 	movi	r2,1
    fbcc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fbd0:	0001883a 	nop
    fbd4:	e037883a 	mov	sp,fp
    fbd8:	dfc00117 	ldw	ra,4(sp)
    fbdc:	df000017 	ldw	fp,0(sp)
    fbe0:	dec00204 	addi	sp,sp,8
    fbe4:	f800283a 	ret

0000fbe8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fbe8:	defffe04 	addi	sp,sp,-8
    fbec:	dfc00115 	stw	ra,4(sp)
    fbf0:	df000015 	stw	fp,0(sp)
    fbf4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_GAME_NIOS, jtag_game_nios);
    fbf8:	000d883a 	mov	r6,zero
    fbfc:	000b883a 	mov	r5,zero
    fc00:	01000074 	movhi	r4,1
    fc04:	210bb504 	addi	r4,r4,11988
    fc08:	000fd980 	call	fd98 <altera_avalon_jtag_uart_init>
    fc0c:	01000074 	movhi	r4,1
    fc10:	210bab04 	addi	r4,r4,11948
    fc14:	000fb7c0 	call	fb7c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    fc18:	0001883a 	nop
}
    fc1c:	0001883a 	nop
    fc20:	e037883a 	mov	sp,fp
    fc24:	dfc00117 	ldw	ra,4(sp)
    fc28:	df000017 	ldw	fp,0(sp)
    fc2c:	dec00204 	addi	sp,sp,8
    fc30:	f800283a 	ret

0000fc34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fc34:	defffa04 	addi	sp,sp,-24
    fc38:	dfc00515 	stw	ra,20(sp)
    fc3c:	df000415 	stw	fp,16(sp)
    fc40:	df000404 	addi	fp,sp,16
    fc44:	e13ffd15 	stw	r4,-12(fp)
    fc48:	e17ffe15 	stw	r5,-8(fp)
    fc4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fc50:	e0bffd17 	ldw	r2,-12(fp)
    fc54:	10800017 	ldw	r2,0(r2)
    fc58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fc5c:	e0bffc17 	ldw	r2,-16(fp)
    fc60:	10c00a04 	addi	r3,r2,40
    fc64:	e0bffd17 	ldw	r2,-12(fp)
    fc68:	10800217 	ldw	r2,8(r2)
    fc6c:	100f883a 	mov	r7,r2
    fc70:	e1bfff17 	ldw	r6,-4(fp)
    fc74:	e17ffe17 	ldw	r5,-8(fp)
    fc78:	1809883a 	mov	r4,r3
    fc7c:	001025c0 	call	1025c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fc80:	e037883a 	mov	sp,fp
    fc84:	dfc00117 	ldw	ra,4(sp)
    fc88:	df000017 	ldw	fp,0(sp)
    fc8c:	dec00204 	addi	sp,sp,8
    fc90:	f800283a 	ret

0000fc94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fc94:	defffa04 	addi	sp,sp,-24
    fc98:	dfc00515 	stw	ra,20(sp)
    fc9c:	df000415 	stw	fp,16(sp)
    fca0:	df000404 	addi	fp,sp,16
    fca4:	e13ffd15 	stw	r4,-12(fp)
    fca8:	e17ffe15 	stw	r5,-8(fp)
    fcac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fcb0:	e0bffd17 	ldw	r2,-12(fp)
    fcb4:	10800017 	ldw	r2,0(r2)
    fcb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fcbc:	e0bffc17 	ldw	r2,-16(fp)
    fcc0:	10c00a04 	addi	r3,r2,40
    fcc4:	e0bffd17 	ldw	r2,-12(fp)
    fcc8:	10800217 	ldw	r2,8(r2)
    fccc:	100f883a 	mov	r7,r2
    fcd0:	e1bfff17 	ldw	r6,-4(fp)
    fcd4:	e17ffe17 	ldw	r5,-8(fp)
    fcd8:	1809883a 	mov	r4,r3
    fcdc:	00104780 	call	10478 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fce0:	e037883a 	mov	sp,fp
    fce4:	dfc00117 	ldw	ra,4(sp)
    fce8:	df000017 	ldw	fp,0(sp)
    fcec:	dec00204 	addi	sp,sp,8
    fcf0:	f800283a 	ret

0000fcf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fcf4:	defffc04 	addi	sp,sp,-16
    fcf8:	dfc00315 	stw	ra,12(sp)
    fcfc:	df000215 	stw	fp,8(sp)
    fd00:	df000204 	addi	fp,sp,8
    fd04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fd08:	e0bfff17 	ldw	r2,-4(fp)
    fd0c:	10800017 	ldw	r2,0(r2)
    fd10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    fd14:	e0bffe17 	ldw	r2,-8(fp)
    fd18:	10c00a04 	addi	r3,r2,40
    fd1c:	e0bfff17 	ldw	r2,-4(fp)
    fd20:	10800217 	ldw	r2,8(r2)
    fd24:	100b883a 	mov	r5,r2
    fd28:	1809883a 	mov	r4,r3
    fd2c:	00101040 	call	10104 <altera_avalon_jtag_uart_close>
}
    fd30:	e037883a 	mov	sp,fp
    fd34:	dfc00117 	ldw	ra,4(sp)
    fd38:	df000017 	ldw	fp,0(sp)
    fd3c:	dec00204 	addi	sp,sp,8
    fd40:	f800283a 	ret

0000fd44 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    fd44:	defffa04 	addi	sp,sp,-24
    fd48:	dfc00515 	stw	ra,20(sp)
    fd4c:	df000415 	stw	fp,16(sp)
    fd50:	df000404 	addi	fp,sp,16
    fd54:	e13ffd15 	stw	r4,-12(fp)
    fd58:	e17ffe15 	stw	r5,-8(fp)
    fd5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    fd60:	e0bffd17 	ldw	r2,-12(fp)
    fd64:	10800017 	ldw	r2,0(r2)
    fd68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    fd6c:	e0bffc17 	ldw	r2,-16(fp)
    fd70:	10800a04 	addi	r2,r2,40
    fd74:	e1bfff17 	ldw	r6,-4(fp)
    fd78:	e17ffe17 	ldw	r5,-8(fp)
    fd7c:	1009883a 	mov	r4,r2
    fd80:	001016c0 	call	1016c <altera_avalon_jtag_uart_ioctl>
}
    fd84:	e037883a 	mov	sp,fp
    fd88:	dfc00117 	ldw	ra,4(sp)
    fd8c:	df000017 	ldw	fp,0(sp)
    fd90:	dec00204 	addi	sp,sp,8
    fd94:	f800283a 	ret

0000fd98 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    fd98:	defffa04 	addi	sp,sp,-24
    fd9c:	dfc00515 	stw	ra,20(sp)
    fda0:	df000415 	stw	fp,16(sp)
    fda4:	df000404 	addi	fp,sp,16
    fda8:	e13ffd15 	stw	r4,-12(fp)
    fdac:	e17ffe15 	stw	r5,-8(fp)
    fdb0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fdb4:	e0bffd17 	ldw	r2,-12(fp)
    fdb8:	00c00044 	movi	r3,1
    fdbc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    fdc0:	e0bffd17 	ldw	r2,-12(fp)
    fdc4:	10800017 	ldw	r2,0(r2)
    fdc8:	10800104 	addi	r2,r2,4
    fdcc:	1007883a 	mov	r3,r2
    fdd0:	e0bffd17 	ldw	r2,-12(fp)
    fdd4:	10800817 	ldw	r2,32(r2)
    fdd8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    fddc:	e0bffe17 	ldw	r2,-8(fp)
    fde0:	e0ffff17 	ldw	r3,-4(fp)
    fde4:	d8000015 	stw	zero,0(sp)
    fde8:	e1fffd17 	ldw	r7,-12(fp)
    fdec:	01800074 	movhi	r6,1
    fdf0:	31bf9604 	addi	r6,r6,-424
    fdf4:	180b883a 	mov	r5,r3
    fdf8:	1009883a 	mov	r4,r2
    fdfc:	0010b000 	call	10b00 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    fe00:	e0bffd17 	ldw	r2,-12(fp)
    fe04:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    fe08:	e0bffd17 	ldw	r2,-12(fp)
    fe0c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fe10:	d0e6d717 	ldw	r3,-25764(gp)
    fe14:	e1fffd17 	ldw	r7,-12(fp)
    fe18:	01800074 	movhi	r6,1
    fe1c:	31801904 	addi	r6,r6,100
    fe20:	180b883a 	mov	r5,r3
    fe24:	1009883a 	mov	r4,r2
    fe28:	001069c0 	call	1069c <alt_alarm_start>
    fe2c:	1000040e 	bge	r2,zero,fe40 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    fe30:	e0fffd17 	ldw	r3,-12(fp)
    fe34:	00a00034 	movhi	r2,32768
    fe38:	10bfffc4 	addi	r2,r2,-1
    fe3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    fe40:	0001883a 	nop
    fe44:	e037883a 	mov	sp,fp
    fe48:	dfc00117 	ldw	ra,4(sp)
    fe4c:	df000017 	ldw	fp,0(sp)
    fe50:	dec00204 	addi	sp,sp,8
    fe54:	f800283a 	ret

0000fe58 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    fe58:	defff804 	addi	sp,sp,-32
    fe5c:	df000715 	stw	fp,28(sp)
    fe60:	df000704 	addi	fp,sp,28
    fe64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    fe68:	e0bfff17 	ldw	r2,-4(fp)
    fe6c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    fe70:	e0bffb17 	ldw	r2,-20(fp)
    fe74:	10800017 	ldw	r2,0(r2)
    fe78:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fe7c:	e0bffc17 	ldw	r2,-16(fp)
    fe80:	10800104 	addi	r2,r2,4
    fe84:	10800037 	ldwio	r2,0(r2)
    fe88:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    fe8c:	e0bffd17 	ldw	r2,-12(fp)
    fe90:	1080c00c 	andi	r2,r2,768
    fe94:	10006d26 	beq	r2,zero,1004c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    fe98:	e0bffd17 	ldw	r2,-12(fp)
    fe9c:	1080400c 	andi	r2,r2,256
    fea0:	10003526 	beq	r2,zero,ff78 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    fea4:	00800074 	movhi	r2,1
    fea8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    feac:	e0bffb17 	ldw	r2,-20(fp)
    feb0:	10800a17 	ldw	r2,40(r2)
    feb4:	10800044 	addi	r2,r2,1
    feb8:	1081ffcc 	andi	r2,r2,2047
    febc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    fec0:	e0bffb17 	ldw	r2,-20(fp)
    fec4:	10c00b17 	ldw	r3,44(r2)
    fec8:	e0bffe17 	ldw	r2,-8(fp)
    fecc:	18801526 	beq	r3,r2,ff24 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    fed0:	e0bffc17 	ldw	r2,-16(fp)
    fed4:	10800037 	ldwio	r2,0(r2)
    fed8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    fedc:	e0bff917 	ldw	r2,-28(fp)
    fee0:	10a0000c 	andi	r2,r2,32768
    fee4:	10001126 	beq	r2,zero,ff2c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fee8:	e0bffb17 	ldw	r2,-20(fp)
    feec:	10800a17 	ldw	r2,40(r2)
    fef0:	e0fff917 	ldw	r3,-28(fp)
    fef4:	1809883a 	mov	r4,r3
    fef8:	e0fffb17 	ldw	r3,-20(fp)
    fefc:	1885883a 	add	r2,r3,r2
    ff00:	10800e04 	addi	r2,r2,56
    ff04:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ff08:	e0bffb17 	ldw	r2,-20(fp)
    ff0c:	10800a17 	ldw	r2,40(r2)
    ff10:	10800044 	addi	r2,r2,1
    ff14:	10c1ffcc 	andi	r3,r2,2047
    ff18:	e0bffb17 	ldw	r2,-20(fp)
    ff1c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ff20:	003fe206 	br	feac <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ff24:	0001883a 	nop
    ff28:	00000106 	br	ff30 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ff2c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ff30:	e0bff917 	ldw	r2,-28(fp)
    ff34:	10bfffec 	andhi	r2,r2,65535
    ff38:	10000f26 	beq	r2,zero,ff78 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff3c:	e0bffb17 	ldw	r2,-20(fp)
    ff40:	10c00817 	ldw	r3,32(r2)
    ff44:	00bfff84 	movi	r2,-2
    ff48:	1886703a 	and	r3,r3,r2
    ff4c:	e0bffb17 	ldw	r2,-20(fp)
    ff50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ff54:	e0bffc17 	ldw	r2,-16(fp)
    ff58:	10800104 	addi	r2,r2,4
    ff5c:	1007883a 	mov	r3,r2
    ff60:	e0bffb17 	ldw	r2,-20(fp)
    ff64:	10800817 	ldw	r2,32(r2)
    ff68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ff6c:	e0bffc17 	ldw	r2,-16(fp)
    ff70:	10800104 	addi	r2,r2,4
    ff74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ff78:	e0bffd17 	ldw	r2,-12(fp)
    ff7c:	1080800c 	andi	r2,r2,512
    ff80:	103fbe26 	beq	r2,zero,fe7c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ff84:	e0bffd17 	ldw	r2,-12(fp)
    ff88:	1004d43a 	srli	r2,r2,16
    ff8c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ff90:	00001406 	br	ffe4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ff94:	e0bffc17 	ldw	r2,-16(fp)
    ff98:	e0fffb17 	ldw	r3,-20(fp)
    ff9c:	18c00d17 	ldw	r3,52(r3)
    ffa0:	e13ffb17 	ldw	r4,-20(fp)
    ffa4:	20c7883a 	add	r3,r4,r3
    ffa8:	18c20e04 	addi	r3,r3,2104
    ffac:	18c00003 	ldbu	r3,0(r3)
    ffb0:	18c03fcc 	andi	r3,r3,255
    ffb4:	18c0201c 	xori	r3,r3,128
    ffb8:	18ffe004 	addi	r3,r3,-128
    ffbc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ffc0:	e0bffb17 	ldw	r2,-20(fp)
    ffc4:	10800d17 	ldw	r2,52(r2)
    ffc8:	10800044 	addi	r2,r2,1
    ffcc:	10c1ffcc 	andi	r3,r2,2047
    ffd0:	e0bffb17 	ldw	r2,-20(fp)
    ffd4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ffd8:	e0bffa17 	ldw	r2,-24(fp)
    ffdc:	10bfffc4 	addi	r2,r2,-1
    ffe0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ffe4:	e0bffa17 	ldw	r2,-24(fp)
    ffe8:	10000526 	beq	r2,zero,10000 <altera_avalon_jtag_uart_irq+0x1a8>
    ffec:	e0bffb17 	ldw	r2,-20(fp)
    fff0:	10c00d17 	ldw	r3,52(r2)
    fff4:	e0bffb17 	ldw	r2,-20(fp)
    fff8:	10800c17 	ldw	r2,48(r2)
    fffc:	18bfe51e 	bne	r3,r2,ff94 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10000:	e0bffa17 	ldw	r2,-24(fp)
   10004:	103f9d26 	beq	r2,zero,fe7c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10008:	e0bffb17 	ldw	r2,-20(fp)
   1000c:	10c00817 	ldw	r3,32(r2)
   10010:	00bfff44 	movi	r2,-3
   10014:	1886703a 	and	r3,r3,r2
   10018:	e0bffb17 	ldw	r2,-20(fp)
   1001c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10020:	e0bffb17 	ldw	r2,-20(fp)
   10024:	10800017 	ldw	r2,0(r2)
   10028:	10800104 	addi	r2,r2,4
   1002c:	1007883a 	mov	r3,r2
   10030:	e0bffb17 	ldw	r2,-20(fp)
   10034:	10800817 	ldw	r2,32(r2)
   10038:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1003c:	e0bffc17 	ldw	r2,-16(fp)
   10040:	10800104 	addi	r2,r2,4
   10044:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10048:	003f8c06 	br	fe7c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1004c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10050:	0001883a 	nop
   10054:	e037883a 	mov	sp,fp
   10058:	df000017 	ldw	fp,0(sp)
   1005c:	dec00104 	addi	sp,sp,4
   10060:	f800283a 	ret

00010064 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10064:	defff804 	addi	sp,sp,-32
   10068:	df000715 	stw	fp,28(sp)
   1006c:	df000704 	addi	fp,sp,28
   10070:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10074:	e0bffb17 	ldw	r2,-20(fp)
   10078:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1007c:	e0bff917 	ldw	r2,-28(fp)
   10080:	10800017 	ldw	r2,0(r2)
   10084:	10800104 	addi	r2,r2,4
   10088:	10800037 	ldwio	r2,0(r2)
   1008c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10090:	e0bffa17 	ldw	r2,-24(fp)
   10094:	1081000c 	andi	r2,r2,1024
   10098:	10000b26 	beq	r2,zero,100c8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1009c:	e0bff917 	ldw	r2,-28(fp)
   100a0:	10800017 	ldw	r2,0(r2)
   100a4:	10800104 	addi	r2,r2,4
   100a8:	1007883a 	mov	r3,r2
   100ac:	e0bff917 	ldw	r2,-28(fp)
   100b0:	10800817 	ldw	r2,32(r2)
   100b4:	10810014 	ori	r2,r2,1024
   100b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   100bc:	e0bff917 	ldw	r2,-28(fp)
   100c0:	10000915 	stw	zero,36(r2)
   100c4:	00000a06 	br	100f0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   100c8:	e0bff917 	ldw	r2,-28(fp)
   100cc:	10c00917 	ldw	r3,36(r2)
   100d0:	00a00034 	movhi	r2,32768
   100d4:	10bfff04 	addi	r2,r2,-4
   100d8:	10c00536 	bltu	r2,r3,100f0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   100dc:	e0bff917 	ldw	r2,-28(fp)
   100e0:	10800917 	ldw	r2,36(r2)
   100e4:	10c00044 	addi	r3,r2,1
   100e8:	e0bff917 	ldw	r2,-28(fp)
   100ec:	10c00915 	stw	r3,36(r2)
   100f0:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   100f4:	e037883a 	mov	sp,fp
   100f8:	df000017 	ldw	fp,0(sp)
   100fc:	dec00104 	addi	sp,sp,4
   10100:	f800283a 	ret

00010104 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10104:	defffd04 	addi	sp,sp,-12
   10108:	df000215 	stw	fp,8(sp)
   1010c:	df000204 	addi	fp,sp,8
   10110:	e13ffe15 	stw	r4,-8(fp)
   10114:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10118:	00000506 	br	10130 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1011c:	e0bfff17 	ldw	r2,-4(fp)
   10120:	1090000c 	andi	r2,r2,16384
   10124:	10000226 	beq	r2,zero,10130 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10128:	00bffd44 	movi	r2,-11
   1012c:	00000b06 	br	1015c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	10c00d17 	ldw	r3,52(r2)
   10138:	e0bffe17 	ldw	r2,-8(fp)
   1013c:	10800c17 	ldw	r2,48(r2)
   10140:	18800526 	beq	r3,r2,10158 <altera_avalon_jtag_uart_close+0x54>
   10144:	e0bffe17 	ldw	r2,-8(fp)
   10148:	10c00917 	ldw	r3,36(r2)
   1014c:	e0bffe17 	ldw	r2,-8(fp)
   10150:	10800117 	ldw	r2,4(r2)
   10154:	18bff136 	bltu	r3,r2,1011c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10158:	0005883a 	mov	r2,zero
}
   1015c:	e037883a 	mov	sp,fp
   10160:	df000017 	ldw	fp,0(sp)
   10164:	dec00104 	addi	sp,sp,4
   10168:	f800283a 	ret

0001016c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1016c:	defffa04 	addi	sp,sp,-24
   10170:	df000515 	stw	fp,20(sp)
   10174:	df000504 	addi	fp,sp,20
   10178:	e13ffd15 	stw	r4,-12(fp)
   1017c:	e17ffe15 	stw	r5,-8(fp)
   10180:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10184:	00bff9c4 	movi	r2,-25
   10188:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1018c:	e0bffe17 	ldw	r2,-8(fp)
   10190:	10da8060 	cmpeqi	r3,r2,27137
   10194:	1800031e 	bne	r3,zero,101a4 <altera_avalon_jtag_uart_ioctl+0x38>
   10198:	109a80a0 	cmpeqi	r2,r2,27138
   1019c:	1000181e 	bne	r2,zero,10200 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   101a0:	00002906 	br	10248 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   101a4:	e0bffd17 	ldw	r2,-12(fp)
   101a8:	10c00117 	ldw	r3,4(r2)
   101ac:	00a00034 	movhi	r2,32768
   101b0:	10bfffc4 	addi	r2,r2,-1
   101b4:	18802126 	beq	r3,r2,1023c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   101b8:	e0bfff17 	ldw	r2,-4(fp)
   101bc:	10800017 	ldw	r2,0(r2)
   101c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   101c4:	e0bffc17 	ldw	r2,-16(fp)
   101c8:	10800090 	cmplti	r2,r2,2
   101cc:	1000061e 	bne	r2,zero,101e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   101d0:	e0fffc17 	ldw	r3,-16(fp)
   101d4:	00a00034 	movhi	r2,32768
   101d8:	10bfffc4 	addi	r2,r2,-1
   101dc:	18800226 	beq	r3,r2,101e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   101e0:	e0bffc17 	ldw	r2,-16(fp)
   101e4:	00000206 	br	101f0 <altera_avalon_jtag_uart_ioctl+0x84>
   101e8:	00a00034 	movhi	r2,32768
   101ec:	10bfff84 	addi	r2,r2,-2
   101f0:	e0fffd17 	ldw	r3,-12(fp)
   101f4:	18800115 	stw	r2,4(r3)
      rc = 0;
   101f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   101fc:	00000f06 	br	1023c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10200:	e0bffd17 	ldw	r2,-12(fp)
   10204:	10c00117 	ldw	r3,4(r2)
   10208:	00a00034 	movhi	r2,32768
   1020c:	10bfffc4 	addi	r2,r2,-1
   10210:	18800c26 	beq	r3,r2,10244 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10214:	e0bffd17 	ldw	r2,-12(fp)
   10218:	10c00917 	ldw	r3,36(r2)
   1021c:	e0bffd17 	ldw	r2,-12(fp)
   10220:	10800117 	ldw	r2,4(r2)
   10224:	1885803a 	cmpltu	r2,r3,r2
   10228:	10c03fcc 	andi	r3,r2,255
   1022c:	e0bfff17 	ldw	r2,-4(fp)
   10230:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10234:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10238:	00000206 	br	10244 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1023c:	0001883a 	nop
   10240:	00000106 	br	10248 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10244:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10248:	e0bffb17 	ldw	r2,-20(fp)
}
   1024c:	e037883a 	mov	sp,fp
   10250:	df000017 	ldw	fp,0(sp)
   10254:	dec00104 	addi	sp,sp,4
   10258:	f800283a 	ret

0001025c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1025c:	defff304 	addi	sp,sp,-52
   10260:	dfc00c15 	stw	ra,48(sp)
   10264:	df000b15 	stw	fp,44(sp)
   10268:	df000b04 	addi	fp,sp,44
   1026c:	e13ffc15 	stw	r4,-16(fp)
   10270:	e17ffd15 	stw	r5,-12(fp)
   10274:	e1bffe15 	stw	r6,-8(fp)
   10278:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1027c:	e0bffd17 	ldw	r2,-12(fp)
   10280:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10284:	00004706 	br	103a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10288:	e0bffc17 	ldw	r2,-16(fp)
   1028c:	10800a17 	ldw	r2,40(r2)
   10290:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10294:	e0bffc17 	ldw	r2,-16(fp)
   10298:	10800b17 	ldw	r2,44(r2)
   1029c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   102a0:	e0fff717 	ldw	r3,-36(fp)
   102a4:	e0bff817 	ldw	r2,-32(fp)
   102a8:	18800536 	bltu	r3,r2,102c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   102ac:	e0fff717 	ldw	r3,-36(fp)
   102b0:	e0bff817 	ldw	r2,-32(fp)
   102b4:	1885c83a 	sub	r2,r3,r2
   102b8:	e0bff615 	stw	r2,-40(fp)
   102bc:	00000406 	br	102d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   102c0:	00c20004 	movi	r3,2048
   102c4:	e0bff817 	ldw	r2,-32(fp)
   102c8:	1885c83a 	sub	r2,r3,r2
   102cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   102d0:	e0bff617 	ldw	r2,-40(fp)
   102d4:	10001e26 	beq	r2,zero,10350 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   102d8:	e0fffe17 	ldw	r3,-8(fp)
   102dc:	e0bff617 	ldw	r2,-40(fp)
   102e0:	1880022e 	bgeu	r3,r2,102ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
   102e4:	e0bffe17 	ldw	r2,-8(fp)
   102e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   102ec:	e0bffc17 	ldw	r2,-16(fp)
   102f0:	10c00e04 	addi	r3,r2,56
   102f4:	e0bff817 	ldw	r2,-32(fp)
   102f8:	1885883a 	add	r2,r3,r2
   102fc:	e1bff617 	ldw	r6,-40(fp)
   10300:	100b883a 	mov	r5,r2
   10304:	e13ff517 	ldw	r4,-44(fp)
   10308:	0007e6c0 	call	7e6c <memcpy>
      ptr   += n;
   1030c:	e0fff517 	ldw	r3,-44(fp)
   10310:	e0bff617 	ldw	r2,-40(fp)
   10314:	1885883a 	add	r2,r3,r2
   10318:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1031c:	e0fffe17 	ldw	r3,-8(fp)
   10320:	e0bff617 	ldw	r2,-40(fp)
   10324:	1885c83a 	sub	r2,r3,r2
   10328:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1032c:	e0fff817 	ldw	r3,-32(fp)
   10330:	e0bff617 	ldw	r2,-40(fp)
   10334:	1885883a 	add	r2,r3,r2
   10338:	10c1ffcc 	andi	r3,r2,2047
   1033c:	e0bffc17 	ldw	r2,-16(fp)
   10340:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10344:	e0bffe17 	ldw	r2,-8(fp)
   10348:	00bfcf16 	blt	zero,r2,10288 <altera_avalon_jtag_uart_read+0x2c>
   1034c:	00000106 	br	10354 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10350:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10354:	e0fff517 	ldw	r3,-44(fp)
   10358:	e0bffd17 	ldw	r2,-12(fp)
   1035c:	1880141e 	bne	r3,r2,103b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10360:	e0bfff17 	ldw	r2,-4(fp)
   10364:	1090000c 	andi	r2,r2,16384
   10368:	1000131e 	bne	r2,zero,103b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1036c:	0001883a 	nop
   10370:	e0bffc17 	ldw	r2,-16(fp)
   10374:	10c00a17 	ldw	r3,40(r2)
   10378:	e0bff717 	ldw	r2,-36(fp)
   1037c:	1880051e 	bne	r3,r2,10394 <altera_avalon_jtag_uart_read+0x138>
   10380:	e0bffc17 	ldw	r2,-16(fp)
   10384:	10c00917 	ldw	r3,36(r2)
   10388:	e0bffc17 	ldw	r2,-16(fp)
   1038c:	10800117 	ldw	r2,4(r2)
   10390:	18bff736 	bltu	r3,r2,10370 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10394:	e0bffc17 	ldw	r2,-16(fp)
   10398:	10c00a17 	ldw	r3,40(r2)
   1039c:	e0bff717 	ldw	r2,-36(fp)
   103a0:	18800726 	beq	r3,r2,103c0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   103a4:	e0bffe17 	ldw	r2,-8(fp)
   103a8:	00bfb716 	blt	zero,r2,10288 <altera_avalon_jtag_uart_read+0x2c>
   103ac:	00000506 	br	103c4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   103b0:	0001883a 	nop
   103b4:	00000306 	br	103c4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   103b8:	0001883a 	nop
   103bc:	00000106 	br	103c4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   103c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   103c4:	e0fff517 	ldw	r3,-44(fp)
   103c8:	e0bffd17 	ldw	r2,-12(fp)
   103cc:	18801826 	beq	r3,r2,10430 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103d0:	0005303a 	rdctl	r2,status
   103d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103d8:	e0fffb17 	ldw	r3,-20(fp)
   103dc:	00bfff84 	movi	r2,-2
   103e0:	1884703a 	and	r2,r3,r2
   103e4:	1001703a 	wrctl	status,r2
  
  return context;
   103e8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   103ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   103f0:	e0bffc17 	ldw	r2,-16(fp)
   103f4:	10800817 	ldw	r2,32(r2)
   103f8:	10c00054 	ori	r3,r2,1
   103fc:	e0bffc17 	ldw	r2,-16(fp)
   10400:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10404:	e0bffc17 	ldw	r2,-16(fp)
   10408:	10800017 	ldw	r2,0(r2)
   1040c:	10800104 	addi	r2,r2,4
   10410:	1007883a 	mov	r3,r2
   10414:	e0bffc17 	ldw	r2,-16(fp)
   10418:	10800817 	ldw	r2,32(r2)
   1041c:	18800035 	stwio	r2,0(r3)
   10420:	e0bffa17 	ldw	r2,-24(fp)
   10424:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10428:	e0bff917 	ldw	r2,-28(fp)
   1042c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10430:	e0fff517 	ldw	r3,-44(fp)
   10434:	e0bffd17 	ldw	r2,-12(fp)
   10438:	18800426 	beq	r3,r2,1044c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1043c:	e0fff517 	ldw	r3,-44(fp)
   10440:	e0bffd17 	ldw	r2,-12(fp)
   10444:	1885c83a 	sub	r2,r3,r2
   10448:	00000606 	br	10464 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1044c:	e0bfff17 	ldw	r2,-4(fp)
   10450:	1090000c 	andi	r2,r2,16384
   10454:	10000226 	beq	r2,zero,10460 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10458:	00bffd44 	movi	r2,-11
   1045c:	00000106 	br	10464 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10460:	00bffec4 	movi	r2,-5
}
   10464:	e037883a 	mov	sp,fp
   10468:	dfc00117 	ldw	ra,4(sp)
   1046c:	df000017 	ldw	fp,0(sp)
   10470:	dec00204 	addi	sp,sp,8
   10474:	f800283a 	ret

00010478 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10478:	defff304 	addi	sp,sp,-52
   1047c:	dfc00c15 	stw	ra,48(sp)
   10480:	df000b15 	stw	fp,44(sp)
   10484:	df000b04 	addi	fp,sp,44
   10488:	e13ffc15 	stw	r4,-16(fp)
   1048c:	e17ffd15 	stw	r5,-12(fp)
   10490:	e1bffe15 	stw	r6,-8(fp)
   10494:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10498:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1049c:	e0bffd17 	ldw	r2,-12(fp)
   104a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   104a4:	00003706 	br	10584 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   104a8:	e0bffc17 	ldw	r2,-16(fp)
   104ac:	10800c17 	ldw	r2,48(r2)
   104b0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   104b4:	e0bffc17 	ldw	r2,-16(fp)
   104b8:	10800d17 	ldw	r2,52(r2)
   104bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   104c0:	e0fff917 	ldw	r3,-28(fp)
   104c4:	e0bff517 	ldw	r2,-44(fp)
   104c8:	1880062e 	bgeu	r3,r2,104e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   104cc:	e0fff517 	ldw	r3,-44(fp)
   104d0:	e0bff917 	ldw	r2,-28(fp)
   104d4:	1885c83a 	sub	r2,r3,r2
   104d8:	10bfffc4 	addi	r2,r2,-1
   104dc:	e0bff615 	stw	r2,-40(fp)
   104e0:	00000b06 	br	10510 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   104e4:	e0bff517 	ldw	r2,-44(fp)
   104e8:	10000526 	beq	r2,zero,10500 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   104ec:	00c20004 	movi	r3,2048
   104f0:	e0bff917 	ldw	r2,-28(fp)
   104f4:	1885c83a 	sub	r2,r3,r2
   104f8:	e0bff615 	stw	r2,-40(fp)
   104fc:	00000406 	br	10510 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10500:	00c1ffc4 	movi	r3,2047
   10504:	e0bff917 	ldw	r2,-28(fp)
   10508:	1885c83a 	sub	r2,r3,r2
   1050c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10510:	e0bff617 	ldw	r2,-40(fp)
   10514:	10001e26 	beq	r2,zero,10590 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10518:	e0fffe17 	ldw	r3,-8(fp)
   1051c:	e0bff617 	ldw	r2,-40(fp)
   10520:	1880022e 	bgeu	r3,r2,1052c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10524:	e0bffe17 	ldw	r2,-8(fp)
   10528:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1052c:	e0bffc17 	ldw	r2,-16(fp)
   10530:	10c20e04 	addi	r3,r2,2104
   10534:	e0bff917 	ldw	r2,-28(fp)
   10538:	1885883a 	add	r2,r3,r2
   1053c:	e1bff617 	ldw	r6,-40(fp)
   10540:	e17ffd17 	ldw	r5,-12(fp)
   10544:	1009883a 	mov	r4,r2
   10548:	0007e6c0 	call	7e6c <memcpy>
      ptr   += n;
   1054c:	e0fffd17 	ldw	r3,-12(fp)
   10550:	e0bff617 	ldw	r2,-40(fp)
   10554:	1885883a 	add	r2,r3,r2
   10558:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1055c:	e0fffe17 	ldw	r3,-8(fp)
   10560:	e0bff617 	ldw	r2,-40(fp)
   10564:	1885c83a 	sub	r2,r3,r2
   10568:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1056c:	e0fff917 	ldw	r3,-28(fp)
   10570:	e0bff617 	ldw	r2,-40(fp)
   10574:	1885883a 	add	r2,r3,r2
   10578:	10c1ffcc 	andi	r3,r2,2047
   1057c:	e0bffc17 	ldw	r2,-16(fp)
   10580:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10584:	e0bffe17 	ldw	r2,-8(fp)
   10588:	00bfc716 	blt	zero,r2,104a8 <altera_avalon_jtag_uart_write+0x30>
   1058c:	00000106 	br	10594 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   10590:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10594:	0005303a 	rdctl	r2,status
   10598:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1059c:	e0fffb17 	ldw	r3,-20(fp)
   105a0:	00bfff84 	movi	r2,-2
   105a4:	1884703a 	and	r2,r3,r2
   105a8:	1001703a 	wrctl	status,r2
  
  return context;
   105ac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   105b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   105b4:	e0bffc17 	ldw	r2,-16(fp)
   105b8:	10800817 	ldw	r2,32(r2)
   105bc:	10c00094 	ori	r3,r2,2
   105c0:	e0bffc17 	ldw	r2,-16(fp)
   105c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   105c8:	e0bffc17 	ldw	r2,-16(fp)
   105cc:	10800017 	ldw	r2,0(r2)
   105d0:	10800104 	addi	r2,r2,4
   105d4:	1007883a 	mov	r3,r2
   105d8:	e0bffc17 	ldw	r2,-16(fp)
   105dc:	10800817 	ldw	r2,32(r2)
   105e0:	18800035 	stwio	r2,0(r3)
   105e4:	e0bffa17 	ldw	r2,-24(fp)
   105e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105ec:	e0bff817 	ldw	r2,-32(fp)
   105f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   105f4:	e0bffe17 	ldw	r2,-8(fp)
   105f8:	0080100e 	bge	zero,r2,1063c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   105fc:	e0bfff17 	ldw	r2,-4(fp)
   10600:	1090000c 	andi	r2,r2,16384
   10604:	1000101e 	bne	r2,zero,10648 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10608:	0001883a 	nop
   1060c:	e0bffc17 	ldw	r2,-16(fp)
   10610:	10c00d17 	ldw	r3,52(r2)
   10614:	e0bff517 	ldw	r2,-44(fp)
   10618:	1880051e 	bne	r3,r2,10630 <altera_avalon_jtag_uart_write+0x1b8>
   1061c:	e0bffc17 	ldw	r2,-16(fp)
   10620:	10c00917 	ldw	r3,36(r2)
   10624:	e0bffc17 	ldw	r2,-16(fp)
   10628:	10800117 	ldw	r2,4(r2)
   1062c:	18bff736 	bltu	r3,r2,1060c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10630:	e0bffc17 	ldw	r2,-16(fp)
   10634:	10800917 	ldw	r2,36(r2)
   10638:	1000051e 	bne	r2,zero,10650 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1063c:	e0bffe17 	ldw	r2,-8(fp)
   10640:	00bfd016 	blt	zero,r2,10584 <altera_avalon_jtag_uart_write+0x10c>
   10644:	00000306 	br	10654 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10648:	0001883a 	nop
   1064c:	00000106 	br	10654 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10650:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10654:	e0fffd17 	ldw	r3,-12(fp)
   10658:	e0bff717 	ldw	r2,-36(fp)
   1065c:	18800426 	beq	r3,r2,10670 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10660:	e0fffd17 	ldw	r3,-12(fp)
   10664:	e0bff717 	ldw	r2,-36(fp)
   10668:	1885c83a 	sub	r2,r3,r2
   1066c:	00000606 	br	10688 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10670:	e0bfff17 	ldw	r2,-4(fp)
   10674:	1090000c 	andi	r2,r2,16384
   10678:	10000226 	beq	r2,zero,10684 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1067c:	00bffd44 	movi	r2,-11
   10680:	00000106 	br	10688 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10684:	00bffec4 	movi	r2,-5
}
   10688:	e037883a 	mov	sp,fp
   1068c:	dfc00117 	ldw	ra,4(sp)
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00204 	addi	sp,sp,8
   10698:	f800283a 	ret

0001069c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1069c:	defff504 	addi	sp,sp,-44
   106a0:	df000a15 	stw	fp,40(sp)
   106a4:	df000a04 	addi	fp,sp,40
   106a8:	e13ffc15 	stw	r4,-16(fp)
   106ac:	e17ffd15 	stw	r5,-12(fp)
   106b0:	e1bffe15 	stw	r6,-8(fp)
   106b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   106b8:	e03ff615 	stw	zero,-40(fp)
   106bc:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
   106c0:	10003c26 	beq	r2,zero,107b4 <alt_alarm_start+0x118>
  {
    if (alarm)
   106c4:	e0bffc17 	ldw	r2,-16(fp)
   106c8:	10003826 	beq	r2,zero,107ac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   106cc:	e0bffc17 	ldw	r2,-16(fp)
   106d0:	e0fffe17 	ldw	r3,-8(fp)
   106d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   106d8:	e0bffc17 	ldw	r2,-16(fp)
   106dc:	e0ffff17 	ldw	r3,-4(fp)
   106e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106e4:	0005303a 	rdctl	r2,status
   106e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106ec:	e0fff917 	ldw	r3,-28(fp)
   106f0:	00bfff84 	movi	r2,-2
   106f4:	1884703a 	and	r2,r3,r2
   106f8:	1001703a 	wrctl	status,r2
  
  return context;
   106fc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10700:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10704:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
   10708:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1070c:	e0fffd17 	ldw	r3,-12(fp)
   10710:	e0bff617 	ldw	r2,-40(fp)
   10714:	1885883a 	add	r2,r3,r2
   10718:	10c00044 	addi	r3,r2,1
   1071c:	e0bffc17 	ldw	r2,-16(fp)
   10720:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10724:	e0bffc17 	ldw	r2,-16(fp)
   10728:	10c00217 	ldw	r3,8(r2)
   1072c:	e0bff617 	ldw	r2,-40(fp)
   10730:	1880042e 	bgeu	r3,r2,10744 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10734:	e0bffc17 	ldw	r2,-16(fp)
   10738:	00c00044 	movi	r3,1
   1073c:	10c00405 	stb	r3,16(r2)
   10740:	00000206 	br	1074c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10744:	e0bffc17 	ldw	r2,-16(fp)
   10748:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1074c:	e0bffc17 	ldw	r2,-16(fp)
   10750:	d0e00e04 	addi	r3,gp,-32712
   10754:	e0fffa15 	stw	r3,-24(fp)
   10758:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1075c:	e0bffb17 	ldw	r2,-20(fp)
   10760:	e0fffa17 	ldw	r3,-24(fp)
   10764:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10768:	e0bffa17 	ldw	r2,-24(fp)
   1076c:	10c00017 	ldw	r3,0(r2)
   10770:	e0bffb17 	ldw	r2,-20(fp)
   10774:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10778:	e0bffa17 	ldw	r2,-24(fp)
   1077c:	10800017 	ldw	r2,0(r2)
   10780:	e0fffb17 	ldw	r3,-20(fp)
   10784:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10788:	e0bffa17 	ldw	r2,-24(fp)
   1078c:	e0fffb17 	ldw	r3,-20(fp)
   10790:	10c00015 	stw	r3,0(r2)
   10794:	e0bff817 	ldw	r2,-32(fp)
   10798:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1079c:	e0bff717 	ldw	r2,-36(fp)
   107a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   107a4:	0005883a 	mov	r2,zero
   107a8:	00000306 	br	107b8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   107ac:	00bffa84 	movi	r2,-22
   107b0:	00000106 	br	107b8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   107b4:	00bfde84 	movi	r2,-134
  }
}
   107b8:	e037883a 	mov	sp,fp
   107bc:	df000017 	ldw	fp,0(sp)
   107c0:	dec00104 	addi	sp,sp,4
   107c4:	f800283a 	ret

000107c8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   107c8:	defffa04 	addi	sp,sp,-24
   107cc:	dfc00515 	stw	ra,20(sp)
   107d0:	df000415 	stw	fp,16(sp)
   107d4:	df000404 	addi	fp,sp,16
   107d8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   107dc:	00800244 	movi	r2,9
   107e0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   107e4:	014003f4 	movhi	r5,15
   107e8:	29509004 	addi	r5,r5,16960
   107ec:	e13ffd17 	ldw	r4,-12(fp)
   107f0:	000c8ec0 	call	c8ec <__mulsi3>
   107f4:	100b883a 	mov	r5,r2
   107f8:	01017db4 	movhi	r4,1526
   107fc:	21384004 	addi	r4,r4,-7936
   10800:	000c8300 	call	c830 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10804:	100b883a 	mov	r5,r2
   10808:	01200034 	movhi	r4,32768
   1080c:	213fffc4 	addi	r4,r4,-1
   10810:	000c8300 	call	c830 <__udivsi3>
   10814:	100b883a 	mov	r5,r2
   10818:	e13fff17 	ldw	r4,-4(fp)
   1081c:	000c8300 	call	c830 <__udivsi3>
   10820:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10824:	e0bffe17 	ldw	r2,-8(fp)
   10828:	10002a26 	beq	r2,zero,108d4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1082c:	e03ffc15 	stw	zero,-16(fp)
   10830:	00001706 	br	10890 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10834:	00a00034 	movhi	r2,32768
   10838:	10bfffc4 	addi	r2,r2,-1
   1083c:	10bfffc4 	addi	r2,r2,-1
   10840:	103ffe1e 	bne	r2,zero,1083c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10844:	014003f4 	movhi	r5,15
   10848:	29509004 	addi	r5,r5,16960
   1084c:	e13ffd17 	ldw	r4,-12(fp)
   10850:	000c8ec0 	call	c8ec <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10854:	100b883a 	mov	r5,r2
   10858:	01017db4 	movhi	r4,1526
   1085c:	21384004 	addi	r4,r4,-7936
   10860:	000c8300 	call	c830 <__udivsi3>
   10864:	100b883a 	mov	r5,r2
   10868:	01200034 	movhi	r4,32768
   1086c:	213fffc4 	addi	r4,r4,-1
   10870:	000c8300 	call	c830 <__udivsi3>
   10874:	1007883a 	mov	r3,r2
   10878:	e0bfff17 	ldw	r2,-4(fp)
   1087c:	10c5c83a 	sub	r2,r2,r3
   10880:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10884:	e0bffc17 	ldw	r2,-16(fp)
   10888:	10800044 	addi	r2,r2,1
   1088c:	e0bffc15 	stw	r2,-16(fp)
   10890:	e0fffc17 	ldw	r3,-16(fp)
   10894:	e0bffe17 	ldw	r2,-8(fp)
   10898:	18bfe616 	blt	r3,r2,10834 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1089c:	014003f4 	movhi	r5,15
   108a0:	29509004 	addi	r5,r5,16960
   108a4:	e13ffd17 	ldw	r4,-12(fp)
   108a8:	000c8ec0 	call	c8ec <__mulsi3>
   108ac:	100b883a 	mov	r5,r2
   108b0:	01017db4 	movhi	r4,1526
   108b4:	21384004 	addi	r4,r4,-7936
   108b8:	000c8300 	call	c830 <__udivsi3>
   108bc:	e17fff17 	ldw	r5,-4(fp)
   108c0:	1009883a 	mov	r4,r2
   108c4:	000c8ec0 	call	c8ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   108c8:	10bfffc4 	addi	r2,r2,-1
   108cc:	103ffe1e 	bne	r2,zero,108c8 <alt_busy_sleep+0x100>
   108d0:	00000d06 	br	10908 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   108d4:	014003f4 	movhi	r5,15
   108d8:	29509004 	addi	r5,r5,16960
   108dc:	e13ffd17 	ldw	r4,-12(fp)
   108e0:	000c8ec0 	call	c8ec <__mulsi3>
   108e4:	100b883a 	mov	r5,r2
   108e8:	01017db4 	movhi	r4,1526
   108ec:	21384004 	addi	r4,r4,-7936
   108f0:	000c8300 	call	c830 <__udivsi3>
   108f4:	e17fff17 	ldw	r5,-4(fp)
   108f8:	1009883a 	mov	r4,r2
   108fc:	000c8ec0 	call	c8ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10900:	10bfffc4 	addi	r2,r2,-1
   10904:	00bffe16 	blt	zero,r2,10900 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10908:	0005883a 	mov	r2,zero
}
   1090c:	e037883a 	mov	sp,fp
   10910:	dfc00117 	ldw	ra,4(sp)
   10914:	df000017 	ldw	fp,0(sp)
   10918:	dec00204 	addi	sp,sp,8
   1091c:	f800283a 	ret

00010920 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10920:	deffff04 	addi	sp,sp,-4
   10924:	df000015 	stw	fp,0(sp)
   10928:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1092c:	0001883a 	nop
   10930:	e037883a 	mov	sp,fp
   10934:	df000017 	ldw	fp,0(sp)
   10938:	dec00104 	addi	sp,sp,4
   1093c:	f800283a 	ret

00010940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10940:	defffe04 	addi	sp,sp,-8
   10944:	dfc00115 	stw	ra,4(sp)
   10948:	df000015 	stw	fp,0(sp)
   1094c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10950:	d0a00b17 	ldw	r2,-32724(gp)
   10954:	10000326 	beq	r2,zero,10964 <alt_get_errno+0x24>
   10958:	d0a00b17 	ldw	r2,-32724(gp)
   1095c:	103ee83a 	callr	r2
   10960:	00000106 	br	10968 <alt_get_errno+0x28>
   10964:	d0a6d204 	addi	r2,gp,-25784
}
   10968:	e037883a 	mov	sp,fp
   1096c:	dfc00117 	ldw	ra,4(sp)
   10970:	df000017 	ldw	fp,0(sp)
   10974:	dec00204 	addi	sp,sp,8
   10978:	f800283a 	ret

0001097c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1097c:	defffa04 	addi	sp,sp,-24
   10980:	dfc00515 	stw	ra,20(sp)
   10984:	df000415 	stw	fp,16(sp)
   10988:	df000404 	addi	fp,sp,16
   1098c:	e13ffe15 	stw	r4,-8(fp)
   10990:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10994:	e0bffe17 	ldw	r2,-8(fp)
   10998:	10000326 	beq	r2,zero,109a8 <alt_dev_llist_insert+0x2c>
   1099c:	e0bffe17 	ldw	r2,-8(fp)
   109a0:	10800217 	ldw	r2,8(r2)
   109a4:	1000061e 	bne	r2,zero,109c0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   109a8:	00109400 	call	10940 <alt_get_errno>
   109ac:	1007883a 	mov	r3,r2
   109b0:	00800584 	movi	r2,22
   109b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   109b8:	00bffa84 	movi	r2,-22
   109bc:	00001306 	br	10a0c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   109c0:	e0bffe17 	ldw	r2,-8(fp)
   109c4:	e0ffff17 	ldw	r3,-4(fp)
   109c8:	e0fffc15 	stw	r3,-16(fp)
   109cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   109d0:	e0bffd17 	ldw	r2,-12(fp)
   109d4:	e0fffc17 	ldw	r3,-16(fp)
   109d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   109dc:	e0bffc17 	ldw	r2,-16(fp)
   109e0:	10c00017 	ldw	r3,0(r2)
   109e4:	e0bffd17 	ldw	r2,-12(fp)
   109e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   109ec:	e0bffc17 	ldw	r2,-16(fp)
   109f0:	10800017 	ldw	r2,0(r2)
   109f4:	e0fffd17 	ldw	r3,-12(fp)
   109f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   109fc:	e0bffc17 	ldw	r2,-16(fp)
   10a00:	e0fffd17 	ldw	r3,-12(fp)
   10a04:	10c00015 	stw	r3,0(r2)

  return 0;  
   10a08:	0005883a 	mov	r2,zero
}
   10a0c:	e037883a 	mov	sp,fp
   10a10:	dfc00117 	ldw	ra,4(sp)
   10a14:	df000017 	ldw	fp,0(sp)
   10a18:	dec00204 	addi	sp,sp,8
   10a1c:	f800283a 	ret

00010a20 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10a20:	defffd04 	addi	sp,sp,-12
   10a24:	dfc00215 	stw	ra,8(sp)
   10a28:	df000115 	stw	fp,4(sp)
   10a2c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10a30:	00800074 	movhi	r2,1
   10a34:	10867504 	addi	r2,r2,6612
   10a38:	e0bfff15 	stw	r2,-4(fp)
   10a3c:	00000606 	br	10a58 <_do_ctors+0x38>
        (*ctor) (); 
   10a40:	e0bfff17 	ldw	r2,-4(fp)
   10a44:	10800017 	ldw	r2,0(r2)
   10a48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10a4c:	e0bfff17 	ldw	r2,-4(fp)
   10a50:	10bfff04 	addi	r2,r2,-4
   10a54:	e0bfff15 	stw	r2,-4(fp)
   10a58:	e0ffff17 	ldw	r3,-4(fp)
   10a5c:	00800074 	movhi	r2,1
   10a60:	10867604 	addi	r2,r2,6616
   10a64:	18bff62e 	bgeu	r3,r2,10a40 <_do_ctors+0x20>
        (*ctor) (); 
}
   10a68:	0001883a 	nop
   10a6c:	e037883a 	mov	sp,fp
   10a70:	dfc00117 	ldw	ra,4(sp)
   10a74:	df000017 	ldw	fp,0(sp)
   10a78:	dec00204 	addi	sp,sp,8
   10a7c:	f800283a 	ret

00010a80 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10a80:	defffd04 	addi	sp,sp,-12
   10a84:	dfc00215 	stw	ra,8(sp)
   10a88:	df000115 	stw	fp,4(sp)
   10a8c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10a90:	00800074 	movhi	r2,1
   10a94:	10867504 	addi	r2,r2,6612
   10a98:	e0bfff15 	stw	r2,-4(fp)
   10a9c:	00000606 	br	10ab8 <_do_dtors+0x38>
        (*dtor) (); 
   10aa0:	e0bfff17 	ldw	r2,-4(fp)
   10aa4:	10800017 	ldw	r2,0(r2)
   10aa8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10aac:	e0bfff17 	ldw	r2,-4(fp)
   10ab0:	10bfff04 	addi	r2,r2,-4
   10ab4:	e0bfff15 	stw	r2,-4(fp)
   10ab8:	e0ffff17 	ldw	r3,-4(fp)
   10abc:	00800074 	movhi	r2,1
   10ac0:	10867604 	addi	r2,r2,6616
   10ac4:	18bff62e 	bgeu	r3,r2,10aa0 <_do_dtors+0x20>
        (*dtor) (); 
}
   10ac8:	0001883a 	nop
   10acc:	e037883a 	mov	sp,fp
   10ad0:	dfc00117 	ldw	ra,4(sp)
   10ad4:	df000017 	ldw	fp,0(sp)
   10ad8:	dec00204 	addi	sp,sp,8
   10adc:	f800283a 	ret

00010ae0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10ae0:	deffff04 	addi	sp,sp,-4
   10ae4:	df000015 	stw	fp,0(sp)
   10ae8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10aec:	0001883a 	nop
   10af0:	e037883a 	mov	sp,fp
   10af4:	df000017 	ldw	fp,0(sp)
   10af8:	dec00104 	addi	sp,sp,4
   10afc:	f800283a 	ret

00010b00 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10b00:	defff904 	addi	sp,sp,-28
   10b04:	dfc00615 	stw	ra,24(sp)
   10b08:	df000515 	stw	fp,20(sp)
   10b0c:	df000504 	addi	fp,sp,20
   10b10:	e13ffc15 	stw	r4,-16(fp)
   10b14:	e17ffd15 	stw	r5,-12(fp)
   10b18:	e1bffe15 	stw	r6,-8(fp)
   10b1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10b20:	e0800217 	ldw	r2,8(fp)
   10b24:	d8800015 	stw	r2,0(sp)
   10b28:	e1ffff17 	ldw	r7,-4(fp)
   10b2c:	e1bffe17 	ldw	r6,-8(fp)
   10b30:	e17ffd17 	ldw	r5,-12(fp)
   10b34:	e13ffc17 	ldw	r4,-16(fp)
   10b38:	0010cb00 	call	10cb0 <alt_iic_isr_register>
}  
   10b3c:	e037883a 	mov	sp,fp
   10b40:	dfc00117 	ldw	ra,4(sp)
   10b44:	df000017 	ldw	fp,0(sp)
   10b48:	dec00204 	addi	sp,sp,8
   10b4c:	f800283a 	ret

00010b50 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10b50:	defff904 	addi	sp,sp,-28
   10b54:	df000615 	stw	fp,24(sp)
   10b58:	df000604 	addi	fp,sp,24
   10b5c:	e13ffe15 	stw	r4,-8(fp)
   10b60:	e17fff15 	stw	r5,-4(fp)
   10b64:	e0bfff17 	ldw	r2,-4(fp)
   10b68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b6c:	0005303a 	rdctl	r2,status
   10b70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b74:	e0fffb17 	ldw	r3,-20(fp)
   10b78:	00bfff84 	movi	r2,-2
   10b7c:	1884703a 	and	r2,r3,r2
   10b80:	1001703a 	wrctl	status,r2
  
  return context;
   10b84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10b88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10b8c:	00c00044 	movi	r3,1
   10b90:	e0bffa17 	ldw	r2,-24(fp)
   10b94:	1884983a 	sll	r2,r3,r2
   10b98:	1007883a 	mov	r3,r2
   10b9c:	d0a6d617 	ldw	r2,-25768(gp)
   10ba0:	1884b03a 	or	r2,r3,r2
   10ba4:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ba8:	d0a6d617 	ldw	r2,-25768(gp)
   10bac:	100170fa 	wrctl	ienable,r2
   10bb0:	e0bffc17 	ldw	r2,-16(fp)
   10bb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bb8:	e0bffd17 	ldw	r2,-12(fp)
   10bbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10bc0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10bc4:	0001883a 	nop
}
   10bc8:	e037883a 	mov	sp,fp
   10bcc:	df000017 	ldw	fp,0(sp)
   10bd0:	dec00104 	addi	sp,sp,4
   10bd4:	f800283a 	ret

00010bd8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10bd8:	defff904 	addi	sp,sp,-28
   10bdc:	df000615 	stw	fp,24(sp)
   10be0:	df000604 	addi	fp,sp,24
   10be4:	e13ffe15 	stw	r4,-8(fp)
   10be8:	e17fff15 	stw	r5,-4(fp)
   10bec:	e0bfff17 	ldw	r2,-4(fp)
   10bf0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10bf4:	0005303a 	rdctl	r2,status
   10bf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bfc:	e0fffb17 	ldw	r3,-20(fp)
   10c00:	00bfff84 	movi	r2,-2
   10c04:	1884703a 	and	r2,r3,r2
   10c08:	1001703a 	wrctl	status,r2
  
  return context;
   10c0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10c10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10c14:	00c00044 	movi	r3,1
   10c18:	e0bffa17 	ldw	r2,-24(fp)
   10c1c:	1884983a 	sll	r2,r3,r2
   10c20:	0084303a 	nor	r2,zero,r2
   10c24:	1007883a 	mov	r3,r2
   10c28:	d0a6d617 	ldw	r2,-25768(gp)
   10c2c:	1884703a 	and	r2,r3,r2
   10c30:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c34:	d0a6d617 	ldw	r2,-25768(gp)
   10c38:	100170fa 	wrctl	ienable,r2
   10c3c:	e0bffc17 	ldw	r2,-16(fp)
   10c40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c44:	e0bffd17 	ldw	r2,-12(fp)
   10c48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10c4c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10c50:	0001883a 	nop
}
   10c54:	e037883a 	mov	sp,fp
   10c58:	df000017 	ldw	fp,0(sp)
   10c5c:	dec00104 	addi	sp,sp,4
   10c60:	f800283a 	ret

00010c64 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10c64:	defffc04 	addi	sp,sp,-16
   10c68:	df000315 	stw	fp,12(sp)
   10c6c:	df000304 	addi	fp,sp,12
   10c70:	e13ffe15 	stw	r4,-8(fp)
   10c74:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10c78:	000530fa 	rdctl	r2,ienable
   10c7c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10c80:	00c00044 	movi	r3,1
   10c84:	e0bfff17 	ldw	r2,-4(fp)
   10c88:	1884983a 	sll	r2,r3,r2
   10c8c:	1007883a 	mov	r3,r2
   10c90:	e0bffd17 	ldw	r2,-12(fp)
   10c94:	1884703a 	and	r2,r3,r2
   10c98:	1004c03a 	cmpne	r2,r2,zero
   10c9c:	10803fcc 	andi	r2,r2,255
}
   10ca0:	e037883a 	mov	sp,fp
   10ca4:	df000017 	ldw	fp,0(sp)
   10ca8:	dec00104 	addi	sp,sp,4
   10cac:	f800283a 	ret

00010cb0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10cb0:	defff504 	addi	sp,sp,-44
   10cb4:	dfc00a15 	stw	ra,40(sp)
   10cb8:	df000915 	stw	fp,36(sp)
   10cbc:	df000904 	addi	fp,sp,36
   10cc0:	e13ffc15 	stw	r4,-16(fp)
   10cc4:	e17ffd15 	stw	r5,-12(fp)
   10cc8:	e1bffe15 	stw	r6,-8(fp)
   10ccc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10cd0:	00bffa84 	movi	r2,-22
   10cd4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10cd8:	e0bffd17 	ldw	r2,-12(fp)
   10cdc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10ce0:	e0bff817 	ldw	r2,-32(fp)
   10ce4:	10800808 	cmpgei	r2,r2,32
   10ce8:	1000271e 	bne	r2,zero,10d88 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cec:	0005303a 	rdctl	r2,status
   10cf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cf4:	e0fffb17 	ldw	r3,-20(fp)
   10cf8:	00bfff84 	movi	r2,-2
   10cfc:	1884703a 	and	r2,r3,r2
   10d00:	1001703a 	wrctl	status,r2
  
  return context;
   10d04:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10d08:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10d0c:	00800074 	movhi	r2,1
   10d10:	1096a704 	addi	r2,r2,23196
   10d14:	e0fff817 	ldw	r3,-32(fp)
   10d18:	180690fa 	slli	r3,r3,3
   10d1c:	10c5883a 	add	r2,r2,r3
   10d20:	e0fffe17 	ldw	r3,-8(fp)
   10d24:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10d28:	00800074 	movhi	r2,1
   10d2c:	1096a704 	addi	r2,r2,23196
   10d30:	e0fff817 	ldw	r3,-32(fp)
   10d34:	180690fa 	slli	r3,r3,3
   10d38:	10c5883a 	add	r2,r2,r3
   10d3c:	10800104 	addi	r2,r2,4
   10d40:	e0ffff17 	ldw	r3,-4(fp)
   10d44:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10d48:	e0bffe17 	ldw	r2,-8(fp)
   10d4c:	10000526 	beq	r2,zero,10d64 <alt_iic_isr_register+0xb4>
   10d50:	e0bff817 	ldw	r2,-32(fp)
   10d54:	100b883a 	mov	r5,r2
   10d58:	e13ffc17 	ldw	r4,-16(fp)
   10d5c:	0010b500 	call	10b50 <alt_ic_irq_enable>
   10d60:	00000406 	br	10d74 <alt_iic_isr_register+0xc4>
   10d64:	e0bff817 	ldw	r2,-32(fp)
   10d68:	100b883a 	mov	r5,r2
   10d6c:	e13ffc17 	ldw	r4,-16(fp)
   10d70:	0010bd80 	call	10bd8 <alt_ic_irq_disable>
   10d74:	e0bff715 	stw	r2,-36(fp)
   10d78:	e0bffa17 	ldw	r2,-24(fp)
   10d7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d80:	e0bff917 	ldw	r2,-28(fp)
   10d84:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10d88:	e0bff717 	ldw	r2,-36(fp)
}
   10d8c:	e037883a 	mov	sp,fp
   10d90:	dfc00117 	ldw	ra,4(sp)
   10d94:	df000017 	ldw	fp,0(sp)
   10d98:	dec00204 	addi	sp,sp,8
   10d9c:	f800283a 	ret

00010da0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10da0:	defff804 	addi	sp,sp,-32
   10da4:	dfc00715 	stw	ra,28(sp)
   10da8:	df000615 	stw	fp,24(sp)
   10dac:	dc000515 	stw	r16,20(sp)
   10db0:	df000604 	addi	fp,sp,24
   10db4:	e13ffb15 	stw	r4,-20(fp)
   10db8:	e17ffc15 	stw	r5,-16(fp)
   10dbc:	e1bffd15 	stw	r6,-12(fp)
   10dc0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   10dc4:	e1bffe17 	ldw	r6,-8(fp)
   10dc8:	e17ffd17 	ldw	r5,-12(fp)
   10dcc:	e13ffc17 	ldw	r4,-16(fp)
   10dd0:	00110280 	call	11028 <open>
   10dd4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   10dd8:	e0bffa17 	ldw	r2,-24(fp)
   10ddc:	10002216 	blt	r2,zero,10e68 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   10de0:	04000074 	movhi	r16,1
   10de4:	840b4b04 	addi	r16,r16,11564
   10de8:	e0bffa17 	ldw	r2,-24(fp)
   10dec:	01400304 	movi	r5,12
   10df0:	1009883a 	mov	r4,r2
   10df4:	000c8ec0 	call	c8ec <__mulsi3>
   10df8:	8085883a 	add	r2,r16,r2
   10dfc:	10c00017 	ldw	r3,0(r2)
   10e00:	e0bffb17 	ldw	r2,-20(fp)
   10e04:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10e08:	04000074 	movhi	r16,1
   10e0c:	840b4b04 	addi	r16,r16,11564
   10e10:	e0bffa17 	ldw	r2,-24(fp)
   10e14:	01400304 	movi	r5,12
   10e18:	1009883a 	mov	r4,r2
   10e1c:	000c8ec0 	call	c8ec <__mulsi3>
   10e20:	8085883a 	add	r2,r16,r2
   10e24:	10800104 	addi	r2,r2,4
   10e28:	10c00017 	ldw	r3,0(r2)
   10e2c:	e0bffb17 	ldw	r2,-20(fp)
   10e30:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10e34:	04000074 	movhi	r16,1
   10e38:	840b4b04 	addi	r16,r16,11564
   10e3c:	e0bffa17 	ldw	r2,-24(fp)
   10e40:	01400304 	movi	r5,12
   10e44:	1009883a 	mov	r4,r2
   10e48:	000c8ec0 	call	c8ec <__mulsi3>
   10e4c:	8085883a 	add	r2,r16,r2
   10e50:	10800204 	addi	r2,r2,8
   10e54:	10c00017 	ldw	r3,0(r2)
   10e58:	e0bffb17 	ldw	r2,-20(fp)
   10e5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10e60:	e13ffa17 	ldw	r4,-24(fp)
   10e64:	000f8dc0 	call	f8dc <alt_release_fd>
  }
} 
   10e68:	0001883a 	nop
   10e6c:	e6ffff04 	addi	sp,fp,-4
   10e70:	dfc00217 	ldw	ra,8(sp)
   10e74:	df000117 	ldw	fp,4(sp)
   10e78:	dc000017 	ldw	r16,0(sp)
   10e7c:	dec00304 	addi	sp,sp,12
   10e80:	f800283a 	ret

00010e84 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10e84:	defffb04 	addi	sp,sp,-20
   10e88:	dfc00415 	stw	ra,16(sp)
   10e8c:	df000315 	stw	fp,12(sp)
   10e90:	df000304 	addi	fp,sp,12
   10e94:	e13ffd15 	stw	r4,-12(fp)
   10e98:	e17ffe15 	stw	r5,-8(fp)
   10e9c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10ea0:	01c07fc4 	movi	r7,511
   10ea4:	01800044 	movi	r6,1
   10ea8:	e17ffd17 	ldw	r5,-12(fp)
   10eac:	01000074 	movhi	r4,1
   10eb0:	210b4e04 	addi	r4,r4,11576
   10eb4:	0010da00 	call	10da0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10eb8:	01c07fc4 	movi	r7,511
   10ebc:	000d883a 	mov	r6,zero
   10ec0:	e17ffe17 	ldw	r5,-8(fp)
   10ec4:	01000074 	movhi	r4,1
   10ec8:	210b4b04 	addi	r4,r4,11564
   10ecc:	0010da00 	call	10da0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10ed0:	01c07fc4 	movi	r7,511
   10ed4:	01800044 	movi	r6,1
   10ed8:	e17fff17 	ldw	r5,-4(fp)
   10edc:	01000074 	movhi	r4,1
   10ee0:	210b5104 	addi	r4,r4,11588
   10ee4:	0010da00 	call	10da0 <alt_open_fd>
}  
   10ee8:	0001883a 	nop
   10eec:	e037883a 	mov	sp,fp
   10ef0:	dfc00117 	ldw	ra,4(sp)
   10ef4:	df000017 	ldw	fp,0(sp)
   10ef8:	dec00204 	addi	sp,sp,8
   10efc:	f800283a 	ret

00010f00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f00:	defffe04 	addi	sp,sp,-8
   10f04:	dfc00115 	stw	ra,4(sp)
   10f08:	df000015 	stw	fp,0(sp)
   10f0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10f10:	d0a00b17 	ldw	r2,-32724(gp)
   10f14:	10000326 	beq	r2,zero,10f24 <alt_get_errno+0x24>
   10f18:	d0a00b17 	ldw	r2,-32724(gp)
   10f1c:	103ee83a 	callr	r2
   10f20:	00000106 	br	10f28 <alt_get_errno+0x28>
   10f24:	d0a6d204 	addi	r2,gp,-25784
}
   10f28:	e037883a 	mov	sp,fp
   10f2c:	dfc00117 	ldw	ra,4(sp)
   10f30:	df000017 	ldw	fp,0(sp)
   10f34:	dec00204 	addi	sp,sp,8
   10f38:	f800283a 	ret

00010f3c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10f3c:	defffb04 	addi	sp,sp,-20
   10f40:	dfc00415 	stw	ra,16(sp)
   10f44:	df000315 	stw	fp,12(sp)
   10f48:	dc000215 	stw	r16,8(sp)
   10f4c:	df000304 	addi	fp,sp,12
   10f50:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10f54:	e0bffe17 	ldw	r2,-8(fp)
   10f58:	10800217 	ldw	r2,8(r2)
   10f5c:	10d00034 	orhi	r3,r2,16384
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10f68:	e03ffd15 	stw	zero,-12(fp)
   10f6c:	00002306 	br	10ffc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10f70:	04000074 	movhi	r16,1
   10f74:	840b4b04 	addi	r16,r16,11564
   10f78:	e0bffd17 	ldw	r2,-12(fp)
   10f7c:	01400304 	movi	r5,12
   10f80:	1009883a 	mov	r4,r2
   10f84:	000c8ec0 	call	c8ec <__mulsi3>
   10f88:	8085883a 	add	r2,r16,r2
   10f8c:	10c00017 	ldw	r3,0(r2)
   10f90:	e0bffe17 	ldw	r2,-8(fp)
   10f94:	10800017 	ldw	r2,0(r2)
   10f98:	1880151e 	bne	r3,r2,10ff0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10f9c:	04000074 	movhi	r16,1
   10fa0:	840b4b04 	addi	r16,r16,11564
   10fa4:	e0bffd17 	ldw	r2,-12(fp)
   10fa8:	01400304 	movi	r5,12
   10fac:	1009883a 	mov	r4,r2
   10fb0:	000c8ec0 	call	c8ec <__mulsi3>
   10fb4:	8085883a 	add	r2,r16,r2
   10fb8:	10800204 	addi	r2,r2,8
   10fbc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10fc0:	10000b0e 	bge	r2,zero,10ff0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10fc4:	01400304 	movi	r5,12
   10fc8:	e13ffd17 	ldw	r4,-12(fp)
   10fcc:	000c8ec0 	call	c8ec <__mulsi3>
   10fd0:	1007883a 	mov	r3,r2
   10fd4:	00800074 	movhi	r2,1
   10fd8:	108b4b04 	addi	r2,r2,11564
   10fdc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10fe0:	e0bffe17 	ldw	r2,-8(fp)
   10fe4:	18800226 	beq	r3,r2,10ff0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10fe8:	00bffcc4 	movi	r2,-13
   10fec:	00000806 	br	11010 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10ff0:	e0bffd17 	ldw	r2,-12(fp)
   10ff4:	10800044 	addi	r2,r2,1
   10ff8:	e0bffd15 	stw	r2,-12(fp)
   10ffc:	d0a00a17 	ldw	r2,-32728(gp)
   11000:	1007883a 	mov	r3,r2
   11004:	e0bffd17 	ldw	r2,-12(fp)
   11008:	18bfd92e 	bgeu	r3,r2,10f70 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1100c:	0005883a 	mov	r2,zero
}
   11010:	e6ffff04 	addi	sp,fp,-4
   11014:	dfc00217 	ldw	ra,8(sp)
   11018:	df000117 	ldw	fp,4(sp)
   1101c:	dc000017 	ldw	r16,0(sp)
   11020:	dec00304 	addi	sp,sp,12
   11024:	f800283a 	ret

00011028 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11028:	defff604 	addi	sp,sp,-40
   1102c:	dfc00915 	stw	ra,36(sp)
   11030:	df000815 	stw	fp,32(sp)
   11034:	df000804 	addi	fp,sp,32
   11038:	e13ffd15 	stw	r4,-12(fp)
   1103c:	e17ffe15 	stw	r5,-8(fp)
   11040:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11044:	00bfffc4 	movi	r2,-1
   11048:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1104c:	00bffb44 	movi	r2,-19
   11050:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11054:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11058:	d1600804 	addi	r5,gp,-32736
   1105c:	e13ffd17 	ldw	r4,-12(fp)
   11060:	001134c0 	call	1134c <alt_find_dev>
   11064:	e0bff815 	stw	r2,-32(fp)
   11068:	e0bff817 	ldw	r2,-32(fp)
   1106c:	1000051e 	bne	r2,zero,11084 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11070:	e13ffd17 	ldw	r4,-12(fp)
   11074:	00113dc0 	call	113dc <alt_find_file>
   11078:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1107c:	00800044 	movi	r2,1
   11080:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11084:	e0bff817 	ldw	r2,-32(fp)
   11088:	10002b26 	beq	r2,zero,11138 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1108c:	e13ff817 	ldw	r4,-32(fp)
   11090:	00114e40 	call	114e4 <alt_get_fd>
   11094:	e0bff915 	stw	r2,-28(fp)
   11098:	e0bff917 	ldw	r2,-28(fp)
   1109c:	1000030e 	bge	r2,zero,110ac <open+0x84>
    {
      status = index;
   110a0:	e0bff917 	ldw	r2,-28(fp)
   110a4:	e0bffa15 	stw	r2,-24(fp)
   110a8:	00002506 	br	11140 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   110ac:	01400304 	movi	r5,12
   110b0:	e13ff917 	ldw	r4,-28(fp)
   110b4:	000c8ec0 	call	c8ec <__mulsi3>
   110b8:	1007883a 	mov	r3,r2
   110bc:	00800074 	movhi	r2,1
   110c0:	108b4b04 	addi	r2,r2,11564
   110c4:	1885883a 	add	r2,r3,r2
   110c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   110cc:	e0fffe17 	ldw	r3,-8(fp)
   110d0:	00900034 	movhi	r2,16384
   110d4:	10bfffc4 	addi	r2,r2,-1
   110d8:	1886703a 	and	r3,r3,r2
   110dc:	e0bffc17 	ldw	r2,-16(fp)
   110e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   110e4:	e0bffb17 	ldw	r2,-20(fp)
   110e8:	1000051e 	bne	r2,zero,11100 <open+0xd8>
   110ec:	e13ffc17 	ldw	r4,-16(fp)
   110f0:	0010f3c0 	call	10f3c <alt_file_locked>
   110f4:	e0bffa15 	stw	r2,-24(fp)
   110f8:	e0bffa17 	ldw	r2,-24(fp)
   110fc:	10001016 	blt	r2,zero,11140 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11100:	e0bff817 	ldw	r2,-32(fp)
   11104:	10800317 	ldw	r2,12(r2)
   11108:	10000826 	beq	r2,zero,1112c <open+0x104>
   1110c:	e0bff817 	ldw	r2,-32(fp)
   11110:	10800317 	ldw	r2,12(r2)
   11114:	e1ffff17 	ldw	r7,-4(fp)
   11118:	e1bffe17 	ldw	r6,-8(fp)
   1111c:	e17ffd17 	ldw	r5,-12(fp)
   11120:	e13ffc17 	ldw	r4,-16(fp)
   11124:	103ee83a 	callr	r2
   11128:	00000106 	br	11130 <open+0x108>
   1112c:	0005883a 	mov	r2,zero
   11130:	e0bffa15 	stw	r2,-24(fp)
   11134:	00000206 	br	11140 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11138:	00bffb44 	movi	r2,-19
   1113c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11140:	e0bffa17 	ldw	r2,-24(fp)
   11144:	1000090e 	bge	r2,zero,1116c <open+0x144>
  {
    alt_release_fd (index);  
   11148:	e13ff917 	ldw	r4,-28(fp)
   1114c:	000f8dc0 	call	f8dc <alt_release_fd>
    ALT_ERRNO = -status;
   11150:	0010f000 	call	10f00 <alt_get_errno>
   11154:	1007883a 	mov	r3,r2
   11158:	e0bffa17 	ldw	r2,-24(fp)
   1115c:	0085c83a 	sub	r2,zero,r2
   11160:	18800015 	stw	r2,0(r3)
    return -1;
   11164:	00bfffc4 	movi	r2,-1
   11168:	00000106 	br	11170 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1116c:	e0bff917 	ldw	r2,-28(fp)
}
   11170:	e037883a 	mov	sp,fp
   11174:	dfc00117 	ldw	ra,4(sp)
   11178:	df000017 	ldw	fp,0(sp)
   1117c:	dec00204 	addi	sp,sp,8
   11180:	f800283a 	ret

00011184 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11184:	defffa04 	addi	sp,sp,-24
   11188:	df000515 	stw	fp,20(sp)
   1118c:	df000504 	addi	fp,sp,20
   11190:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11194:	0005303a 	rdctl	r2,status
   11198:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1119c:	e0fffc17 	ldw	r3,-16(fp)
   111a0:	00bfff84 	movi	r2,-2
   111a4:	1884703a 	and	r2,r3,r2
   111a8:	1001703a 	wrctl	status,r2
  
  return context;
   111ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   111b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   111b4:	e0bfff17 	ldw	r2,-4(fp)
   111b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   111bc:	e0bffd17 	ldw	r2,-12(fp)
   111c0:	10800017 	ldw	r2,0(r2)
   111c4:	e0fffd17 	ldw	r3,-12(fp)
   111c8:	18c00117 	ldw	r3,4(r3)
   111cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   111d0:	e0bffd17 	ldw	r2,-12(fp)
   111d4:	10800117 	ldw	r2,4(r2)
   111d8:	e0fffd17 	ldw	r3,-12(fp)
   111dc:	18c00017 	ldw	r3,0(r3)
   111e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   111e4:	e0bffd17 	ldw	r2,-12(fp)
   111e8:	e0fffd17 	ldw	r3,-12(fp)
   111ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   111f0:	e0bffd17 	ldw	r2,-12(fp)
   111f4:	e0fffd17 	ldw	r3,-12(fp)
   111f8:	10c00015 	stw	r3,0(r2)
   111fc:	e0bffb17 	ldw	r2,-20(fp)
   11200:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11204:	e0bffe17 	ldw	r2,-8(fp)
   11208:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1120c:	0001883a 	nop
   11210:	e037883a 	mov	sp,fp
   11214:	df000017 	ldw	fp,0(sp)
   11218:	dec00104 	addi	sp,sp,4
   1121c:	f800283a 	ret

00011220 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11220:	defffb04 	addi	sp,sp,-20
   11224:	dfc00415 	stw	ra,16(sp)
   11228:	df000315 	stw	fp,12(sp)
   1122c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11230:	d0a00e17 	ldw	r2,-32712(gp)
   11234:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11238:	d0a6d817 	ldw	r2,-25760(gp)
   1123c:	10800044 	addi	r2,r2,1
   11240:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11244:	00002e06 	br	11300 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11248:	e0bffd17 	ldw	r2,-12(fp)
   1124c:	10800017 	ldw	r2,0(r2)
   11250:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	10800403 	ldbu	r2,16(r2)
   1125c:	10803fcc 	andi	r2,r2,255
   11260:	10000426 	beq	r2,zero,11274 <alt_tick+0x54>
   11264:	d0a6d817 	ldw	r2,-25760(gp)
   11268:	1000021e 	bne	r2,zero,11274 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1126c:	e0bffd17 	ldw	r2,-12(fp)
   11270:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11274:	e0bffd17 	ldw	r2,-12(fp)
   11278:	10800217 	ldw	r2,8(r2)
   1127c:	d0e6d817 	ldw	r3,-25760(gp)
   11280:	18801d36 	bltu	r3,r2,112f8 <alt_tick+0xd8>
   11284:	e0bffd17 	ldw	r2,-12(fp)
   11288:	10800403 	ldbu	r2,16(r2)
   1128c:	10803fcc 	andi	r2,r2,255
   11290:	1000191e 	bne	r2,zero,112f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11294:	e0bffd17 	ldw	r2,-12(fp)
   11298:	10800317 	ldw	r2,12(r2)
   1129c:	e0fffd17 	ldw	r3,-12(fp)
   112a0:	18c00517 	ldw	r3,20(r3)
   112a4:	1809883a 	mov	r4,r3
   112a8:	103ee83a 	callr	r2
   112ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   112b0:	e0bfff17 	ldw	r2,-4(fp)
   112b4:	1000031e 	bne	r2,zero,112c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   112b8:	e13ffd17 	ldw	r4,-12(fp)
   112bc:	00111840 	call	11184 <alt_alarm_stop>
   112c0:	00000d06 	br	112f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   112c4:	e0bffd17 	ldw	r2,-12(fp)
   112c8:	10c00217 	ldw	r3,8(r2)
   112cc:	e0bfff17 	ldw	r2,-4(fp)
   112d0:	1887883a 	add	r3,r3,r2
   112d4:	e0bffd17 	ldw	r2,-12(fp)
   112d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   112dc:	e0bffd17 	ldw	r2,-12(fp)
   112e0:	10c00217 	ldw	r3,8(r2)
   112e4:	d0a6d817 	ldw	r2,-25760(gp)
   112e8:	1880032e 	bgeu	r3,r2,112f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   112ec:	e0bffd17 	ldw	r2,-12(fp)
   112f0:	00c00044 	movi	r3,1
   112f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   112f8:	e0bffe17 	ldw	r2,-8(fp)
   112fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11300:	e0fffd17 	ldw	r3,-12(fp)
   11304:	d0a00e04 	addi	r2,gp,-32712
   11308:	18bfcf1e 	bne	r3,r2,11248 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1130c:	0001883a 	nop
}
   11310:	0001883a 	nop
   11314:	e037883a 	mov	sp,fp
   11318:	dfc00117 	ldw	ra,4(sp)
   1131c:	df000017 	ldw	fp,0(sp)
   11320:	dec00204 	addi	sp,sp,8
   11324:	f800283a 	ret

00011328 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11328:	deffff04 	addi	sp,sp,-4
   1132c:	df000015 	stw	fp,0(sp)
   11330:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11334:	000170fa 	wrctl	ienable,zero
}
   11338:	0001883a 	nop
   1133c:	e037883a 	mov	sp,fp
   11340:	df000017 	ldw	fp,0(sp)
   11344:	dec00104 	addi	sp,sp,4
   11348:	f800283a 	ret

0001134c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1134c:	defffa04 	addi	sp,sp,-24
   11350:	dfc00515 	stw	ra,20(sp)
   11354:	df000415 	stw	fp,16(sp)
   11358:	df000404 	addi	fp,sp,16
   1135c:	e13ffe15 	stw	r4,-8(fp)
   11360:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11364:	e0bfff17 	ldw	r2,-4(fp)
   11368:	10800017 	ldw	r2,0(r2)
   1136c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11370:	e13ffe17 	ldw	r4,-8(fp)
   11374:	00023b80 	call	23b8 <strlen>
   11378:	10800044 	addi	r2,r2,1
   1137c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11380:	00000d06 	br	113b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11384:	e0bffc17 	ldw	r2,-16(fp)
   11388:	10800217 	ldw	r2,8(r2)
   1138c:	e0fffd17 	ldw	r3,-12(fp)
   11390:	180d883a 	mov	r6,r3
   11394:	e17ffe17 	ldw	r5,-8(fp)
   11398:	1009883a 	mov	r4,r2
   1139c:	00116900 	call	11690 <memcmp>
   113a0:	1000021e 	bne	r2,zero,113ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   113a4:	e0bffc17 	ldw	r2,-16(fp)
   113a8:	00000706 	br	113c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   113ac:	e0bffc17 	ldw	r2,-16(fp)
   113b0:	10800017 	ldw	r2,0(r2)
   113b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   113b8:	e0fffc17 	ldw	r3,-16(fp)
   113bc:	e0bfff17 	ldw	r2,-4(fp)
   113c0:	18bff01e 	bne	r3,r2,11384 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   113c4:	0005883a 	mov	r2,zero
}
   113c8:	e037883a 	mov	sp,fp
   113cc:	dfc00117 	ldw	ra,4(sp)
   113d0:	df000017 	ldw	fp,0(sp)
   113d4:	dec00204 	addi	sp,sp,8
   113d8:	f800283a 	ret

000113dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   113dc:	defffb04 	addi	sp,sp,-20
   113e0:	dfc00415 	stw	ra,16(sp)
   113e4:	df000315 	stw	fp,12(sp)
   113e8:	df000304 	addi	fp,sp,12
   113ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   113f0:	d0a00617 	ldw	r2,-32744(gp)
   113f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   113f8:	00003106 	br	114c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   113fc:	e0bffd17 	ldw	r2,-12(fp)
   11400:	10800217 	ldw	r2,8(r2)
   11404:	1009883a 	mov	r4,r2
   11408:	00023b80 	call	23b8 <strlen>
   1140c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11410:	e0bffd17 	ldw	r2,-12(fp)
   11414:	10c00217 	ldw	r3,8(r2)
   11418:	e0bffe17 	ldw	r2,-8(fp)
   1141c:	10bfffc4 	addi	r2,r2,-1
   11420:	1885883a 	add	r2,r3,r2
   11424:	10800003 	ldbu	r2,0(r2)
   11428:	10803fcc 	andi	r2,r2,255
   1142c:	1080201c 	xori	r2,r2,128
   11430:	10bfe004 	addi	r2,r2,-128
   11434:	10800bd8 	cmpnei	r2,r2,47
   11438:	1000031e 	bne	r2,zero,11448 <alt_find_file+0x6c>
    {
      len -= 1;
   1143c:	e0bffe17 	ldw	r2,-8(fp)
   11440:	10bfffc4 	addi	r2,r2,-1
   11444:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11448:	e0bffe17 	ldw	r2,-8(fp)
   1144c:	e0ffff17 	ldw	r3,-4(fp)
   11450:	1885883a 	add	r2,r3,r2
   11454:	10800003 	ldbu	r2,0(r2)
   11458:	10803fcc 	andi	r2,r2,255
   1145c:	1080201c 	xori	r2,r2,128
   11460:	10bfe004 	addi	r2,r2,-128
   11464:	10800be0 	cmpeqi	r2,r2,47
   11468:	1000081e 	bne	r2,zero,1148c <alt_find_file+0xb0>
   1146c:	e0bffe17 	ldw	r2,-8(fp)
   11470:	e0ffff17 	ldw	r3,-4(fp)
   11474:	1885883a 	add	r2,r3,r2
   11478:	10800003 	ldbu	r2,0(r2)
   1147c:	10803fcc 	andi	r2,r2,255
   11480:	1080201c 	xori	r2,r2,128
   11484:	10bfe004 	addi	r2,r2,-128
   11488:	10000a1e 	bne	r2,zero,114b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1148c:	e0bffd17 	ldw	r2,-12(fp)
   11490:	10800217 	ldw	r2,8(r2)
   11494:	e0fffe17 	ldw	r3,-8(fp)
   11498:	180d883a 	mov	r6,r3
   1149c:	e17fff17 	ldw	r5,-4(fp)
   114a0:	1009883a 	mov	r4,r2
   114a4:	00116900 	call	11690 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   114a8:	1000021e 	bne	r2,zero,114b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   114ac:	e0bffd17 	ldw	r2,-12(fp)
   114b0:	00000706 	br	114d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   114b4:	e0bffd17 	ldw	r2,-12(fp)
   114b8:	10800017 	ldw	r2,0(r2)
   114bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   114c0:	e0fffd17 	ldw	r3,-12(fp)
   114c4:	d0a00604 	addi	r2,gp,-32744
   114c8:	18bfcc1e 	bne	r3,r2,113fc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   114cc:	0005883a 	mov	r2,zero
}
   114d0:	e037883a 	mov	sp,fp
   114d4:	dfc00117 	ldw	ra,4(sp)
   114d8:	df000017 	ldw	fp,0(sp)
   114dc:	dec00204 	addi	sp,sp,8
   114e0:	f800283a 	ret

000114e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   114e4:	defffa04 	addi	sp,sp,-24
   114e8:	dfc00515 	stw	ra,20(sp)
   114ec:	df000415 	stw	fp,16(sp)
   114f0:	dc000315 	stw	r16,12(sp)
   114f4:	df000404 	addi	fp,sp,16
   114f8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   114fc:	00bffa04 	movi	r2,-24
   11500:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11504:	e03ffc15 	stw	zero,-16(fp)
   11508:	00001d06 	br	11580 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1150c:	04000074 	movhi	r16,1
   11510:	840b4b04 	addi	r16,r16,11564
   11514:	e0bffc17 	ldw	r2,-16(fp)
   11518:	01400304 	movi	r5,12
   1151c:	1009883a 	mov	r4,r2
   11520:	000c8ec0 	call	c8ec <__mulsi3>
   11524:	8085883a 	add	r2,r16,r2
   11528:	10800017 	ldw	r2,0(r2)
   1152c:	1000111e 	bne	r2,zero,11574 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11530:	04000074 	movhi	r16,1
   11534:	840b4b04 	addi	r16,r16,11564
   11538:	e0bffc17 	ldw	r2,-16(fp)
   1153c:	01400304 	movi	r5,12
   11540:	1009883a 	mov	r4,r2
   11544:	000c8ec0 	call	c8ec <__mulsi3>
   11548:	8085883a 	add	r2,r16,r2
   1154c:	e0fffe17 	ldw	r3,-8(fp)
   11550:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11554:	d0e00a17 	ldw	r3,-32728(gp)
   11558:	e0bffc17 	ldw	r2,-16(fp)
   1155c:	1880020e 	bge	r3,r2,11568 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   11560:	e0bffc17 	ldw	r2,-16(fp)
   11564:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11568:	e0bffc17 	ldw	r2,-16(fp)
   1156c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11570:	00000606 	br	1158c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11574:	e0bffc17 	ldw	r2,-16(fp)
   11578:	10800044 	addi	r2,r2,1
   1157c:	e0bffc15 	stw	r2,-16(fp)
   11580:	e0bffc17 	ldw	r2,-16(fp)
   11584:	10800810 	cmplti	r2,r2,32
   11588:	103fe01e 	bne	r2,zero,1150c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1158c:	e0bffd17 	ldw	r2,-12(fp)
}
   11590:	e6ffff04 	addi	sp,fp,-4
   11594:	dfc00217 	ldw	ra,8(sp)
   11598:	df000117 	ldw	fp,4(sp)
   1159c:	dc000017 	ldw	r16,0(sp)
   115a0:	dec00304 	addi	sp,sp,12
   115a4:	f800283a 	ret

000115a8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   115a8:	defffe04 	addi	sp,sp,-8
   115ac:	df000115 	stw	fp,4(sp)
   115b0:	df000104 	addi	fp,sp,4
   115b4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   115b8:	e0bfff17 	ldw	r2,-4(fp)
   115bc:	10bffe84 	addi	r2,r2,-6
   115c0:	10c00428 	cmpgeui	r3,r2,16
   115c4:	18001a1e 	bne	r3,zero,11630 <alt_exception_cause_generated_bad_addr+0x88>
   115c8:	100690ba 	slli	r3,r2,2
   115cc:	00800074 	movhi	r2,1
   115d0:	10857804 	addi	r2,r2,5600
   115d4:	1885883a 	add	r2,r3,r2
   115d8:	10800017 	ldw	r2,0(r2)
   115dc:	1000683a 	jmp	r2
   115e0:	00011620 	cmpeqi	zero,zero,1112
   115e4:	00011620 	cmpeqi	zero,zero,1112
   115e8:	00011630 	cmpltui	zero,zero,1112
   115ec:	00011630 	cmpltui	zero,zero,1112
   115f0:	00011630 	cmpltui	zero,zero,1112
   115f4:	00011620 	cmpeqi	zero,zero,1112
   115f8:	00011628 	cmpgeui	zero,zero,1112
   115fc:	00011630 	cmpltui	zero,zero,1112
   11600:	00011620 	cmpeqi	zero,zero,1112
   11604:	00011620 	cmpeqi	zero,zero,1112
   11608:	00011630 	cmpltui	zero,zero,1112
   1160c:	00011620 	cmpeqi	zero,zero,1112
   11610:	00011628 	cmpgeui	zero,zero,1112
   11614:	00011630 	cmpltui	zero,zero,1112
   11618:	00011630 	cmpltui	zero,zero,1112
   1161c:	00011620 	cmpeqi	zero,zero,1112
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11620:	00800044 	movi	r2,1
   11624:	00000306 	br	11634 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11628:	0005883a 	mov	r2,zero
   1162c:	00000106 	br	11634 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11630:	0005883a 	mov	r2,zero
  }
}
   11634:	e037883a 	mov	sp,fp
   11638:	df000017 	ldw	fp,0(sp)
   1163c:	dec00104 	addi	sp,sp,4
   11640:	f800283a 	ret

00011644 <atexit>:
   11644:	200b883a 	mov	r5,r4
   11648:	000f883a 	mov	r7,zero
   1164c:	000d883a 	mov	r6,zero
   11650:	0009883a 	mov	r4,zero
   11654:	001170c1 	jmpi	1170c <__register_exitproc>

00011658 <exit>:
   11658:	defffe04 	addi	sp,sp,-8
   1165c:	000b883a 	mov	r5,zero
   11660:	dc000015 	stw	r16,0(sp)
   11664:	dfc00115 	stw	ra,4(sp)
   11668:	2021883a 	mov	r16,r4
   1166c:	00118240 	call	11824 <__call_exitprocs>
   11670:	00800074 	movhi	r2,1
   11674:	108fc304 	addi	r2,r2,16140
   11678:	11000017 	ldw	r4,0(r2)
   1167c:	20800f17 	ldw	r2,60(r4)
   11680:	10000126 	beq	r2,zero,11688 <exit+0x30>
   11684:	103ee83a 	callr	r2
   11688:	8009883a 	mov	r4,r16
   1168c:	00119a40 	call	119a4 <_exit>

00011690 <memcmp>:
   11690:	01c000c4 	movi	r7,3
   11694:	3980192e 	bgeu	r7,r6,116fc <memcmp+0x6c>
   11698:	2144b03a 	or	r2,r4,r5
   1169c:	11c4703a 	and	r2,r2,r7
   116a0:	10000f26 	beq	r2,zero,116e0 <memcmp+0x50>
   116a4:	20800003 	ldbu	r2,0(r4)
   116a8:	28c00003 	ldbu	r3,0(r5)
   116ac:	10c0151e 	bne	r2,r3,11704 <memcmp+0x74>
   116b0:	31bfff84 	addi	r6,r6,-2
   116b4:	01ffffc4 	movi	r7,-1
   116b8:	00000406 	br	116cc <memcmp+0x3c>
   116bc:	20800003 	ldbu	r2,0(r4)
   116c0:	28c00003 	ldbu	r3,0(r5)
   116c4:	31bfffc4 	addi	r6,r6,-1
   116c8:	10c00e1e 	bne	r2,r3,11704 <memcmp+0x74>
   116cc:	21000044 	addi	r4,r4,1
   116d0:	29400044 	addi	r5,r5,1
   116d4:	31fff91e 	bne	r6,r7,116bc <memcmp+0x2c>
   116d8:	0005883a 	mov	r2,zero
   116dc:	f800283a 	ret
   116e0:	20c00017 	ldw	r3,0(r4)
   116e4:	28800017 	ldw	r2,0(r5)
   116e8:	18bfee1e 	bne	r3,r2,116a4 <memcmp+0x14>
   116ec:	31bfff04 	addi	r6,r6,-4
   116f0:	21000104 	addi	r4,r4,4
   116f4:	29400104 	addi	r5,r5,4
   116f8:	39bff936 	bltu	r7,r6,116e0 <memcmp+0x50>
   116fc:	303fe91e 	bne	r6,zero,116a4 <memcmp+0x14>
   11700:	003ff506 	br	116d8 <memcmp+0x48>
   11704:	10c5c83a 	sub	r2,r2,r3
   11708:	f800283a 	ret

0001170c <__register_exitproc>:
   1170c:	defffa04 	addi	sp,sp,-24
   11710:	dc000315 	stw	r16,12(sp)
   11714:	04000074 	movhi	r16,1
   11718:	840fc304 	addi	r16,r16,16140
   1171c:	80c00017 	ldw	r3,0(r16)
   11720:	dc400415 	stw	r17,16(sp)
   11724:	dfc00515 	stw	ra,20(sp)
   11728:	18805217 	ldw	r2,328(r3)
   1172c:	2023883a 	mov	r17,r4
   11730:	10003726 	beq	r2,zero,11810 <__register_exitproc+0x104>
   11734:	10c00117 	ldw	r3,4(r2)
   11738:	010007c4 	movi	r4,31
   1173c:	20c00e16 	blt	r4,r3,11778 <__register_exitproc+0x6c>
   11740:	1a000044 	addi	r8,r3,1
   11744:	8800221e 	bne	r17,zero,117d0 <__register_exitproc+0xc4>
   11748:	18c00084 	addi	r3,r3,2
   1174c:	18c7883a 	add	r3,r3,r3
   11750:	18c7883a 	add	r3,r3,r3
   11754:	12000115 	stw	r8,4(r2)
   11758:	10c7883a 	add	r3,r2,r3
   1175c:	19400015 	stw	r5,0(r3)
   11760:	0005883a 	mov	r2,zero
   11764:	dfc00517 	ldw	ra,20(sp)
   11768:	dc400417 	ldw	r17,16(sp)
   1176c:	dc000317 	ldw	r16,12(sp)
   11770:	dec00604 	addi	sp,sp,24
   11774:	f800283a 	ret
   11778:	00800034 	movhi	r2,0
   1177c:	10800004 	addi	r2,r2,0
   11780:	10002626 	beq	r2,zero,1181c <__register_exitproc+0x110>
   11784:	01006404 	movi	r4,400
   11788:	d9400015 	stw	r5,0(sp)
   1178c:	d9800115 	stw	r6,4(sp)
   11790:	d9c00215 	stw	r7,8(sp)
   11794:	00000000 	call	0 <__alt_mem_sdram>
   11798:	d9400017 	ldw	r5,0(sp)
   1179c:	d9800117 	ldw	r6,4(sp)
   117a0:	d9c00217 	ldw	r7,8(sp)
   117a4:	10001d26 	beq	r2,zero,1181c <__register_exitproc+0x110>
   117a8:	81000017 	ldw	r4,0(r16)
   117ac:	10000115 	stw	zero,4(r2)
   117b0:	02000044 	movi	r8,1
   117b4:	22405217 	ldw	r9,328(r4)
   117b8:	0007883a 	mov	r3,zero
   117bc:	12400015 	stw	r9,0(r2)
   117c0:	20805215 	stw	r2,328(r4)
   117c4:	10006215 	stw	zero,392(r2)
   117c8:	10006315 	stw	zero,396(r2)
   117cc:	883fde26 	beq	r17,zero,11748 <__register_exitproc+0x3c>
   117d0:	18c9883a 	add	r4,r3,r3
   117d4:	2109883a 	add	r4,r4,r4
   117d8:	1109883a 	add	r4,r2,r4
   117dc:	21802215 	stw	r6,136(r4)
   117e0:	01800044 	movi	r6,1
   117e4:	12406217 	ldw	r9,392(r2)
   117e8:	30cc983a 	sll	r6,r6,r3
   117ec:	4992b03a 	or	r9,r9,r6
   117f0:	12406215 	stw	r9,392(r2)
   117f4:	21c04215 	stw	r7,264(r4)
   117f8:	01000084 	movi	r4,2
   117fc:	893fd21e 	bne	r17,r4,11748 <__register_exitproc+0x3c>
   11800:	11006317 	ldw	r4,396(r2)
   11804:	218cb03a 	or	r6,r4,r6
   11808:	11806315 	stw	r6,396(r2)
   1180c:	003fce06 	br	11748 <__register_exitproc+0x3c>
   11810:	18805304 	addi	r2,r3,332
   11814:	18805215 	stw	r2,328(r3)
   11818:	003fc606 	br	11734 <__register_exitproc+0x28>
   1181c:	00bfffc4 	movi	r2,-1
   11820:	003fd006 	br	11764 <__register_exitproc+0x58>

00011824 <__call_exitprocs>:
   11824:	defff504 	addi	sp,sp,-44
   11828:	df000915 	stw	fp,36(sp)
   1182c:	dd400615 	stw	r21,24(sp)
   11830:	dc800315 	stw	r18,12(sp)
   11834:	dfc00a15 	stw	ra,40(sp)
   11838:	ddc00815 	stw	r23,32(sp)
   1183c:	dd800715 	stw	r22,28(sp)
   11840:	dd000515 	stw	r20,20(sp)
   11844:	dcc00415 	stw	r19,16(sp)
   11848:	dc400215 	stw	r17,8(sp)
   1184c:	dc000115 	stw	r16,4(sp)
   11850:	d9000015 	stw	r4,0(sp)
   11854:	2839883a 	mov	fp,r5
   11858:	04800044 	movi	r18,1
   1185c:	057fffc4 	movi	r21,-1
   11860:	00800074 	movhi	r2,1
   11864:	108fc304 	addi	r2,r2,16140
   11868:	12000017 	ldw	r8,0(r2)
   1186c:	45005217 	ldw	r20,328(r8)
   11870:	44c05204 	addi	r19,r8,328
   11874:	a0001c26 	beq	r20,zero,118e8 <__call_exitprocs+0xc4>
   11878:	a0800117 	ldw	r2,4(r20)
   1187c:	15ffffc4 	addi	r23,r2,-1
   11880:	b8000d16 	blt	r23,zero,118b8 <__call_exitprocs+0x94>
   11884:	14000044 	addi	r16,r2,1
   11888:	8421883a 	add	r16,r16,r16
   1188c:	8421883a 	add	r16,r16,r16
   11890:	84402004 	addi	r17,r16,128
   11894:	a463883a 	add	r17,r20,r17
   11898:	a421883a 	add	r16,r20,r16
   1189c:	e0001e26 	beq	fp,zero,11918 <__call_exitprocs+0xf4>
   118a0:	80804017 	ldw	r2,256(r16)
   118a4:	e0801c26 	beq	fp,r2,11918 <__call_exitprocs+0xf4>
   118a8:	bdffffc4 	addi	r23,r23,-1
   118ac:	843fff04 	addi	r16,r16,-4
   118b0:	8c7fff04 	addi	r17,r17,-4
   118b4:	bd7ff91e 	bne	r23,r21,1189c <__call_exitprocs+0x78>
   118b8:	00800034 	movhi	r2,0
   118bc:	10800004 	addi	r2,r2,0
   118c0:	10000926 	beq	r2,zero,118e8 <__call_exitprocs+0xc4>
   118c4:	a0800117 	ldw	r2,4(r20)
   118c8:	1000301e 	bne	r2,zero,1198c <__call_exitprocs+0x168>
   118cc:	a0800017 	ldw	r2,0(r20)
   118d0:	10003226 	beq	r2,zero,1199c <__call_exitprocs+0x178>
   118d4:	a009883a 	mov	r4,r20
   118d8:	98800015 	stw	r2,0(r19)
   118dc:	00000000 	call	0 <__alt_mem_sdram>
   118e0:	9d000017 	ldw	r20,0(r19)
   118e4:	a03fe41e 	bne	r20,zero,11878 <__call_exitprocs+0x54>
   118e8:	dfc00a17 	ldw	ra,40(sp)
   118ec:	df000917 	ldw	fp,36(sp)
   118f0:	ddc00817 	ldw	r23,32(sp)
   118f4:	dd800717 	ldw	r22,28(sp)
   118f8:	dd400617 	ldw	r21,24(sp)
   118fc:	dd000517 	ldw	r20,20(sp)
   11900:	dcc00417 	ldw	r19,16(sp)
   11904:	dc800317 	ldw	r18,12(sp)
   11908:	dc400217 	ldw	r17,8(sp)
   1190c:	dc000117 	ldw	r16,4(sp)
   11910:	dec00b04 	addi	sp,sp,44
   11914:	f800283a 	ret
   11918:	a0800117 	ldw	r2,4(r20)
   1191c:	80c00017 	ldw	r3,0(r16)
   11920:	10bfffc4 	addi	r2,r2,-1
   11924:	15c01426 	beq	r2,r23,11978 <__call_exitprocs+0x154>
   11928:	80000015 	stw	zero,0(r16)
   1192c:	183fde26 	beq	r3,zero,118a8 <__call_exitprocs+0x84>
   11930:	95c8983a 	sll	r4,r18,r23
   11934:	a0806217 	ldw	r2,392(r20)
   11938:	a5800117 	ldw	r22,4(r20)
   1193c:	2084703a 	and	r2,r4,r2
   11940:	10000b26 	beq	r2,zero,11970 <__call_exitprocs+0x14c>
   11944:	a0806317 	ldw	r2,396(r20)
   11948:	2088703a 	and	r4,r4,r2
   1194c:	20000c1e 	bne	r4,zero,11980 <__call_exitprocs+0x15c>
   11950:	89400017 	ldw	r5,0(r17)
   11954:	d9000017 	ldw	r4,0(sp)
   11958:	183ee83a 	callr	r3
   1195c:	a0800117 	ldw	r2,4(r20)
   11960:	15bfbf1e 	bne	r2,r22,11860 <__call_exitprocs+0x3c>
   11964:	98800017 	ldw	r2,0(r19)
   11968:	153fcf26 	beq	r2,r20,118a8 <__call_exitprocs+0x84>
   1196c:	003fbc06 	br	11860 <__call_exitprocs+0x3c>
   11970:	183ee83a 	callr	r3
   11974:	003ff906 	br	1195c <__call_exitprocs+0x138>
   11978:	a5c00115 	stw	r23,4(r20)
   1197c:	003feb06 	br	1192c <__call_exitprocs+0x108>
   11980:	89000017 	ldw	r4,0(r17)
   11984:	183ee83a 	callr	r3
   11988:	003ff406 	br	1195c <__call_exitprocs+0x138>
   1198c:	a0800017 	ldw	r2,0(r20)
   11990:	a027883a 	mov	r19,r20
   11994:	1029883a 	mov	r20,r2
   11998:	003fb606 	br	11874 <__call_exitprocs+0x50>
   1199c:	0005883a 	mov	r2,zero
   119a0:	003ffb06 	br	11990 <__call_exitprocs+0x16c>

000119a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   119a4:	defffd04 	addi	sp,sp,-12
   119a8:	df000215 	stw	fp,8(sp)
   119ac:	df000204 	addi	fp,sp,8
   119b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   119b4:	0001883a 	nop
   119b8:	e0bfff17 	ldw	r2,-4(fp)
   119bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   119c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   119c4:	10000226 	beq	r2,zero,119d0 <_exit+0x2c>
    ALT_SIM_FAIL();
   119c8:	002af070 	cmpltui	zero,zero,43969
   119cc:	00000106 	br	119d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   119d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   119d4:	003fff06 	br	119d4 <_exit+0x30>
