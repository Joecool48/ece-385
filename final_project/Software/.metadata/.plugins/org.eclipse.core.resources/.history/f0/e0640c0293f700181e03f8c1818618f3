/*
 * item.h
 *
 *  Created on: Dec 3, 2018
 *      Author: joey
 */
#include "sprite_animator.h"
#include "colliders.h"

#ifndef INCLUDE_ITEM_H_
#define INCLUDE_ITEM_H_
/* TODO
 * Implement item setups
 */
class Item : public Sprite_Animator {
public:
	Rect_Collider collider;
	float velX = 0, velY;
	// Used to sent a signal telling the item it collided. No physics implemented, just special actions
	virtual void collided_with (Rect_Collider & other) = 0;
	Item(uint16_t start_x, uint16_t start_y, uint16_t start_mode, uint16_t start_state, float start_frame, Rect_Collider rect);
};

class Fireflower : public Item {
	Fireflower(uint16_t start_x, uint16_t start_y, uint16_t start_mode, uint16_t start_state, float start_frame, Rect_Collider rect);
	void update();
	void animatorSetup();
};

class Mushroom : public Item {
	Mushroom(uint16_t start_x, uint16_t start_y, uint16_t start_mode, uint16_t start_state, float start_frame, Rect_Collider rect);
	const bool LEFT = 0;
	const bool RIGHT = 1;
	bool travelDir;
	void collided_with(Rect_Collider & other);
	void update();
	void animatorSetup();
};

class Coin : public Item {
	Coin(uint16_t start_x, uint16_t start_y, uint16_t start_mode, uint16_t start_state, float start_frame, Rect_Collider rect);
	void update();
	void animatorSetup();
};

class Fireball : public Sprite_Animator {
	Fireball(uint16_t start_x, uint16_t start_y, uint16_t start_mode, uint16_t start_state, float start_frame, Rect_Collider rect);
	Rect_Collider collider;
	const float FIREBALL_SPEED_BOUNCE = .5;
	void collided_with(Rect_Collider & other);
	void update();
	void animatorSetup();
};

#endif /* INCLUDE_ITEM_H_ */
