/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "../include/background.h"
#include "../include/init.h"
#include "../include/config.h"
#include <string>
#include <fstream>

using namespace std;

// For sim function. Remove when done.
// Updates the values of the PIOs for the sim
void collectInput () {

}

int main ()
{
	string prefix_path = "/home/joey/courses/ece385/final_project/python_sim";
	fstream software_done_file, hardware_done_file, sprite_x_file, sprite_y_file, sprite_width_file, sprite_height_file, sprite_address_file, sprite_id_file, sprite_flip_mode_file;
	software_done_file.open(prefix_path + "SOFTWARE_DONE");
	hardware_done_file.open(prefix_path + "HARDWARE_DONE");
	sprite_x_file.open(prefix_path + "SPRITE_X_PIO");
	sprite_y_file.open(prefix_path + "SPRITE_Y_PIO");
	sprite_width_file.open(prefix_path + "SPRITE_WIDTH_PIO");
	sprite_height_file.open(prefix_path + "SPRITE_HEIGHT_PIO");
	sprite_id_file.open(prefix_path + "SPRITE_ID_PIO");

	Background * background = new Background ();
	Player * player = new Player(30, 30); // Make a player at 30, 30
	background->setPlayer(player); // Each contains the other
	player->setBackground(background);
	setBackgroundObjectWorld1(background); // Add the world 1 object colliders
	Keyboard::initKeyboard(); // Startup the keyboard
	collectInput();
	Keyboard::updateKeys();
	while (true) {
		background->updateBackground(); // Function that does everything in the game.
		// Wait for hardware, and signal that you're done
		*SOFTWARE_DONE = 1;
		while (!(*HARDWARE_DONE)) { // Should update at 60ish fps

		}
		*SOFTWARE_DONE = 0;
	}
	return 0;
}
